%attribute(sigrok::LogLevel, int, id, id);
%attributestring(sigrok::LogLevel, std::string, name, name);
%template(EnumValueLogLevel) sigrok::EnumValue<sigrok::LogLevel, enum sr_loglevel>;
%enumextras(LogLevel);
%attribute(sigrok::DataType, int, id, id);
%attributestring(sigrok::DataType, std::string, name, name);
%template(EnumValueDataType) sigrok::EnumValue<sigrok::DataType, enum sr_datatype>;
%enumextras(DataType);
%attribute(sigrok::PacketType, int, id, id);
%attributestring(sigrok::PacketType, std::string, name, name);
%template(EnumValuePacketType) sigrok::EnumValue<sigrok::PacketType, enum sr_packettype>;
%enumextras(PacketType);
%attribute(sigrok::Quantity, int, id, id);
%attributestring(sigrok::Quantity, std::string, name, name);
%template(EnumValueQuantity) sigrok::EnumValue<sigrok::Quantity, enum sr_mq>;
%enumextras(Quantity);
%attribute(sigrok::Unit, int, id, id);
%attributestring(sigrok::Unit, std::string, name, name);
%template(EnumValueUnit) sigrok::EnumValue<sigrok::Unit, enum sr_unit>;
%enumextras(Unit);
%attribute(sigrok::QuantityFlag, int, id, id);
%attributestring(sigrok::QuantityFlag, std::string, name, name);
%template(EnumValueQuantityFlag) sigrok::EnumValue<sigrok::QuantityFlag, enum sr_mqflag>;
%enumextras(QuantityFlag);
%attribute(sigrok::TriggerMatchType, int, id, id);
%attributestring(sigrok::TriggerMatchType, std::string, name, name);
%template(EnumValueTriggerMatchType) sigrok::EnumValue<sigrok::TriggerMatchType, enum sr_trigger_matches>;
%enumextras(TriggerMatchType);
%attribute(sigrok::OutputFlag, int, id, id);
%attributestring(sigrok::OutputFlag, std::string, name, name);
%template(EnumValueOutputFlag) sigrok::EnumValue<sigrok::OutputFlag, enum sr_output_flag>;
%enumextras(OutputFlag);
%attribute(sigrok::ChannelType, int, id, id);
%attributestring(sigrok::ChannelType, std::string, name, name);
%template(EnumValueChannelType) sigrok::EnumValue<sigrok::ChannelType, enum sr_channeltype>;
%enumextras(ChannelType);
%attribute(sigrok::Capability, int, id, id);
%attributestring(sigrok::Capability, std::string, name, name);
%template(EnumValueCapability) sigrok::EnumValue<sigrok::Capability, enum sr_configcap>;
%enumextras(Capability);
%attribute(sigrok::ConfigKey, int, id, id);
%attributestring(sigrok::ConfigKey, std::string, name, name);
%template(EnumValueConfigKey) sigrok::EnumValue<sigrok::ConfigKey, enum sr_configkey>;
%enumextras(ConfigKey);
%attributestring(sigrok::ConfigKey, std::string, identifier, identifier);

