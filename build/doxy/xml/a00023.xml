<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="a00023" kind="file" language="C++">
    <compoundname>hwdriver.c</compoundname>
    <includes local="no">config.h</includes>
    <includes local="no">stdlib.h</includes>
    <includes local="no">stdio.h</includes>
    <includes local="no">sys/types.h</includes>
    <includes local="no">dirent.h</includes>
    <includes local="no">string.h</includes>
    <includes local="no">glib.h</includes>
    <includes refid="a00050" local="no">libsigrok/libsigrok.h</includes>
    <includes local="yes">libsigrok-internal.h</includes>
    <incdepgraph>
      <node id="15">
        <label>libsigrok-internal.h</label>
      </node>
      <node id="11">
        <label>stdint.h</label>
      </node>
      <node id="3">
        <label>stdlib.h</label>
      </node>
      <node id="14">
        <label>libsigrok/version.h</label>
        <link refid="a00056"/>
      </node>
      <node id="1">
        <label>src/hwdriver.c</label>
        <link refid="a00023"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>sys/types.h</label>
      </node>
      <node id="7">
        <label>string.h</label>
      </node>
      <node id="8">
        <label>glib.h</label>
      </node>
      <node id="10">
        <label>sys/time.h</label>
      </node>
      <node id="9">
        <label>libsigrok/libsigrok.h</label>
        <link refid="a00050"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>config.h</label>
      </node>
      <node id="4">
        <label>stdio.h</label>
      </node>
      <node id="13">
        <label>libsigrok/proto.h</label>
        <link refid="a00053"/>
      </node>
      <node id="12">
        <label>inttypes.h</label>
      </node>
      <node id="6">
        <label>dirent.h</label>
      </node>
    </incdepgraph>
      <sectiondef kind="var">
      <memberdef kind="variable" id="a00073_1gad9d330f6e5f0e31861ab89bfc388eb47" prot="public" static="yes" mutable="no">
        <type>struct <ref refid="a00174" kindref="compound">sr_key_info</ref></type>
        <definition>struct sr_key_info sr_key_info_config[]</definition>
        <argsstring>[]</argsstring>
        <name>sr_key_info_config</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/hwdriver.c" line="1" column="0" bodyfile="src/hwdriver.c" bodystart="49" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="a00073_1ga1beef9d43de597cb9488ba93660aff95" prot="public" static="yes" mutable="no">
        <type>struct <ref refid="a00174" kindref="compound">sr_key_info</ref></type>
        <definition>struct sr_key_info sr_key_info_mq[]</definition>
        <argsstring>[]</argsstring>
        <name>sr_key_info_mq</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/hwdriver.c" line="1" column="0" bodyfile="src/hwdriver.c" bodystart="251" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="a00073_1ga81de201d8a190c329b13ec94a354375e" prot="public" static="yes" mutable="no">
        <type>struct <ref refid="a00174" kindref="compound">sr_key_info</ref></type>
        <definition>struct sr_key_info sr_key_info_mqflag[]</definition>
        <argsstring>[]</argsstring>
        <name>sr_key_info_mqflag</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/hwdriver.c" line="1" column="0" bodyfile="src/hwdriver.c" bodystart="291" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="a00073_1gaadf7d00e9520d6b28b7d933807813377" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="a00050_1a543a61499eead2576f48b70fbc336e71" kindref="member">SR_PRIV</ref> const GVariantType *</type>
        <definition>SR_PRIV const GVariantType* sr_variant_type_get</definition>
        <argsstring>(int datatype)</argsstring>
        <name>sr_variant_type_get</name>
        <param>
          <type>int</type>
          <declname>datatype</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/hwdriver.c" line="326" column="28" bodyfile="src/hwdriver.c" bodystart="326" bodyend="351"/>
      </memberdef>
      <memberdef kind="function" id="a00073_1ga52e33694174ffc435bfef8c820cf6351" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="a00050_1a543a61499eead2576f48b70fbc336e71" kindref="member">SR_PRIV</ref> int</type>
        <definition>SR_PRIV int sr_variant_type_check</definition>
        <argsstring>(uint32_t key, GVariant *value)</argsstring>
        <name>sr_variant_type_check</name>
        <param>
          <type>uint32_t</type>
          <declname>key</declname>
        </param>
        <param>
          <type>GVariant *</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/hwdriver.c" line="354" column="13" bodyfile="src/hwdriver.c" bodystart="354" bodyend="378"/>
      </memberdef>
      <memberdef kind="function" id="a00073_1ga755e937630acf9037eff1938233782c8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>struct <ref refid="a00178" kindref="compound">sr_dev_driver</ref> **</type>
        <definition>struct sr_dev_driver** sr_driver_list</definition>
        <argsstring>(const struct sr_context *ctx)</argsstring>
        <name>sr_driver_list</name>
        <param>
          <type>const struct <ref refid="a00186" kindref="compound">sr_context</ref> *</type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
<para>Return the list of supported hardware drivers. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to a libsigrok context struct. Must not be NULL.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>NULL</parametername>
</parameternamelist>
<parameterdescription>
<para>The ctx argument was NULL, or there are no supported drivers. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Other</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the NULL-terminated list of hardware drivers. The user should NOT g_free() this list, <ref refid="a00070_1ga94b41cf5bc8ccafad9fe4c1bd6d2cc41" kindref="member">sr_exit()</ref> will do that.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>0.4.0 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/hwdriver.c" line="391" column="21" bodyfile="src/hwdriver.c" bodystart="391" bodyend="397"/>
      </memberdef>
      <memberdef kind="function" id="a00073_1ga33ced36993359a47eae8810f79737976" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int sr_driver_init</definition>
        <argsstring>(struct sr_context *ctx, struct sr_dev_driver *driver)</argsstring>
        <name>sr_driver_init</name>
        <param>
          <type>struct <ref refid="a00186" kindref="compound">sr_context</ref> *</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>struct <ref refid="a00178" kindref="compound">sr_dev_driver</ref> *</type>
          <declname>driver</declname>
        </param>
        <briefdescription>
<para>Initialize a hardware driver. </para>
        </briefdescription>
        <detaileddescription>
<para>This usually involves memory allocations and variable initializations within the driver, but <emphasis>not</emphasis> scanning for attached devices. The API call <ref refid="a00073_1ga997c1db14dae8faef0865b6331d52bdd" kindref="member">sr_driver_scan()</ref> is used for that.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>A libsigrok context object allocated by a previous call to <ref refid="a00070_1ga6210982b018100246093873faf07a667" kindref="member">sr_init()</ref>. Must not be NULL. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>driver</parametername>
</parameternamelist>
<parameterdescription>
<para>The driver to initialize. This must be a pointer to one of the entries returned by <ref refid="a00073_1ga755e937630acf9037eff1938233782c8" kindref="member">sr_driver_list()</ref>. Must not be NULL.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>SR_OK</parametername>
</parameternamelist>
<parameterdescription>
<para>Success </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>SR_ERR_ARG</parametername>
</parameternamelist>
<parameterdescription>
<para>Invalid parameter(s). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>SR_ERR_BUG</parametername>
</parameternamelist>
<parameterdescription>
<para>Internal errors. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>other</parametername>
</parameternamelist>
<parameterdescription>
<para>Another negative error code upon other errors.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>0.2.0 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/hwdriver.c" line="418" column="6" bodyfile="src/hwdriver.c" bodystart="418" bodyend="438"/>
        <references refid="a00178_1ab651e39fdcbadacbb2782af2989716bc" compoundref="a00050" startline="1203">sr_dev_driver::init</references>
        <references refid="a00050_1af94f33f23c5855e3e429bd2ca01e3b95a214df8baf519bba79a1b48d364be3f20" compoundref="a00050" startline="70">SR_ERR_ARG</references>
      </memberdef>
      <memberdef kind="function" id="a00073_1ga8bfdb365f409063a682928716f8c3c3f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GArray *</type>
        <definition>GArray* sr_driver_scan_options_list</definition>
        <argsstring>(const struct sr_dev_driver *driver)</argsstring>
        <name>sr_driver_scan_options_list</name>
        <param>
          <type>const struct <ref refid="a00178" kindref="compound">sr_dev_driver</ref> *</type>
          <declname>driver</declname>
        </param>
        <briefdescription>
<para>Enumerate scan options supported by this driver. </para>
        </briefdescription>
        <detaileddescription>
<para>Before calling <ref refid="a00073_1ga8bfdb365f409063a682928716f8c3c3f" kindref="member">sr_driver_scan_options_list()</ref>, the user must have previously initialized the driver by calling <ref refid="a00073_1ga33ced36993359a47eae8810f79737976" kindref="member">sr_driver_init()</ref>.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>driver</parametername>
</parameternamelist>
<parameterdescription>
<para>The driver to enumerate options for. This must be a pointer to one of the entries returned by <ref refid="a00073_1ga755e937630acf9037eff1938233782c8" kindref="member">sr_driver_list()</ref>. Must not be NULL.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A GArray * of uint32_t entries, or NULL on invalid arguments. Each entry is a configuration key that is supported as a scan option. The array must be freed by the caller using g_array_free().</para>
</simplesect>
<simplesect kind="since"><para>0.4.0 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/hwdriver.c" line="456" column="9" bodyfile="src/hwdriver.c" bodystart="456" bodyend="475"/>
        <references refid="a00073_1gaac72c02a32f953728715973412be0bc6" compoundref="a00023" startline="940" endline="994">sr_config_list</references>
        <references refid="a00050_1af94f33f23c5855e3e429bd2ca01e3b95aa35b06e07345c41f0102c255c9cd0bf1" compoundref="a00050" startline="67">SR_OK</references>
      </memberdef>
      <memberdef kind="function" id="a00073_1gad22f4a031e8998476a74bba7dbb0fff6" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>static int check_options</definition>
        <argsstring>(struct sr_dev_driver *driver, GSList *options, uint32_t optlist_key, struct sr_dev_inst *sdi, struct sr_channel_group *cg)</argsstring>
        <name>check_options</name>
        <param>
          <type>struct <ref refid="a00178" kindref="compound">sr_dev_driver</ref> *</type>
          <declname>driver</declname>
        </param>
        <param>
          <type>GSList *</type>
          <declname>options</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>optlist_key</declname>
        </param>
        <param>
          <type>struct sr_dev_inst *</type>
          <declname>sdi</declname>
        </param>
        <param>
          <type>struct <ref refid="a00166" kindref="compound">sr_channel_group</ref> *</type>
          <declname>cg</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/hwdriver.c" line="477" column="12" bodyfile="src/hwdriver.c" bodystart="477" bodyend="519"/>
      </memberdef>
      <memberdef kind="function" id="a00073_1ga997c1db14dae8faef0865b6331d52bdd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GSList *</type>
        <definition>GSList* sr_driver_scan</definition>
        <argsstring>(struct sr_dev_driver *driver, GSList *options)</argsstring>
        <name>sr_driver_scan</name>
        <param>
          <type>struct <ref refid="a00178" kindref="compound">sr_dev_driver</ref> *</type>
          <declname>driver</declname>
        </param>
        <param>
          <type>GSList *</type>
          <declname>options</declname>
        </param>
        <briefdescription>
<para>Tell a hardware driver to scan for devices. </para>
        </briefdescription>
        <detaileddescription>
<para>In addition to the detection, the devices that are found are also initialized automatically. On some devices, this involves a firmware upload, or other such measures.</para>
<para>The order in which the system is scanned for devices is not specified. The caller should not assume or rely on any specific order.</para>
<para>Before calling <ref refid="a00073_1ga997c1db14dae8faef0865b6331d52bdd" kindref="member">sr_driver_scan()</ref>, the user must have previously initialized the driver by calling <ref refid="a00073_1ga33ced36993359a47eae8810f79737976" kindref="member">sr_driver_init()</ref>.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>driver</parametername>
</parameternamelist>
<parameterdescription>
<para>The driver that should scan. This must be a pointer to one of the entries returned by <ref refid="a00073_1ga755e937630acf9037eff1938233782c8" kindref="member">sr_driver_list()</ref>. Must not be NULL. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>options</parametername>
</parameternamelist>
<parameterdescription>
<para>A list of &apos;struct sr_hwopt&apos; options to pass to the driver&apos;s scanner. Can be NULL/empty.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A GSList * of &apos;struct sr_dev_inst&apos;, or NULL if no devices were found (or errors were encountered). This list must be freed by the caller using g_slist_free(), but without freeing the data pointed to in the list.</para>
</simplesect>
<simplesect kind="since"><para>0.2.0 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/hwdriver.c" line="546" column="9" bodyfile="src/hwdriver.c" bodystart="546" bodyend="570"/>
        <references refid="a00178_1a78504fc823d187e0f2f2646d9f20e883" compoundref="a00050" startline="1258">sr_dev_driver::context</references>
      </memberdef>
      <memberdef kind="function" id="a00073_1gaa7fdd457a453686ed4ef4a5b303f4655" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="a00050_1a543a61499eead2576f48b70fbc336e71" kindref="member">SR_PRIV</ref> void</type>
        <definition>SR_PRIV void sr_hw_cleanup_all</definition>
        <argsstring>(const struct sr_context *ctx)</argsstring>
        <name>sr_hw_cleanup_all</name>
        <param>
          <type>const struct <ref refid="a00186" kindref="compound">sr_context</ref> *</type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
<para>Call driver cleanup function for all drivers. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to a libsigrok context struct. Must not be NULL. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/hwdriver.c" line="579" column="14" bodyfile="src/hwdriver.c" bodystart="579" bodyend="595"/>
      </memberdef>
      <memberdef kind="function" id="a00073_1ga793fce83fc99e725757fbea4db0a1aad" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="a00050_1a543a61499eead2576f48b70fbc336e71" kindref="member">SR_PRIV</ref> struct <ref refid="a00170" kindref="compound">sr_config</ref> *</type>
        <definition>SR_PRIV struct sr_config* sr_config_new</definition>
        <argsstring>(uint32_t key, GVariant *data)</argsstring>
        <name>sr_config_new</name>
        <param>
          <type>uint32_t</type>
          <declname>key</declname>
        </param>
        <param>
          <type>GVariant *</type>
          <declname>data</declname>
        </param>
        <briefdescription>
<para>Allocate struct <ref refid="a00170" kindref="compound">sr_config</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para>A floating reference can be passed in for data.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>key</parametername>
</parameternamelist>
<parameterdescription>
<para>The config key to use. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>The GVariant data to use.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The newly allocated struct <ref refid="a00170" kindref="compound">sr_config</ref>. This function is assumed to never fail. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/hwdriver.c" line="610" column="24" bodyfile="src/hwdriver.c" bodystart="610" bodyend="619"/>
      </memberdef>
      <memberdef kind="function" id="a00073_1ga6c6fa89548d707d77a419d4d591347b6" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="a00050_1a543a61499eead2576f48b70fbc336e71" kindref="member">SR_PRIV</ref> void</type>
        <definition>SR_PRIV void sr_config_free</definition>
        <argsstring>(struct sr_config *src)</argsstring>
        <name>sr_config_free</name>
        <param>
          <type>struct <ref refid="a00170" kindref="compound">sr_config</ref> *</type>
          <declname>src</declname>
        </param>
        <briefdescription>
<para>Free struct <ref refid="a00170" kindref="compound">sr_config</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/hwdriver.c" line="626" column="14" bodyfile="src/hwdriver.c" bodystart="626" bodyend="635"/>
      </memberdef>
      <memberdef kind="function" id="a00073_1ga72a4838c0fe5a39fa249374f8a28e473" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="a00050_1a543a61499eead2576f48b70fbc336e71" kindref="member">SR_PRIV</ref> int</type>
        <definition>SR_PRIV int sr_dev_acquisition_start</definition>
        <argsstring>(struct sr_dev_inst *sdi)</argsstring>
        <name>sr_dev_acquisition_start</name>
        <param>
          <type>struct sr_dev_inst *</type>
          <declname>sdi</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/hwdriver.c" line="638" column="13" bodyfile="src/hwdriver.c" bodystart="638" bodyend="654"/>
      </memberdef>
      <memberdef kind="function" id="a00073_1ga999700144554d836ada2a534753ad0a4" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="a00050_1a543a61499eead2576f48b70fbc336e71" kindref="member">SR_PRIV</ref> int</type>
        <definition>SR_PRIV int sr_dev_acquisition_stop</definition>
        <argsstring>(struct sr_dev_inst *sdi)</argsstring>
        <name>sr_dev_acquisition_stop</name>
        <param>
          <type>struct sr_dev_inst *</type>
          <declname>sdi</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/hwdriver.c" line="657" column="13" bodyfile="src/hwdriver.c" bodystart="657" bodyend="673"/>
      </memberdef>
      <memberdef kind="function" id="a00073_1ga298159215a50bd4e5ff06e7b3eabc64f" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void log_key</definition>
        <argsstring>(const struct sr_dev_inst *sdi, const struct sr_channel_group *cg, uint32_t key, unsigned int op, GVariant *data)</argsstring>
        <name>log_key</name>
        <param>
          <type>const struct sr_dev_inst *</type>
          <declname>sdi</declname>
        </param>
        <param>
          <type>const struct <ref refid="a00166" kindref="compound">sr_channel_group</ref> *</type>
          <declname>cg</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>key</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>op</declname>
        </param>
        <param>
          <type>GVariant *</type>
          <declname>data</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/hwdriver.c" line="675" column="13" bodyfile="src/hwdriver.c" bodystart="675" bodyend="695"/>
      </memberdef>
      <memberdef kind="function" id="a00073_1ga51368215baeb022c45dc76d09ab44425" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>static int check_key</definition>
        <argsstring>(const struct sr_dev_driver *driver, const struct sr_dev_inst *sdi, const struct sr_channel_group *cg, uint32_t key, unsigned int op, GVariant *data)</argsstring>
        <name>check_key</name>
        <param>
          <type>const struct <ref refid="a00178" kindref="compound">sr_dev_driver</ref> *</type>
          <declname>driver</declname>
        </param>
        <param>
          <type>const struct sr_dev_inst *</type>
          <declname>sdi</declname>
        </param>
        <param>
          <type>const struct <ref refid="a00166" kindref="compound">sr_channel_group</ref> *</type>
          <declname>cg</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>key</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>op</declname>
        </param>
        <param>
          <type>GVariant *</type>
          <declname>data</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/hwdriver.c" line="697" column="12" bodyfile="src/hwdriver.c" bodystart="697" bodyend="770"/>
      </memberdef>
      <memberdef kind="function" id="a00073_1gabc6131f95a0a1198355a4f013200ad7b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int sr_config_get</definition>
        <argsstring>(const struct sr_dev_driver *driver, const struct sr_dev_inst *sdi, const struct sr_channel_group *cg, uint32_t key, GVariant **data)</argsstring>
        <name>sr_config_get</name>
        <param>
          <type>const struct <ref refid="a00178" kindref="compound">sr_dev_driver</ref> *</type>
          <declname>driver</declname>
        </param>
        <param>
          <type>const struct sr_dev_inst *</type>
          <declname>sdi</declname>
        </param>
        <param>
          <type>const struct <ref refid="a00166" kindref="compound">sr_channel_group</ref> *</type>
          <declname>cg</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>key</declname>
        </param>
        <param>
          <type>GVariant **</type>
          <declname>data</declname>
        </param>
        <briefdescription>
<para>Query value of a configuration key at the given driver or device instance. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">driver</parametername>
</parameternamelist>
<parameterdescription>
<para>The <ref refid="a00178" kindref="compound">sr_dev_driver</ref> struct to query. Must not be NULL. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">sdi</parametername>
</parameternamelist>
<parameterdescription>
<para>(optional) If the key is specific to a device, this must contain a pointer to the struct sr_dev_inst to be checked. Otherwise it must be NULL. If sdi is != NULL, sdi-&gt;priv must also be != NULL. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">cg</parametername>
</parameternamelist>
<parameterdescription>
<para>The channel group on the device for which to list the values, or NULL. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">key</parametername>
</parameternamelist>
<parameterdescription>
<para>The configuration key (SR_CONF_*). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="inout">data</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to a GVariant where the value will be stored. Must not be NULL. The caller is given ownership of the GVariant and must thus decrease the refcount after use. However if this function returns an error code, the field should be considered unused, and should not be unreferenced.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>SR_OK</parametername>
</parameternamelist>
<parameterdescription>
<para>Success. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>SR_ERR</parametername>
</parameternamelist>
<parameterdescription>
<para>Error. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>SR_ERR_ARG</parametername>
</parameternamelist>
<parameterdescription>
<para>The driver doesn&apos;t know that key, but this is not to be interpreted as an error by the caller; merely as an indication that it&apos;s not applicable.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>0.3.0 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/hwdriver.c" line="797" column="6" bodyfile="src/hwdriver.c" bodystart="797" bodyend="830"/>
        <references refid="a00178_1a53a547f712afbaa08238df3ba91fd8e9" compoundref="a00050" startline="1224">sr_dev_driver::config_get</references>
        <references refid="a00050_1af94f33f23c5855e3e429bd2ca01e3b95a132553bf1f479756d2590f9fd40bb289" compoundref="a00050" startline="68">SR_ERR</references>
        <references refid="a00050_1af94f33f23c5855e3e429bd2ca01e3b95a214df8baf519bba79a1b48d364be3f20" compoundref="a00050" startline="70">SR_ERR_ARG</references>
      </memberdef>
      <memberdef kind="function" id="a00073_1ga17f18fc144eeb667f2fd596948426941" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int sr_config_set</definition>
        <argsstring>(const struct sr_dev_inst *sdi, const struct sr_channel_group *cg, uint32_t key, GVariant *data)</argsstring>
        <name>sr_config_set</name>
        <param>
          <type>const struct sr_dev_inst *</type>
          <declname>sdi</declname>
        </param>
        <param>
          <type>const struct <ref refid="a00166" kindref="compound">sr_channel_group</ref> *</type>
          <declname>cg</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>key</declname>
        </param>
        <param>
          <type>GVariant *</type>
          <declname>data</declname>
        </param>
        <briefdescription>
<para>Set value of a configuration key in a device instance. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">sdi</parametername>
</parameternamelist>
<parameterdescription>
<para>The device instance. Must not be NULL. sdi-&gt;driver and sdi-&gt;priv must not be NULL either. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">cg</parametername>
</parameternamelist>
<parameterdescription>
<para>The channel group on the device for which to list the values, or NULL. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">key</parametername>
</parameternamelist>
<parameterdescription>
<para>The configuration key (SR_CONF_*). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>The new value for the key, as a GVariant with GVariantType appropriate to that key. A floating reference can be passed in; its refcount will be sunk and unreferenced after use.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>SR_OK</parametername>
</parameternamelist>
<parameterdescription>
<para>Success. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>SR_ERR</parametername>
</parameternamelist>
<parameterdescription>
<para>Error. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>SR_ERR_ARG</parametername>
</parameternamelist>
<parameterdescription>
<para>The driver doesn&apos;t know that key, but this is not to be interpreted as an error by the caller; merely as an indication that it&apos;s not applicable.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>0.3.0 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/hwdriver.c" line="852" column="6" bodyfile="src/hwdriver.c" bodystart="852" bodyend="882"/>
        <references refid="a00050_1af94f33f23c5855e3e429bd2ca01e3b95a132553bf1f479756d2590f9fd40bb289" compoundref="a00050" startline="68">SR_ERR</references>
        <references refid="a00050_1af94f33f23c5855e3e429bd2ca01e3b95a214df8baf519bba79a1b48d364be3f20" compoundref="a00050" startline="70">SR_ERR_ARG</references>
        <references refid="a00050_1af94f33f23c5855e3e429bd2ca01e3b95a876e62a9b4ae742236909f3cc639478a" compoundref="a00050" startline="74">SR_ERR_DEV_CLOSED</references>
        <references refid="a00050_1aeafac70caf348818c4ea8290137ff0e9a27b78acb86610b24607730033ab1eac7" compoundref="a00050" startline="1188">SR_ST_ACTIVE</references>
      </memberdef>
      <memberdef kind="function" id="a00073_1ga392e481fc872786f871b5c7ce3934087" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int sr_config_commit</definition>
        <argsstring>(const struct sr_dev_inst *sdi)</argsstring>
        <name>sr_config_commit</name>
        <param>
          <type>const struct sr_dev_inst *</type>
          <declname>sdi</declname>
        </param>
        <briefdescription>
<para>Apply configuration settings to the device hardware. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>sdi</parametername>
</parameternamelist>
<parameterdescription>
<para>The device instance.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>SR_OK upon success or SR_ERR in case of error.</para>
</simplesect>
<simplesect kind="since"><para>0.3.0 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/hwdriver.c" line="893" column="6" bodyfile="src/hwdriver.c" bodystart="893" bodyend="909"/>
        <references refid="a00050_1af94f33f23c5855e3e429bd2ca01e3b95a132553bf1f479756d2590f9fd40bb289" compoundref="a00050" startline="68">SR_ERR</references>
        <references refid="a00050_1af94f33f23c5855e3e429bd2ca01e3b95a876e62a9b4ae742236909f3cc639478a" compoundref="a00050" startline="74">SR_ERR_DEV_CLOSED</references>
        <references refid="a00050_1af94f33f23c5855e3e429bd2ca01e3b95aa35b06e07345c41f0102c255c9cd0bf1" compoundref="a00050" startline="67">SR_OK</references>
        <references refid="a00050_1aeafac70caf348818c4ea8290137ff0e9a27b78acb86610b24607730033ab1eac7" compoundref="a00050" startline="1188">SR_ST_ACTIVE</references>
        <referencedby refid="a00076_1gac037d037baecc2b3679044d2b7c3bad3" compoundref="a00035" startline="318" endline="377">sr_session_dev_add</referencedby>
      </memberdef>
      <memberdef kind="function" id="a00073_1gaac72c02a32f953728715973412be0bc6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int sr_config_list</definition>
        <argsstring>(const struct sr_dev_driver *driver, const struct sr_dev_inst *sdi, const struct sr_channel_group *cg, uint32_t key, GVariant **data)</argsstring>
        <name>sr_config_list</name>
        <param>
          <type>const struct <ref refid="a00178" kindref="compound">sr_dev_driver</ref> *</type>
          <declname>driver</declname>
        </param>
        <param>
          <type>const struct sr_dev_inst *</type>
          <declname>sdi</declname>
        </param>
        <param>
          <type>const struct <ref refid="a00166" kindref="compound">sr_channel_group</ref> *</type>
          <declname>cg</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>key</declname>
        </param>
        <param>
          <type>GVariant **</type>
          <declname>data</declname>
        </param>
        <briefdescription>
<para>List all possible values for a configuration key. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">driver</parametername>
</parameternamelist>
<parameterdescription>
<para>The <ref refid="a00178" kindref="compound">sr_dev_driver</ref> struct to query. Must not be NULL. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">sdi</parametername>
</parameternamelist>
<parameterdescription>
<para>(optional) If the key is specific to a device instance, this must contain a pointer to the struct sr_dev_inst to be checked. Otherwise it must be NULL. If sdi is != NULL, sdi-&gt;priv must also be != NULL. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">cg</parametername>
</parameternamelist>
<parameterdescription>
<para>The channel group on the device instance for which to list the values, or NULL. If this device instance doesn&apos;t have channel groups, this must not be != NULL. If cg is NULL, this function will return the &quot;common&quot; device instance options that are channel-group independent. Otherwise it will return the channel-group specific options. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">key</parametername>
</parameternamelist>
<parameterdescription>
<para>The configuration key (SR_CONF_*). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="inout">data</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to a GVariant where the list will be stored. The caller is given ownership of the GVariant and must thus unref the GVariant after use. However if this function returns an error code, the field should be considered unused, and should not be unreferenced.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>SR_OK</parametername>
</parameternamelist>
<parameterdescription>
<para>Success. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>SR_ERR</parametername>
</parameternamelist>
<parameterdescription>
<para>Error. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>SR_ERR_ARG</parametername>
</parameternamelist>
<parameterdescription>
<para>The driver doesn&apos;t know that key, but this is not to be interpreted as an error by the caller; merely as an indication that it&apos;s not applicable.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>0.3.0 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/hwdriver.c" line="940" column="6" bodyfile="src/hwdriver.c" bodystart="940" bodyend="994"/>
        <references refid="a00178_1add11215f64fb44c03ccd406ce42b5c5a" compoundref="a00050" startline="1242">sr_dev_driver::config_list</references>
        <references refid="a00174_1a279e22888cc8ef8d5b0d42091c72d80b" compoundref="a00050" startline="656">sr_key_info::key</references>
        <references refid="a00050_1af94f33f23c5855e3e429bd2ca01e3b95a132553bf1f479756d2590f9fd40bb289" compoundref="a00050" startline="68">SR_ERR</references>
        <references refid="a00050_1af94f33f23c5855e3e429bd2ca01e3b95a214df8baf519bba79a1b48d364be3f20" compoundref="a00050" startline="70">SR_ERR_ARG</references>
        <referencedby refid="a00073_1ga8bfdb365f409063a682928716f8c3c3f" compoundref="a00023" startline="456" endline="475">sr_driver_scan_options_list</referencedby>
      </memberdef>
      <memberdef kind="function" id="a00073_1gac61a4939a49ee21dae288c906f90e215" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>struct <ref refid="a00174" kindref="compound">sr_key_info</ref> *</type>
        <definition>static struct sr_key_info* get_keytable</definition>
        <argsstring>(int keytype)</argsstring>
        <name>get_keytable</name>
        <param>
          <type>int</type>
          <declname>keytype</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/hwdriver.c" line="996" column="25" bodyfile="src/hwdriver.c" bodystart="996" bodyend="1016"/>
      </memberdef>
      <memberdef kind="function" id="a00073_1gafbe481f247af711cbd6902d9a3120cb6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const struct <ref refid="a00174" kindref="compound">sr_key_info</ref> *</type>
        <definition>const struct sr_key_info* sr_key_info_get</definition>
        <argsstring>(int keytype, uint32_t key)</argsstring>
        <name>sr_key_info_get</name>
        <param>
          <type>int</type>
          <declname>keytype</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>key</declname>
        </param>
        <briefdescription>
<para>Get information about a key, by key. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">keytype</parametername>
</parameternamelist>
<parameterdescription>
<para>The namespace the key is in. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">key</parametername>
</parameternamelist>
<parameterdescription>
<para>The key to find.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A pointer to a struct <ref refid="a00174" kindref="compound">sr_key_info</ref>, or NULL if the key was not found.</para>
</simplesect>
<simplesect kind="since"><para>0.3.0 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/hwdriver.c" line="1029" column="25" bodyfile="src/hwdriver.c" bodystart="1029" bodyend="1043"/>
      </memberdef>
      <memberdef kind="function" id="a00073_1gac033a6db6a21346591a068d90ee8fae4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const struct <ref refid="a00174" kindref="compound">sr_key_info</ref> *</type>
        <definition>const struct sr_key_info* sr_key_info_name_get</definition>
        <argsstring>(int keytype, const char *keyid)</argsstring>
        <name>sr_key_info_name_get</name>
        <param>
          <type>int</type>
          <declname>keytype</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>keyid</declname>
        </param>
        <briefdescription>
<para>Get information about a key, by name. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">keytype</parametername>
</parameternamelist>
<parameterdescription>
<para>The namespace the key is in. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">keyid</parametername>
</parameternamelist>
<parameterdescription>
<para>The key id string.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A pointer to a struct <ref refid="a00174" kindref="compound">sr_key_info</ref>, or NULL if the key was not found.</para>
</simplesect>
<simplesect kind="since"><para>0.2.0 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/hwdriver.c" line="1056" column="25" bodyfile="src/hwdriver.c" bodystart="1056" bodyend="1072"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Hardware driver handling in libsigrok. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="src/hwdriver.c"/>
  </compounddef>
</doxygen>
