<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="a00078" kind="group">
    <compoundname>grp_trigger</compoundname>
    <title>Trigger handling</title>
      <sectiondef kind="func">
      <memberdef kind="function" id="a00078_1ga0276d66ef0c3ced910af1c7799c57895" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>struct <ref refid="a00106" kindref="compound">sr_trigger</ref> *</type>
        <definition>struct sr_trigger* sr_trigger_new</definition>
        <argsstring>(const char *name)</argsstring>
        <name>sr_trigger_new</name>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <briefdescription>
<para>Create a new trigger. </para>
        </briefdescription>
        <detaileddescription>
<para>The caller is responsible to free the trigger (including all stages and matches) using <ref refid="a00078_1ga39e4c8e299f0d246cb36914c8e9d6e7c" kindref="member">sr_trigger_free()</ref> once it is no longer needed.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>The trigger name to use. Can be NULL.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A newly allocated trigger.</para>
</simplesect>
<simplesect kind="since"><para>0.4.0 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/trigger.c" line="54" column="18" bodyfile="src/trigger.c" bodystart="54" bodyend="63"/>
        <references refid="a00106_1a1d7ca93d2167ce7b17cf886008d3e8b2" compoundref="a00050" startline="427">sr_trigger::name</references>
      </memberdef>
      <memberdef kind="function" id="a00078_1ga39e4c8e299f0d246cb36914c8e9d6e7c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void sr_trigger_free</definition>
        <argsstring>(struct sr_trigger *trig)</argsstring>
        <name>sr_trigger_free</name>
        <param>
          <type>struct <ref refid="a00106" kindref="compound">sr_trigger</ref> *</type>
          <declname>trig</declname>
        </param>
        <briefdescription>
<para>Free a previously allocated trigger. </para>
        </briefdescription>
        <detaileddescription>
<para>This will also free any trigger stages/matches in this trigger.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>trig</parametername>
</parameternamelist>
<parameterdescription>
<para>The trigger to free. Must not be NULL.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>0.4.0 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/trigger.c" line="74" column="7" bodyfile="src/trigger.c" bodystart="74" bodyend="92"/>
        <references refid="a00106_1a1d7ca93d2167ce7b17cf886008d3e8b2" compoundref="a00050" startline="427">sr_trigger::name</references>
        <references refid="a00110_1a223b2622bcefdcf93ab16e9a6008eb69" compoundref="a00050" startline="435">sr_trigger_stage::stage</references>
        <references refid="a00106_1a5d82a6e8a0e748e4a4b5ffac6c473553" compoundref="a00050" startline="429">sr_trigger::stages</references>
      </memberdef>
      <memberdef kind="function" id="a00078_1ga225a5c7467d13ac60798ffd1fbb3750d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>struct <ref refid="a00110" kindref="compound">sr_trigger_stage</ref> *</type>
        <definition>struct sr_trigger_stage* sr_trigger_stage_add</definition>
        <argsstring>(struct sr_trigger *trig)</argsstring>
        <name>sr_trigger_stage_add</name>
        <param>
          <type>struct <ref refid="a00106" kindref="compound">sr_trigger</ref> *</type>
          <declname>trig</declname>
        </param>
        <briefdescription>
<para>Allocate a new trigger stage and add it to the specified trigger. </para>
        </briefdescription>
        <detaileddescription>
<para>The caller is responsible to free the trigger (including all stages and matches) using <ref refid="a00078_1ga39e4c8e299f0d246cb36914c8e9d6e7c" kindref="member">sr_trigger_free()</ref> once it is no longer needed.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>trig</parametername>
</parameternamelist>
<parameterdescription>
<para>The trigger to add a stage to. Must not be NULL.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>NULL</parametername>
</parameternamelist>
<parameterdescription>
<para>An invalid (NULL) trigger was passed into the function. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>other</parametername>
</parameternamelist>
<parameterdescription>
<para>A newly allocated trigger stage (which has also been added to the list of stages of the specified trigger).</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>0.4.0 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/trigger.c" line="108" column="24" bodyfile="src/trigger.c" bodystart="108" bodyend="120"/>
        <references refid="a00110_1a223b2622bcefdcf93ab16e9a6008eb69" compoundref="a00050" startline="435">sr_trigger_stage::stage</references>
        <references refid="a00106_1a5d82a6e8a0e748e4a4b5ffac6c473553" compoundref="a00050" startline="429">sr_trigger::stages</references>
      </memberdef>
      <memberdef kind="function" id="a00078_1ga55eeefded4138be23a6989ead396174a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int sr_trigger_match_add</definition>
        <argsstring>(struct sr_trigger_stage *stage, struct sr_channel *ch, int trigger_match, float value)</argsstring>
        <name>sr_trigger_match_add</name>
        <param>
          <type>struct <ref refid="a00110" kindref="compound">sr_trigger_stage</ref> *</type>
          <declname>stage</declname>
        </param>
        <param>
          <type>struct <ref refid="a00162" kindref="compound">sr_channel</ref> *</type>
          <declname>ch</declname>
        </param>
        <param>
          <type>int</type>
          <declname>trigger_match</declname>
        </param>
        <param>
          <type>float</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Allocate a new trigger match and add it to the specified trigger stage. </para>
        </briefdescription>
        <detaileddescription>
<para>The caller is responsible to free the trigger (including all stages and matches) using <ref refid="a00078_1ga39e4c8e299f0d246cb36914c8e9d6e7c" kindref="member">sr_trigger_free()</ref> once it is no longer needed.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>stage</parametername>
</parameternamelist>
<parameterdescription>
<para>The trigger stage to add the match to. Must not be NULL. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ch</parametername>
</parameternamelist>
<parameterdescription>
<para>The channel for this trigger match. Must not be NULL. Must be either of type SR_CHANNEL_LOGIC or SR_CHANNEL_ANALOG. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>trigger_match</parametername>
</parameternamelist>
<parameterdescription>
<para>The type of trigger match. Must be a valid trigger type from enum sr_trigger_matches. The trigger type must be valid for the respective channel type as well. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>Trigger value.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>SR_OK</parametername>
</parameternamelist>
<parameterdescription>
<para>Success. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>SR_ERR_ARG</parametername>
</parameternamelist>
<parameterdescription>
<para>Invalid argument(s) were passed to this functions.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>0.4.0 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/trigger.c" line="141" column="6" bodyfile="src/trigger.c" bodystart="141" bodyend="179"/>
        <references refid="a00114_1a29b9a3c4717d54c86b85bc851fb5d4a7" compoundref="a00050" startline="459">sr_trigger_match::match</references>
        <references refid="a00110_1a0664437fbdd904d7f54ccb0c185aebaf" compoundref="a00050" startline="437">sr_trigger_stage::matches</references>
        <references refid="a00050_1abe35ec3609ce0d8618a264cf53a4f68aaeb9f075cd43996644fc5b2cbc76e1edd" compoundref="a00050" startline="609">SR_CHANNEL_ANALOG</references>
        <references refid="a00050_1abe35ec3609ce0d8618a264cf53a4f68aa159812493482f1eb027eb15d981d7290" compoundref="a00050" startline="607">SR_CHANNEL_LOGIC</references>
        <references refid="a00050_1af94f33f23c5855e3e429bd2ca01e3b95a214df8baf519bba79a1b48d364be3f20" compoundref="a00050" startline="70">SR_ERR_ARG</references>
        <references refid="a00050_1af94f33f23c5855e3e429bd2ca01e3b95aa35b06e07345c41f0102c255c9cd0bf1" compoundref="a00050" startline="67">SR_OK</references>
        <references refid="a00050_1a2a05e89c547e9db554ef37e0beb28cd5a0e0939fb271f92e5b51edbb6774dff9f" compoundref="a00050" startline="417">SR_TRIGGER_EDGE</references>
        <references refid="a00050_1a2a05e89c547e9db554ef37e0beb28cd5a93b2e8da68935e0006224a822b792fa7" compoundref="a00050" startline="416">SR_TRIGGER_FALLING</references>
        <references refid="a00050_1a2a05e89c547e9db554ef37e0beb28cd5a3273ef68bdf46a93fd3e397ffd3c8c57" compoundref="a00050" startline="414">SR_TRIGGER_ONE</references>
        <references refid="a00050_1a2a05e89c547e9db554ef37e0beb28cd5a7a9fd2c5653b82548603981eaccdb59c" compoundref="a00050" startline="418">SR_TRIGGER_OVER</references>
        <references refid="a00050_1a2a05e89c547e9db554ef37e0beb28cd5a8d9ad0852406dee7917e3aace4fea388" compoundref="a00050" startline="415">SR_TRIGGER_RISING</references>
        <references refid="a00050_1a2a05e89c547e9db554ef37e0beb28cd5a1f6378e260ed126682371c32ccf5c3dd" compoundref="a00050" startline="419">SR_TRIGGER_UNDER</references>
        <references refid="a00050_1a2a05e89c547e9db554ef37e0beb28cd5a21805c7029c9e88f40ac71a22c006b4f" compoundref="a00050" startline="413">SR_TRIGGER_ZERO</references>
        <references refid="a00162_1ac4725baebd258b88f06dc8df833d7073" compoundref="a00050" startline="620">sr_channel::type</references>
        <references refid="a00114_1a3d7ab6efba1234081400e62088876e1e" compoundref="a00050" startline="462">sr_trigger_match::value</references>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Creating, using, or destroying triggers. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
  </compounddef>
</doxygen>
