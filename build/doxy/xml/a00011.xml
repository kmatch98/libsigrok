<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="a00011" kind="file" language="C++">
    <compoundname>conversion.c</compoundname>
    <includes refid="a00050" local="no">libsigrok/libsigrok.h</includes>
    <includes local="yes">libsigrok-internal.h</includes>
    <incdepgraph>
      <node id="10">
        <label>libsigrok-internal.h</label>
      </node>
      <node id="5">
        <label>stdint.h</label>
      </node>
      <node id="9">
        <label>libsigrok/version.h</label>
        <link refid="a00056"/>
      </node>
      <node id="7">
        <label>glib.h</label>
      </node>
      <node id="4">
        <label>sys/time.h</label>
      </node>
      <node id="2">
        <label>libsigrok/libsigrok.h</label>
        <link refid="a00050"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>src/conversion.c</label>
        <link refid="a00011"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>stdio.h</label>
      </node>
      <node id="8">
        <label>libsigrok/proto.h</label>
        <link refid="a00053"/>
      </node>
      <node id="6">
        <label>inttypes.h</label>
      </node>
    </incdepgraph>
      <sectiondef kind="func">
      <memberdef kind="function" id="a00011_1a3f168ba982a19fb0e51254d5852e6572" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int sr_a2l_threshold</definition>
        <argsstring>(const struct sr_datafeed_analog *analog, float threshold, uint8_t *output, uint64_t count)</argsstring>
        <name>sr_a2l_threshold</name>
        <param>
          <type>const struct <ref refid="a00138" kindref="compound">sr_datafeed_analog</ref> *</type>
          <declname>analog</declname>
        </param>
        <param>
          <type>float</type>
          <declname>threshold</declname>
        </param>
        <param>
          <type>uint8_t *</type>
          <declname>output</declname>
        </param>
        <param>
          <type>uint64_t</type>
          <declname>count</declname>
        </param>
        <briefdescription>
<para>Convert analog values to logic values by using a fixed threshold. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">analog</parametername>
</parameternamelist>
<parameterdescription>
<para>The analog input values. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">threshold</parametername>
</parameternamelist>
<parameterdescription>
<para>The threshold to use. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">output</parametername>
</parameternamelist>
<parameterdescription>
<para>The converted output values; either 0 or 1. Must provide space for count bytes. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">count</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of samples to process.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>SR_OK on success or SR_ERR on failure. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/conversion.c" line="44" column="6" bodyfile="src/conversion.c" bodystart="44" bodyend="65"/>
        <references refid="a00138_1a5c4aca13deba4509ec718b04f825fe10" compoundref="a00050" startline="518">sr_datafeed_analog::data</references>
        <references refid="a00138_1ad570779bcec5a0800815112655031fd5" compoundref="a00050" startline="520">sr_datafeed_analog::encoding</references>
        <references refid="a00142_1a17214e15d937f4772717f8b7264376a6" compoundref="a00050" startline="528">sr_analog_encoding::is_float</references>
        <references refid="a00069_1ga7c692bc1d32dc9b126cd0d6bbf21f2bd" compoundref="a00002" startline="177" endline="379">sr_analog_to_float</references>
        <references refid="a00050_1af94f33f23c5855e3e429bd2ca01e3b95a132553bf1f479756d2590f9fd40bb289" compoundref="a00050" startline="68">SR_ERR</references>
        <references refid="a00050_1af94f33f23c5855e3e429bd2ca01e3b95aa35b06e07345c41f0102c255c9cd0bf1" compoundref="a00050" startline="67">SR_OK</references>
      </memberdef>
      <memberdef kind="function" id="a00011_1abae077d85c8390eff878bf7d096d929a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int sr_a2l_schmitt_trigger</definition>
        <argsstring>(const struct sr_datafeed_analog *analog, float lo_thr, float hi_thr, uint8_t *state, uint8_t *output, uint64_t count)</argsstring>
        <name>sr_a2l_schmitt_trigger</name>
        <param>
          <type>const struct <ref refid="a00138" kindref="compound">sr_datafeed_analog</ref> *</type>
          <declname>analog</declname>
        </param>
        <param>
          <type>float</type>
          <declname>lo_thr</declname>
        </param>
        <param>
          <type>float</type>
          <declname>hi_thr</declname>
        </param>
        <param>
          <type>uint8_t *</type>
          <declname>state</declname>
        </param>
        <param>
          <type>uint8_t *</type>
          <declname>output</declname>
        </param>
        <param>
          <type>uint64_t</type>
          <declname>count</declname>
        </param>
        <briefdescription>
<para>Convert analog values to logic values by using a Schmitt-trigger algorithm. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>analog</parametername>
</parameternamelist>
<parameterdescription>
<para>The analog input values. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>lo_thr</parametername>
</parameternamelist>
<parameterdescription>
<para>The low threshold - result becomes 0 below it. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>hi_thr</parametername>
</parameternamelist>
<parameterdescription>
<para>The high threshold - result becomes 1 above it. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>state</parametername>
</parameternamelist>
<parameterdescription>
<para>The internal converter state. Must contain the state of logic sample n-1, will contain the state of logic sample n+count upon exit. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>output</parametername>
</parameternamelist>
<parameterdescription>
<para>The converted output values; either 0 or 1. Must provide space for count bytes. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>count</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of samples to process.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>SR_OK on success or SR_ERR on failure. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/conversion.c" line="81" column="6" bodyfile="src/conversion.c" bodystart="81" bodyend="109"/>
        <references refid="a00138_1a5c4aca13deba4509ec718b04f825fe10" compoundref="a00050" startline="518">sr_datafeed_analog::data</references>
        <references refid="a00138_1ad570779bcec5a0800815112655031fd5" compoundref="a00050" startline="520">sr_datafeed_analog::encoding</references>
        <references refid="a00142_1a17214e15d937f4772717f8b7264376a6" compoundref="a00050" startline="528">sr_analog_encoding::is_float</references>
        <references refid="a00069_1ga7c692bc1d32dc9b126cd0d6bbf21f2bd" compoundref="a00002" startline="177" endline="379">sr_analog_to_float</references>
        <references refid="a00050_1af94f33f23c5855e3e429bd2ca01e3b95a132553bf1f479756d2590f9fd40bb289" compoundref="a00050" startline="68">SR_ERR</references>
        <references refid="a00050_1af94f33f23c5855e3e429bd2ca01e3b95aa35b06e07345c41f0102c255c9cd0bf1" compoundref="a00050" startline="67">SR_OK</references>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Conversion helper functions. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="src/conversion.c"/>
  </compounddef>
</doxygen>
