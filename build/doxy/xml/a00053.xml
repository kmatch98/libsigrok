<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="a00053" kind="file" language="C++">
    <compoundname>proto.h</compoundname>
    <includedby refid="a00050" local="no">include/libsigrok/libsigrok.h</includedby>
    <invincdepgraph>
      <node id="5">
        <label>src/binary_helpers.c</label>
        <link refid="a00008"/>
      </node>
      <node id="11">
        <label>src/log.c</label>
        <link refid="a00026"/>
      </node>
      <node id="15">
        <label>src/session_file.c</label>
        <link refid="a00038"/>
      </node>
      <node id="18">
        <label>src/version.c</label>
        <link refid="a00047"/>
      </node>
      <node id="10">
        <label>src/hwdriver.c</label>
        <link refid="a00023"/>
      </node>
      <node id="21">
        <label>src/transform/transform.c</label>
        <link refid="a00065"/>
      </node>
      <node id="17">
        <label>src/trigger.c</label>
        <link refid="a00044"/>
      </node>
      <node id="14">
        <label>src/session.c</label>
        <link refid="a00035"/>
      </node>
      <node id="16">
        <label>src/strutil.c</label>
        <link refid="a00041"/>
      </node>
      <node id="19">
        <label>src/input/input.c</label>
        <link refid="a00059"/>
      </node>
      <node id="2">
        <label>include/libsigrok/libsigrok.h</label>
        <link refid="a00050"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
      </node>
      <node id="7">
        <label>src/crc.c</label>
        <link refid="a00014"/>
      </node>
      <node id="6">
        <label>src/conversion.c</label>
        <link refid="a00011"/>
      </node>
      <node id="3">
        <label>src/analog.c</label>
        <link refid="a00002"/>
      </node>
      <node id="12">
        <label>src/resource.c</label>
        <link refid="a00029"/>
      </node>
      <node id="13">
        <label>src/serial.c</label>
        <link refid="a00032"/>
      </node>
      <node id="20">
        <label>src/output/output.c</label>
        <link refid="a00062"/>
      </node>
      <node id="4">
        <label>src/backend.c</label>
        <link refid="a00005"/>
      </node>
      <node id="1">
        <label>include/libsigrok/proto.h</label>
        <link refid="a00053"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="9">
        <label>src/error.c</label>
        <link refid="a00020"/>
      </node>
      <node id="8">
        <label>src/device.c</label>
        <link refid="a00017"/>
      </node>
    </invincdepgraph>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="a00053_1a89f99efa4192e3bf48461c3bf178241b" prot="public" static="no">
        <type>int(*</type>
        <definition>typedef int(* sr_log_callback) (void *cb_data, int loglevel, const char *format, va_list args)</definition>
        <argsstring>)(void *cb_data, int loglevel, const char *format, va_list args)</argsstring>
        <name>sr_log_callback</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/libsigrok/proto.h" line="63" column="9" bodyfile="include/libsigrok/proto.h" bodystart="63" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="a00053_1a5a47dcc64d187d380133c1986fce7bfd" prot="public" static="no">
        <type>void(*</type>
        <definition>typedef void(* sr_session_stopped_callback) (void *data)</definition>
        <argsstring>)(void *data)</argsstring>
        <name>sr_session_stopped_callback</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/libsigrok/proto.h" line="125" column="9" bodyfile="include/libsigrok/proto.h" bodystart="125" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="a00053_1abe3dfadc282fa9e0cc1479a27feec66b" prot="public" static="no">
        <type>void(*</type>
        <definition>typedef void(* sr_datafeed_callback) (const struct sr_dev_inst *sdi, const struct sr_datafeed_packet *packet, void *cb_data)</definition>
        <argsstring>)(const struct sr_dev_inst *sdi, const struct sr_datafeed_packet *packet, void *cb_data)</argsstring>
        <name>sr_datafeed_callback</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/libsigrok/proto.h" line="126" column="9" bodyfile="include/libsigrok/proto.h" bodystart="126" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="a00053_1a752a7d3375e2685e90893b1089d63972" prot="public" static="no">
        <type>int(*</type>
        <definition>typedef int(* sr_resource_open_callback) (struct sr_resource *res, const char *name, void *cb_data)</definition>
        <argsstring>)(struct sr_resource *res, const char *name, void *cb_data)</argsstring>
        <name>sr_resource_open_callback</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/libsigrok/proto.h" line="231" column="9" bodyfile="include/libsigrok/proto.h" bodystart="231" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="a00053_1a51a8a2ac69656aabe68b54dab38288af" prot="public" static="no">
        <type>int(*</type>
        <definition>typedef int(* sr_resource_close_callback) (struct sr_resource *res, void *cb_data)</definition>
        <argsstring>)(struct sr_resource *res, void *cb_data)</argsstring>
        <name>sr_resource_close_callback</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/libsigrok/proto.h" line="233" column="9" bodyfile="include/libsigrok/proto.h" bodystart="233" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="a00053_1aa98b4fba926e47164a1701658efe2550" prot="public" static="no">
        <type>gssize(*</type>
        <definition>typedef gssize(* sr_resource_read_callback) (const struct sr_resource *res, void *buf, size_t count, void *cb_data)</definition>
        <argsstring>)(const struct sr_resource *res, void *buf, size_t count, void *cb_data)</argsstring>
        <name>sr_resource_read_callback</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/libsigrok/proto.h" line="235" column="9" bodyfile="include/libsigrok/proto.h" bodystart="235" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="a00069_1ga7c692bc1d32dc9b126cd0d6bbf21f2bd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int sr_analog_to_float</definition>
        <argsstring>(const struct sr_datafeed_analog *analog, float *buf)</argsstring>
        <name>sr_analog_to_float</name>
        <param>
          <type>const struct <ref refid="a00138" kindref="compound">sr_datafeed_analog</ref> *</type>
          <declname>analog</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>buf</declname>
          <defname>outbuf</defname>
        </param>
        <briefdescription>
<para>Convert an analog datafeed payload to an array of floats. </para>
        </briefdescription>
        <detaileddescription>
<para>The caller must provide the #outbuf space for the conversion result, and is expected to free allocated space after use.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">analog</parametername>
</parameternamelist>
<parameterdescription>
<para>The analog payload to convert. Must not be NULL. analog-&gt;data, analog-&gt;meaning, and analog-&gt;encoding must not be NULL. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">outbuf</parametername>
</parameternamelist>
<parameterdescription>
<para>Memory where to store the result. Must not be NULL.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>SR_OK</parametername>
</parameternamelist>
<parameterdescription>
<para>Success. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>SR_ERR</parametername>
</parameternamelist>
<parameterdescription>
<para>Unsupported encoding. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>SR_ERR_ARG</parametername>
</parameternamelist>
<parameterdescription>
<para>Invalid argument.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>0.4.0 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/libsigrok/proto.h" line="31" column="6" bodyfile="src/analog.c" bodystart="177" bodyend="379" declfile="include/libsigrok/proto.h" declline="31" declcolumn="6"/>
        <references refid="a00146_1aa94e9989cfd57941a7867daa98076498" compoundref="a00050" startline="545">sr_analog_meaning::channels</references>
        <references refid="a00138_1a5c4aca13deba4509ec718b04f825fe10" compoundref="a00050" startline="518">sr_datafeed_analog::data</references>
        <references refid="a00138_1ad570779bcec5a0800815112655031fd5" compoundref="a00050" startline="520">sr_datafeed_analog::encoding</references>
        <references refid="a00142_1a353bda910ac93467e21a50b43dbdf516" compoundref="a00050" startline="529">sr_analog_encoding::is_bigendian</references>
        <references refid="a00142_1a17214e15d937f4772717f8b7264376a6" compoundref="a00050" startline="528">sr_analog_encoding::is_float</references>
        <references refid="a00142_1a0dad760e9db99e0a2d2752048c571df1" compoundref="a00050" startline="527">sr_analog_encoding::is_signed</references>
        <references refid="a00138_1a9e97bc2f38a677065f11d7ec4ade7644" compoundref="a00050" startline="521">sr_datafeed_analog::meaning</references>
        <references refid="a00138_1abdc9b88c81408149c899a659e5010ece" compoundref="a00050" startline="519">sr_datafeed_analog::num_samples</references>
        <references refid="a00142_1a9b9c1ca6430afe229022f34302aee963" compoundref="a00050" startline="538">sr_analog_encoding::offset</references>
        <references refid="a00118_1a4aaae7eaf8b4be92c17c5158b431ca59" compoundref="a00050" startline="487">sr_rational::p</references>
        <references refid="a00118_1aea760e51129f529a28b91d5ba757678c" compoundref="a00050" startline="489">sr_rational::q</references>
        <references refid="a00142_1af89e406a513d86adba6cfc3f92dc7310" compoundref="a00050" startline="537">sr_analog_encoding::scale</references>
        <references refid="a00050_1af94f33f23c5855e3e429bd2ca01e3b95a132553bf1f479756d2590f9fd40bb289" compoundref="a00050" startline="68">SR_ERR</references>
        <references refid="a00050_1af94f33f23c5855e3e429bd2ca01e3b95a214df8baf519bba79a1b48d364be3f20" compoundref="a00050" startline="70">SR_ERR_ARG</references>
        <references refid="a00050_1af94f33f23c5855e3e429bd2ca01e3b95aa35b06e07345c41f0102c255c9cd0bf1" compoundref="a00050" startline="67">SR_OK</references>
        <references refid="a00142_1a3dd833a3bd6be6fa415f775a2d9afacb" compoundref="a00050" startline="526">sr_analog_encoding::unitsize</references>
        <referencedby refid="a00011_1abae077d85c8390eff878bf7d096d929a" compoundref="a00011" startline="81" endline="109">sr_a2l_schmitt_trigger</referencedby>
        <referencedby refid="a00011_1a3f168ba982a19fb0e51254d5852e6572" compoundref="a00011" startline="44" endline="65">sr_a2l_threshold</referencedby>
      </memberdef>
      <memberdef kind="function" id="a00069_1gad4605e40840772ded016b36e5ce938d6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const char *</type>
        <definition>const char* sr_analog_si_prefix</definition>
        <argsstring>(float *value, int *digits)</argsstring>
        <name>sr_analog_si_prefix</name>
        <param>
          <type>float *</type>
          <declname>value</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>digits</declname>
        </param>
        <briefdescription>
<para>Scale a float value to the appropriate SI prefix. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="inout">value</parametername>
</parameternamelist>
<parameterdescription>
<para>The float value to convert to appropriate SI prefix. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="inout">digits</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of significant decimal digits in value.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The SI prefix to which value was scaled, as a printable string.</para>
</simplesect>
<simplesect kind="since"><para>0.5.0 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/libsigrok/proto.h" line="33" column="13" bodyfile="src/analog.c" bodystart="391" bodyend="416" declfile="include/libsigrok/proto.h" declline="33" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="a00069_1gaae286256e4f6420bbb1d426e23015479" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>gboolean</type>
        <definition>gboolean sr_analog_si_prefix_friendly</definition>
        <argsstring>(enum sr_unit unit)</argsstring>
        <name>sr_analog_si_prefix_friendly</name>
        <param>
          <type>enum <ref refid="a00050_1af13f9a5c3de811f4e120314aa8eb964c" kindref="member">sr_unit</ref></type>
          <declname>unit</declname>
        </param>
        <briefdescription>
<para>Check if a unit &quot;accepts&quot; an SI prefix. </para>
        </briefdescription>
        <detaileddescription>
<para>E.g. SR_UNIT_VOLT is SI prefix friendly while SR_UNIT_DECIBEL_MW or SR_UNIT_PERCENTAGE are not.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">unit</parametername>
</parameternamelist>
<parameterdescription>
<para>The unit to check for SI prefix &quot;friendliness&quot;.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>TRUE if the unit &quot;accept&quot; an SI prefix.</para>
</simplesect>
<simplesect kind="since"><para>0.5.0 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/libsigrok/proto.h" line="34" column="11" bodyfile="src/analog.c" bodystart="430" bodyend="455" declfile="include/libsigrok/proto.h" declline="34" declcolumn="11"/>
        <references refid="a00050_1af13f9a5c3de811f4e120314aa8eb964cae9301ccd6318bde7c36ffa4d94914ec4" compoundref="a00050" startline="256">SR_UNIT_AMPERE</references>
        <references refid="a00050_1af13f9a5c3de811f4e120314aa8eb964ca90c56ae287735913c59bf21916126b2d" compoundref="a00050" startline="260">SR_UNIT_FARAD</references>
        <references refid="a00050_1af13f9a5c3de811f4e120314aa8eb964ca7dd7d5ba7533d6ccf095876e8f50d3ba" compoundref="a00050" startline="317">SR_UNIT_GRAM</references>
        <references refid="a00050_1af13f9a5c3de811f4e120314aa8eb964ca34762c3c913b90c20aa1960c43fcd181" compoundref="a00050" startline="315">SR_UNIT_HENRY</references>
        <references refid="a00050_1af13f9a5c3de811f4e120314aa8eb964ca219fc1840c3d80a5082dee7e557845ef" compoundref="a00050" startline="268">SR_UNIT_HERTZ</references>
        <references refid="a00050_1af13f9a5c3de811f4e120314aa8eb964ca26a2a73753bf99869ce2dde298eb27dd" compoundref="a00050" startline="262">SR_UNIT_KELVIN</references>
        <references refid="a00050_1af13f9a5c3de811f4e120314aa8eb964ca216477cfd2f4473555293e4b118c2f02" compoundref="a00050" startline="307">SR_UNIT_METER_SECOND</references>
        <references refid="a00050_1af13f9a5c3de811f4e120314aa8eb964ca03bacbe7d892ac232c9aa4ea17d0ef58" compoundref="a00050" startline="258">SR_UNIT_OHM</references>
        <references refid="a00050_1af13f9a5c3de811f4e120314aa8eb964ca5192db7b7eff5186277a8435d3bc9f33" compoundref="a00050" startline="274">SR_UNIT_SECOND</references>
        <references refid="a00050_1af13f9a5c3de811f4e120314aa8eb964cad9b588a2d89343c4fcb59cb5aad5fea3" compoundref="a00050" startline="276">SR_UNIT_SIEMENS</references>
        <references refid="a00050_1af13f9a5c3de811f4e120314aa8eb964ca23f7eb1b23df6a5bc11850ebaf4d671a" compoundref="a00050" startline="254">SR_UNIT_VOLT</references>
        <references refid="a00050_1af13f9a5c3de811f4e120314aa8eb964ca16455f01bfbe466b05ea7897c3fa2394" compoundref="a00050" startline="301">SR_UNIT_VOLT_AMPERE</references>
        <references refid="a00050_1af13f9a5c3de811f4e120314aa8eb964ca583f457f52ab39dde0e1b04a6c6af885" compoundref="a00050" startline="303">SR_UNIT_WATT</references>
        <references refid="a00050_1af13f9a5c3de811f4e120314aa8eb964ca3c7ccdbbeba16e2d1e990307ea76fff8" compoundref="a00050" startline="305">SR_UNIT_WATT_HOUR</references>
      </memberdef>
      <memberdef kind="function" id="a00069_1ga849fde6f4ed4c75d12b7358cabe5a65d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int sr_analog_unit_to_string</definition>
        <argsstring>(const struct sr_datafeed_analog *analog, char **result)</argsstring>
        <name>sr_analog_unit_to_string</name>
        <param>
          <type>const struct <ref refid="a00138" kindref="compound">sr_datafeed_analog</ref> *</type>
          <declname>analog</declname>
        </param>
        <param>
          <type>char **</type>
          <declname>result</declname>
        </param>
        <briefdescription>
<para>Convert the unit/MQ/MQ flags in the analog struct to a string. </para>
        </briefdescription>
        <detaileddescription>
<para>The string is allocated by the function and must be freed by the caller after use by calling g_free().</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">analog</parametername>
</parameternamelist>
<parameterdescription>
<para>Struct containing the unit, MQ and MQ flags. Must not be NULL. analog-&gt;meaning must not be NULL. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">result</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to store result. Must not be NULL.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>SR_OK</parametername>
</parameternamelist>
<parameterdescription>
<para>Success. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>SR_ERR_ARG</parametername>
</parameternamelist>
<parameterdescription>
<para>Invalid argument.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>0.4.0 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/libsigrok/proto.h" line="35" column="6" bodyfile="src/analog.c" bodystart="472" bodyend="499" declfile="include/libsigrok/proto.h" declline="35" declcolumn="6"/>
        <references refid="a00138_1a9e97bc2f38a677065f11d7ec4ade7644" compoundref="a00050" startline="521">sr_datafeed_analog::meaning</references>
        <references refid="a00050_1af94f33f23c5855e3e429bd2ca01e3b95a214df8baf519bba79a1b48d364be3f20" compoundref="a00050" startline="70">SR_ERR_ARG</references>
      </memberdef>
      <memberdef kind="function" id="a00069_1ga1c1b8581323f334e9580b9a36d5a52fd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void sr_rational_set</definition>
        <argsstring>(struct sr_rational *r, int64_t p, uint64_t q)</argsstring>
        <name>sr_rational_set</name>
        <param>
          <type>struct <ref refid="a00118" kindref="compound">sr_rational</ref> *</type>
          <declname>r</declname>
        </param>
        <param>
          <type>int64_t</type>
          <declname>p</declname>
        </param>
        <param>
          <type>uint64_t</type>
          <declname>q</declname>
        </param>
        <briefdescription>
<para>Set <ref refid="a00118" kindref="compound">sr_rational</ref> r to the given value. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="out">r</parametername>
</parameternamelist>
<parameterdescription>
<para>Rational number struct to set. Must not be NULL. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">p</parametername>
</parameternamelist>
<parameterdescription>
<para>Numerator. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">q</parametername>
</parameternamelist>
<parameterdescription>
<para>Denominator.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>0.4.0 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/libsigrok/proto.h" line="37" column="7" bodyfile="src/analog.c" bodystart="510" bodyend="517" declfile="include/libsigrok/proto.h" declline="37" declcolumn="7"/>
        <references refid="a00118_1a4aaae7eaf8b4be92c17c5158b431ca59" compoundref="a00050" startline="487">sr_rational::p</references>
        <references refid="a00118_1aea760e51129f529a28b91d5ba757678c" compoundref="a00050" startline="489">sr_rational::q</references>
      </memberdef>
      <memberdef kind="function" id="a00069_1gaf5f21f8d1f341bb0593316610668d973" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int sr_rational_eq</definition>
        <argsstring>(const struct sr_rational *a, const struct sr_rational *b)</argsstring>
        <name>sr_rational_eq</name>
        <param>
          <type>const struct <ref refid="a00118" kindref="compound">sr_rational</ref> *</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const struct <ref refid="a00118" kindref="compound">sr_rational</ref> *</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>Compare two <ref refid="a00118" kindref="compound">sr_rational</ref> for equality. </para>
        </briefdescription>
        <detaileddescription>
<para>The values are compared for numerical equality, i.e. 2/10 == 1/5.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">a</parametername>
</parameternamelist>
<parameterdescription>
<para>First value. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">b</parametername>
</parameternamelist>
<parameterdescription>
<para>Second value.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>1</parametername>
</parameternamelist>
<parameterdescription>
<para>if both values are equal. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>Otherwise.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>0.5.0 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/libsigrok/proto.h" line="38" column="6" bodyfile="src/analog.c" bodystart="577" bodyend="596" declfile="include/libsigrok/proto.h" declline="38" declcolumn="6"/>
        <references refid="a00118_1a4aaae7eaf8b4be92c17c5158b431ca59" compoundref="a00050" startline="487">sr_rational::p</references>
        <references refid="a00118_1aea760e51129f529a28b91d5ba757678c" compoundref="a00050" startline="489">sr_rational::q</references>
      </memberdef>
      <memberdef kind="function" id="a00069_1ga7ee05b9bac44087e25a0708da9c0359f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int sr_rational_mult</definition>
        <argsstring>(struct sr_rational *res, const struct sr_rational *a, const struct sr_rational *b)</argsstring>
        <name>sr_rational_mult</name>
        <param>
          <type>struct <ref refid="a00118" kindref="compound">sr_rational</ref> *</type>
          <declname>res</declname>
        </param>
        <param>
          <type>const struct <ref refid="a00118" kindref="compound">sr_rational</ref> *</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const struct <ref refid="a00118" kindref="compound">sr_rational</ref> *</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>Multiply two <ref refid="a00118" kindref="compound">sr_rational</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para>The resulting nominator/denominator are reduced if the result would not fit otherwise. If the resulting nominator/denominator are relatively prime, this may not be possible.</para>
<para>It is safe to use the same variable for result and input values.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">a</parametername>
</parameternamelist>
<parameterdescription>
<para>First value. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">b</parametername>
</parameternamelist>
<parameterdescription>
<para>Second value. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">res</parametername>
</parameternamelist>
<parameterdescription>
<para>Result.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>SR_OK</parametername>
</parameternamelist>
<parameterdescription>
<para>Success. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>SR_ERR_ARG</parametername>
</parameternamelist>
<parameterdescription>
<para>Resulting value too large.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>0.5.0 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/libsigrok/proto.h" line="39" column="6" bodyfile="src/analog.c" bodystart="616" bodyend="673" declfile="include/libsigrok/proto.h" declline="39" declcolumn="6"/>
        <references refid="a00118_1a4aaae7eaf8b4be92c17c5158b431ca59" compoundref="a00050" startline="487">sr_rational::p</references>
        <references refid="a00118_1aea760e51129f529a28b91d5ba757678c" compoundref="a00050" startline="489">sr_rational::q</references>
        <references refid="a00050_1af94f33f23c5855e3e429bd2ca01e3b95a214df8baf519bba79a1b48d364be3f20" compoundref="a00050" startline="70">SR_ERR_ARG</references>
        <references refid="a00050_1af94f33f23c5855e3e429bd2ca01e3b95aa35b06e07345c41f0102c255c9cd0bf1" compoundref="a00050" startline="67">SR_OK</references>
        <referencedby refid="a00069_1ga1b073bd224cb636ad043442cc8ad0c29" compoundref="a00002" startline="694" endline="713">sr_rational_div</referencedby>
      </memberdef>
      <memberdef kind="function" id="a00069_1ga1b073bd224cb636ad043442cc8ad0c29" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int sr_rational_div</definition>
        <argsstring>(struct sr_rational *res, const struct sr_rational *num, const struct sr_rational *div)</argsstring>
        <name>sr_rational_div</name>
        <param>
          <type>struct <ref refid="a00118" kindref="compound">sr_rational</ref> *</type>
          <declname>res</declname>
        </param>
        <param>
          <type>const struct <ref refid="a00118" kindref="compound">sr_rational</ref> *</type>
          <declname>num</declname>
        </param>
        <param>
          <type>const struct <ref refid="a00118" kindref="compound">sr_rational</ref> *</type>
          <declname>div</declname>
        </param>
        <briefdescription>
<para>Divide rational a by rational b. </para>
        </briefdescription>
        <detaileddescription>
<para>The resulting nominator/denominator are reduced if the result would not fit otherwise. If the resulting nominator/denominator are relatively prime, this may not be possible.</para>
<para>It is safe to use the same variable for result and input values.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">num</parametername>
</parameternamelist>
<parameterdescription>
<para>Numerator. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">div</parametername>
</parameternamelist>
<parameterdescription>
<para>Divisor. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">res</parametername>
</parameternamelist>
<parameterdescription>
<para>Result.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>SR_OK</parametername>
</parameternamelist>
<parameterdescription>
<para>Success. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>SR_ERR_ARG</parametername>
</parameternamelist>
<parameterdescription>
<para>Division by zero, denominator of divisor too large, or resulting value too large.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>0.5.0 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/libsigrok/proto.h" line="41" column="6" bodyfile="src/analog.c" bodystart="694" bodyend="713" declfile="include/libsigrok/proto.h" declline="41" declcolumn="6"/>
        <references refid="a00118_1a4aaae7eaf8b4be92c17c5158b431ca59" compoundref="a00050" startline="487">sr_rational::p</references>
        <references refid="a00118_1aea760e51129f529a28b91d5ba757678c" compoundref="a00050" startline="489">sr_rational::q</references>
        <references refid="a00050_1af94f33f23c5855e3e429bd2ca01e3b95a214df8baf519bba79a1b48d364be3f20" compoundref="a00050" startline="70">SR_ERR_ARG</references>
        <references refid="a00069_1ga7ee05b9bac44087e25a0708da9c0359f" compoundref="a00002" startline="616" endline="673">sr_rational_mult</references>
      </memberdef>
      <memberdef kind="function" id="a00070_1ga6210982b018100246093873faf07a667" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int sr_init</definition>
        <argsstring>(struct sr_context **ctx)</argsstring>
        <name>sr_init</name>
        <param>
          <type>struct <ref refid="a00186" kindref="compound">sr_context</ref> **</type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
<para>Initialize libsigrok. </para>
        </briefdescription>
        <detaileddescription>
<para>This function must be called before any other libsigrok function.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to a libsigrok context struct pointer. Must not be NULL. This will be a pointer to a newly allocated libsigrok context object upon success, and is undefined upon errors.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>SR_OK upon success, a (negative) error code otherwise. Upon errors the &apos;ctx&apos; pointer is undefined and should not be used. Upon success, the context will be free&apos;d by <ref refid="a00070_1ga94b41cf5bc8ccafad9fe4c1bd6d2cc41" kindref="member">sr_exit()</ref> as part of the libsigrok shutdown.</para>
</simplesect>
<simplesect kind="since"><para>0.2.0 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/libsigrok/proto.h" line="46" column="6" bodyfile="src/backend.c" bodystart="548" bodyend="628" declfile="include/libsigrok/proto.h" declline="46" declcolumn="6"/>
        <references refid="a00050_1af94f33f23c5855e3e429bd2ca01e3b95a132553bf1f479756d2590f9fd40bb289" compoundref="a00050" startline="68">SR_ERR</references>
      </memberdef>
      <memberdef kind="function" id="a00070_1ga94b41cf5bc8ccafad9fe4c1bd6d2cc41" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int sr_exit</definition>
        <argsstring>(struct sr_context *ctx)</argsstring>
        <name>sr_exit</name>
        <param>
          <type>struct <ref refid="a00186" kindref="compound">sr_context</ref> *</type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
<para>Shutdown libsigrok. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to a libsigrok context struct. Must not be NULL.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>SR_OK</parametername>
</parameternamelist>
<parameterdescription>
<para>Success </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>other</parametername>
</parameternamelist>
<parameterdescription>
<para>Error code SR_ERR, ...</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>0.2.0 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/libsigrok/proto.h" line="47" column="6" bodyfile="src/backend.c" bodystart="640" bodyend="664" declfile="include/libsigrok/proto.h" declline="47" declcolumn="6"/>
        <references refid="a00050_1af94f33f23c5855e3e429bd2ca01e3b95a132553bf1f479756d2590f9fd40bb289" compoundref="a00050" startline="68">SR_ERR</references>
      </memberdef>
      <memberdef kind="function" id="a00070_1ga6e5a750e64152a317a65dc4ced212ca3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GSList *</type>
        <definition>GSList* sr_buildinfo_libs_get</definition>
        <argsstring>(void)</argsstring>
        <name>sr_buildinfo_libs_get</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/libsigrok/proto.h" line="49" column="9" bodyfile="src/backend.c" bodystart="125" bodyend="194" declfile="include/libsigrok/proto.h" declline="49" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="a00070_1ga503329dffe42e5646c0441d8199ebcb4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>char *</type>
        <definition>char* sr_buildinfo_host_get</definition>
        <argsstring>(void)</argsstring>
        <name>sr_buildinfo_host_get</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/libsigrok/proto.h" line="50" column="7" bodyfile="src/backend.c" bodystart="196" bodyend="205" declfile="include/libsigrok/proto.h" declline="50" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="a00070_1gadb7312d59de7a1467c0c7195e3012af4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>char *</type>
        <definition>char* sr_buildinfo_scpi_backends_get</definition>
        <argsstring>(void)</argsstring>
        <name>sr_buildinfo_scpi_backends_get</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/libsigrok/proto.h" line="51" column="7" bodyfile="src/backend.c" bodystart="207" bodyend="236" declfile="include/libsigrok/proto.h" declline="51" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="a00053_1a3f168ba982a19fb0e51254d5852e6572" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int sr_a2l_threshold</definition>
        <argsstring>(const struct sr_datafeed_analog *analog, float threshold, uint8_t *output, uint64_t count)</argsstring>
        <name>sr_a2l_threshold</name>
        <param>
          <type>const struct <ref refid="a00138" kindref="compound">sr_datafeed_analog</ref> *</type>
          <declname>analog</declname>
        </param>
        <param>
          <type>float</type>
          <declname>threshold</declname>
        </param>
        <param>
          <type>uint8_t *</type>
          <declname>output</declname>
        </param>
        <param>
          <type>uint64_t</type>
          <declname>count</declname>
        </param>
        <briefdescription>
<para>Convert analog values to logic values by using a fixed threshold. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">analog</parametername>
</parameternamelist>
<parameterdescription>
<para>The analog input values. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">threshold</parametername>
</parameternamelist>
<parameterdescription>
<para>The threshold to use. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">output</parametername>
</parameternamelist>
<parameterdescription>
<para>The converted output values; either 0 or 1. Must provide space for count bytes. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">count</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of samples to process.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>SR_OK on success or SR_ERR on failure. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/libsigrok/proto.h" line="55" column="6" bodyfile="src/conversion.c" bodystart="44" bodyend="65" declfile="include/libsigrok/proto.h" declline="55" declcolumn="6"/>
        <references refid="a00138_1a5c4aca13deba4509ec718b04f825fe10" compoundref="a00050" startline="518">sr_datafeed_analog::data</references>
        <references refid="a00138_1ad570779bcec5a0800815112655031fd5" compoundref="a00050" startline="520">sr_datafeed_analog::encoding</references>
        <references refid="a00142_1a17214e15d937f4772717f8b7264376a6" compoundref="a00050" startline="528">sr_analog_encoding::is_float</references>
        <references refid="a00069_1ga7c692bc1d32dc9b126cd0d6bbf21f2bd" compoundref="a00002" startline="177" endline="379">sr_analog_to_float</references>
        <references refid="a00050_1af94f33f23c5855e3e429bd2ca01e3b95a132553bf1f479756d2590f9fd40bb289" compoundref="a00050" startline="68">SR_ERR</references>
        <references refid="a00050_1af94f33f23c5855e3e429bd2ca01e3b95aa35b06e07345c41f0102c255c9cd0bf1" compoundref="a00050" startline="67">SR_OK</references>
      </memberdef>
      <memberdef kind="function" id="a00053_1abae077d85c8390eff878bf7d096d929a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int sr_a2l_schmitt_trigger</definition>
        <argsstring>(const struct sr_datafeed_analog *analog, float lo_thr, float hi_thr, uint8_t *state, uint8_t *output, uint64_t count)</argsstring>
        <name>sr_a2l_schmitt_trigger</name>
        <param>
          <type>const struct <ref refid="a00138" kindref="compound">sr_datafeed_analog</ref> *</type>
          <declname>analog</declname>
        </param>
        <param>
          <type>float</type>
          <declname>lo_thr</declname>
        </param>
        <param>
          <type>float</type>
          <declname>hi_thr</declname>
        </param>
        <param>
          <type>uint8_t *</type>
          <declname>state</declname>
        </param>
        <param>
          <type>uint8_t *</type>
          <declname>output</declname>
        </param>
        <param>
          <type>uint64_t</type>
          <declname>count</declname>
        </param>
        <briefdescription>
<para>Convert analog values to logic values by using a Schmitt-trigger algorithm. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>analog</parametername>
</parameternamelist>
<parameterdescription>
<para>The analog input values. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>lo_thr</parametername>
</parameternamelist>
<parameterdescription>
<para>The low threshold - result becomes 0 below it. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>hi_thr</parametername>
</parameternamelist>
<parameterdescription>
<para>The high threshold - result becomes 1 above it. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>state</parametername>
</parameternamelist>
<parameterdescription>
<para>The internal converter state. Must contain the state of logic sample n-1, will contain the state of logic sample n+count upon exit. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>output</parametername>
</parameternamelist>
<parameterdescription>
<para>The converted output values; either 0 or 1. Must provide space for count bytes. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>count</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of samples to process.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>SR_OK on success or SR_ERR on failure. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/libsigrok/proto.h" line="57" column="6" bodyfile="src/conversion.c" bodystart="81" bodyend="109" declfile="include/libsigrok/proto.h" declline="57" declcolumn="6"/>
        <references refid="a00138_1a5c4aca13deba4509ec718b04f825fe10" compoundref="a00050" startline="518">sr_datafeed_analog::data</references>
        <references refid="a00138_1ad570779bcec5a0800815112655031fd5" compoundref="a00050" startline="520">sr_datafeed_analog::encoding</references>
        <references refid="a00142_1a17214e15d937f4772717f8b7264376a6" compoundref="a00050" startline="528">sr_analog_encoding::is_float</references>
        <references refid="a00069_1ga7c692bc1d32dc9b126cd0d6bbf21f2bd" compoundref="a00002" startline="177" endline="379">sr_analog_to_float</references>
        <references refid="a00050_1af94f33f23c5855e3e429bd2ca01e3b95a132553bf1f479756d2590f9fd40bb289" compoundref="a00050" startline="68">SR_ERR</references>
        <references refid="a00050_1af94f33f23c5855e3e429bd2ca01e3b95aa35b06e07345c41f0102c255c9cd0bf1" compoundref="a00050" startline="67">SR_OK</references>
      </memberdef>
      <memberdef kind="function" id="a00074_1ga2eff466cec6a339d9a147eac65b74a97" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int sr_log_loglevel_set</definition>
        <argsstring>(int loglevel)</argsstring>
        <name>sr_log_loglevel_set</name>
        <param>
          <type>int</type>
          <declname>loglevel</declname>
        </param>
        <briefdescription>
<para>Set the libsigrok loglevel. </para>
        </briefdescription>
        <detaileddescription>
<para>This influences the amount of log messages (debug messages, error messages, and so on) libsigrok will output. Using SR_LOG_NONE disables all messages.</para>
<para>Note that this function itself will also output log messages. After the loglevel has changed, it will output a debug message with SR_LOG_DBG for example. Whether this message is shown depends on the (new) loglevel.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>loglevel</parametername>
</parameternamelist>
<parameterdescription>
<para>The loglevel to set (SR_LOG_NONE, SR_LOG_ERR, SR_LOG_WARN, SR_LOG_INFO, SR_LOG_DBG, or SR_LOG_SPEW).</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>SR_OK upon success, SR_ERR_ARG upon invalid loglevel.</para>
</simplesect>
<simplesect kind="since"><para>0.1.0 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/libsigrok/proto.h" line="66" column="6" bodyfile="src/log.c" bodystart="83" bodyend="98" declfile="include/libsigrok/proto.h" declline="66" declcolumn="6"/>
        <references refid="a00050_1af94f33f23c5855e3e429bd2ca01e3b95a214df8baf519bba79a1b48d364be3f20" compoundref="a00050" startline="70">SR_ERR_ARG</references>
        <references refid="a00050_1acaffaae3814c9ca4febd6490521645c9a6d4887faf76794cb103dc13a01a41eff" compoundref="a00050" startline="107">SR_LOG_SPEW</references>
      </memberdef>
      <memberdef kind="function" id="a00074_1ga5039ee00076e2deead00f8c14d9063fe" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int sr_log_loglevel_get</definition>
        <argsstring>(void)</argsstring>
        <name>sr_log_loglevel_get</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Get the libsigrok loglevel. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The currently configured libsigrok loglevel.</para>
</simplesect>
<simplesect kind="since"><para>0.1.0 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/libsigrok/proto.h" line="67" column="6" bodyfile="src/log.c" bodystart="107" bodyend="110" declfile="include/libsigrok/proto.h" declline="67" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="a00074_1ga4240b8fe79be72ef758f40f9acbd4316" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int sr_log_callback_set</definition>
        <argsstring>(sr_log_callback cb, void *cb_data)</argsstring>
        <name>sr_log_callback_set</name>
        <param>
          <type><ref refid="a00053_1a89f99efa4192e3bf48461c3bf178241b" kindref="member">sr_log_callback</ref></type>
          <declname>cb</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>cb_data</declname>
        </param>
        <briefdescription>
<para>Set the libsigrok log callback to the specified function. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>cb</parametername>
</parameternamelist>
<parameterdescription>
<para>Function pointer to the log callback function to use. Must not be NULL. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cb_data</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to private data to be passed on. This can be used by the caller to pass arbitrary data to the log functions. This pointer is only stored or passed on by libsigrok, and is never used or interpreted in any way. The pointer is allowed to be NULL if the caller doesn&apos;t need/want to pass any data.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>SR_OK upon success, SR_ERR_ARG upon invalid arguments.</para>
</simplesect>
<simplesect kind="since"><para>0.3.0 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/libsigrok/proto.h" line="68" column="6" bodyfile="src/log.c" bodystart="127" bodyend="140" declfile="include/libsigrok/proto.h" declline="68" declcolumn="6"/>
        <references refid="a00050_1af94f33f23c5855e3e429bd2ca01e3b95a214df8baf519bba79a1b48d364be3f20" compoundref="a00050" startline="70">SR_ERR_ARG</references>
      </memberdef>
      <memberdef kind="function" id="a00074_1gae7758b06f7eab52af8cf07b90a01a216" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int sr_log_callback_set_default</definition>
        <argsstring>(void)</argsstring>
        <name>sr_log_callback_set_default</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Set the libsigrok log callback to the default built-in one. </para>
        </briefdescription>
        <detaileddescription>
<para>Additionally, the internal &apos;sr_log_cb_data&apos; pointer is set to NULL.</para>
<para><simplesect kind="return"><para>SR_OK upon success, a negative error code otherwise.</para>
</simplesect>
<simplesect kind="since"><para>0.1.0 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/libsigrok/proto.h" line="69" column="6" bodyfile="src/log.c" bodystart="151" bodyend="161" declfile="include/libsigrok/proto.h" declline="69" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="a00074_1gad554aa783e2453ecdeb2d50e4be231c9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int sr_log_callback_get</definition>
        <argsstring>(sr_log_callback *cb, void **cb_data)</argsstring>
        <name>sr_log_callback_get</name>
        <param>
          <type><ref refid="a00053_1a89f99efa4192e3bf48461c3bf178241b" kindref="member">sr_log_callback</ref> *</type>
          <declname>cb</declname>
        </param>
        <param>
          <type>void **</type>
          <declname>cb_data</declname>
        </param>
        <briefdescription>
<para>Get the libsigrok log callback routine and callback data. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="out">cb</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to a function pointer to receive the log callback function. Optional, can be NULL. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">cb_data</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to a void pointer to receive the log callback&apos;s additional arguments. Optional, can be NULL.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>SR_OK upon success.</para>
</simplesect>
<simplesect kind="since"><para>0.6.0 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/libsigrok/proto.h" line="70" column="6" bodyfile="src/log.c" bodystart="175" bodyend="183" declfile="include/libsigrok/proto.h" declline="70" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="a00071_1gabd4d8d0d8548c03bb55a6683a835a036" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int sr_dev_channel_name_set</definition>
        <argsstring>(struct sr_channel *channel, const char *name)</argsstring>
        <name>sr_dev_channel_name_set</name>
        <param>
          <type>struct <ref refid="a00162" kindref="compound">sr_channel</ref> *</type>
          <declname>channel</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <briefdescription>
<para>Set the name of the specified channel. </para>
        </briefdescription>
        <detaileddescription>
<para>If the channel already has a different name assigned to it, it will be removed, and the new name will be saved instead.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">channel</parametername>
</parameternamelist>
<parameterdescription>
<para>The channel whose name to set. Must not be NULL. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">name</parametername>
</parameternamelist>
<parameterdescription>
<para>The new name that the specified channel should get. A copy of the string is made.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>SR_OK on success, or SR_ERR_ARG on invalid arguments.</para>
</simplesect>
<simplesect kind="since"><para>0.3.0 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/libsigrok/proto.h" line="74" column="6" bodyfile="src/device.c" bodystart="118" bodyend="128" declfile="include/libsigrok/proto.h" declline="74" declcolumn="6"/>
        <references refid="a00162_1a84f0d94ca2d6aee33e01d6a2e8156e57" compoundref="a00050" startline="624">sr_channel::name</references>
        <references refid="a00050_1af94f33f23c5855e3e429bd2ca01e3b95a214df8baf519bba79a1b48d364be3f20" compoundref="a00050" startline="70">SR_ERR_ARG</references>
        <references refid="a00050_1af94f33f23c5855e3e429bd2ca01e3b95aa35b06e07345c41f0102c255c9cd0bf1" compoundref="a00050" startline="67">SR_OK</references>
      </memberdef>
      <memberdef kind="function" id="a00071_1ga01a44d3f7c1231b214940f363bbd5f1c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int sr_dev_channel_enable</definition>
        <argsstring>(struct sr_channel *channel, gboolean state)</argsstring>
        <name>sr_dev_channel_enable</name>
        <param>
          <type>struct <ref refid="a00162" kindref="compound">sr_channel</ref> *</type>
          <declname>channel</declname>
        </param>
        <param>
          <type>gboolean</type>
          <declname>state</declname>
        </param>
        <briefdescription>
<para>Enable or disable a channel. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">channel</parametername>
</parameternamelist>
<parameterdescription>
<para>The channel to enable or disable. Must not be NULL. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">state</parametername>
</parameternamelist>
<parameterdescription>
<para>TRUE to enable the channel, FALSE to disable.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>SR_OK on success or SR_ERR on failure. In case of invalid arguments, SR_ERR_ARG is returned and the channel enabled state remains unchanged.</para>
</simplesect>
<simplesect kind="since"><para>0.3.0 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/libsigrok/proto.h" line="76" column="6" bodyfile="src/device.c" bodystart="142" bodyend="164" declfile="include/libsigrok/proto.h" declline="76" declcolumn="6"/>
        <references refid="a00162_1a3ba1b7e09ac02f832d155b13439c0a44" compoundref="a00050" startline="622">sr_channel::enabled</references>
        <references refid="a00162_1a88c15932db28a3d45df9d11e44f7adcb" compoundref="a00050" startline="615">sr_channel::sdi</references>
        <references refid="a00050_1af94f33f23c5855e3e429bd2ca01e3b95a214df8baf519bba79a1b48d364be3f20" compoundref="a00050" startline="70">SR_ERR_ARG</references>
        <references refid="a00050_1af94f33f23c5855e3e429bd2ca01e3b95aa35b06e07345c41f0102c255c9cd0bf1" compoundref="a00050" startline="67">SR_OK</references>
      </memberdef>
      <memberdef kind="function" id="a00071_1ga8748df5e84b0785ccf26409e427f2375" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>gboolean</type>
        <definition>gboolean sr_dev_has_option</definition>
        <argsstring>(const struct sr_dev_inst *sdi, int key)</argsstring>
        <name>sr_dev_has_option</name>
        <param>
          <type>const struct sr_dev_inst *</type>
          <declname>sdi</declname>
        </param>
        <param>
          <type>int</type>
          <declname>key</declname>
        </param>
        <briefdescription>
<para>Determine whether the specified device instance has the specified capability. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>sdi</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the device instance to be checked. Must not be NULL. If the device&apos;s &apos;driver&apos; field is NULL (virtual device), this function will always return FALSE (virtual devices don&apos;t have a hardware capabilities list). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">key</parametername>
</parameternamelist>
<parameterdescription>
<para>The option that should be checked for is supported by the specified device.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>TRUE</parametername>
</parameternamelist>
<parameterdescription>
<para>Device has the specified option. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>FALSE</parametername>
</parameternamelist>
<parameterdescription>
<para>Device does not have the specified option, invalid input parameters or other error conditions.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>0.2.0 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/libsigrok/proto.h" line="78" column="11" bodyfile="src/device.c" bodystart="275" bodyend="300" declfile="include/libsigrok/proto.h" declline="78" declcolumn="11"/>
        <references refid="a00162_1a88c15932db28a3d45df9d11e44f7adcb" compoundref="a00050" startline="615">sr_channel::sdi</references>
        <references refid="a00050_1af94f33f23c5855e3e429bd2ca01e3b95aa35b06e07345c41f0102c255c9cd0bf1" compoundref="a00050" startline="67">SR_OK</references>
      </memberdef>
      <memberdef kind="function" id="a00071_1gaafd19fdb190135fee018781ad4f95bb8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int sr_dev_config_capabilities_list</definition>
        <argsstring>(const struct sr_dev_inst *sdi, const struct sr_channel_group *cg, int key)</argsstring>
        <name>sr_dev_config_capabilities_list</name>
        <param>
          <type>const struct sr_dev_inst *</type>
          <declname>sdi</declname>
        </param>
        <param>
          <type>const struct <ref refid="a00166" kindref="compound">sr_channel_group</ref> *</type>
          <declname>cg</declname>
        </param>
        <param>
          <type>int</type>
          <declname>key</declname>
        </param>
        <briefdescription>
<para>Enumerate the configuration capabilities supported by a device instance for a given configuration key. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>sdi</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the device instance to be checked. Must not be NULL. If the device&apos;s &apos;driver&apos; field is NULL (virtual device), this function will always return FALSE (virtual devices don&apos;t have a hardware capabilities list). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to a channel group, if a specific channel group is to be checked. Must be NULL to check device-wide options. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">key</parametername>
</parameternamelist>
<parameterdescription>
<para>The option that should be checked for is supported by the specified device.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>A</parametername>
</parameternamelist>
<parameterdescription>
<para>bitmask of enum sr_configcap values, which will be zero for invalid inputs or if the key is unsupported.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>0.4.0 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/libsigrok/proto.h" line="79" column="6" bodyfile="src/device.c" bodystart="367" bodyend="393" declfile="include/libsigrok/proto.h" declline="79" declcolumn="6"/>
        <references refid="a00162_1a88c15932db28a3d45df9d11e44f7adcb" compoundref="a00050" startline="615">sr_channel::sdi</references>
        <references refid="a00050_1af94f33f23c5855e3e429bd2ca01e3b95aa35b06e07345c41f0102c255c9cd0bf1" compoundref="a00050" startline="67">SR_OK</references>
      </memberdef>
      <memberdef kind="function" id="a00071_1ga26fee1c71ff0c486f93db5ee80c1e943" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GArray *</type>
        <definition>GArray* sr_dev_options</definition>
        <argsstring>(const struct sr_dev_driver *driver, const struct sr_dev_inst *sdi, const struct sr_channel_group *cg)</argsstring>
        <name>sr_dev_options</name>
        <param>
          <type>const struct <ref refid="a00178" kindref="compound">sr_dev_driver</ref> *</type>
          <declname>driver</declname>
        </param>
        <param>
          <type>const struct sr_dev_inst *</type>
          <declname>sdi</declname>
        </param>
        <param>
          <type>const struct <ref refid="a00166" kindref="compound">sr_channel_group</ref> *</type>
          <declname>cg</declname>
        </param>
        <briefdescription>
<para>Enumerate the configuration options of the specified item. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>driver</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the driver to be checked. Must not be NULL. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>sdi</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the device instance to be checked. May be NULL to check driver options. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to a channel group, if a specific channel group is to be checked. Must be NULL to check device-wide options.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A GArray * of enum sr_configkey values, or NULL on invalid arguments. The array must be freed by the caller using g_array_free().</para>
</simplesect>
<simplesect kind="since"><para>0.4.0 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/libsigrok/proto.h" line="81" column="9" bodyfile="src/device.c" bodystart="317" bodyend="347" declfile="include/libsigrok/proto.h" declline="81" declcolumn="9"/>
        <references refid="a00178_1add11215f64fb44c03ccd406ce42b5c5a" compoundref="a00050" startline="1242">sr_dev_driver::config_list</references>
        <references refid="a00162_1a88c15932db28a3d45df9d11e44f7adcb" compoundref="a00050" startline="615">sr_channel::sdi</references>
        <references refid="a00050_1af94f33f23c5855e3e429bd2ca01e3b95aa35b06e07345c41f0102c255c9cd0bf1" compoundref="a00050" startline="67">SR_OK</references>
      </memberdef>
      <memberdef kind="function" id="a00071_1gaf6973a5d7c159e588211a287d716aa26" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GSList *</type>
        <definition>GSList* sr_dev_list</definition>
        <argsstring>(const struct sr_dev_driver *driver)</argsstring>
        <name>sr_dev_list</name>
        <param>
          <type>const struct <ref refid="a00178" kindref="compound">sr_dev_driver</ref> *</type>
          <declname>driver</declname>
        </param>
        <briefdescription>
<para>Get the list of devices/instances of the specified driver. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>driver</parametername>
</parameternamelist>
<parameterdescription>
<para>The driver to use. Must not be NULL.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The list of devices/instances of this driver, or NULL upon errors or if the list is empty.</para>
</simplesect>
<simplesect kind="since"><para>0.2.0 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/libsigrok/proto.h" line="83" column="9" bodyfile="src/device.c" bodystart="609" bodyend="615" declfile="include/libsigrok/proto.h" declline="83" declcolumn="9"/>
        <references refid="a00178_1aa6b7607dae39a70d13534815317e1716" compoundref="a00050" startline="1218">sr_dev_driver::dev_list</references>
      </memberdef>
      <memberdef kind="function" id="a00071_1ga757ef4b2ca0d6be7098fa2b6f87e1995" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int sr_dev_clear</definition>
        <argsstring>(const struct sr_dev_driver *driver)</argsstring>
        <name>sr_dev_clear</name>
        <param>
          <type>const struct <ref refid="a00178" kindref="compound">sr_dev_driver</ref> *</type>
          <declname>driver</declname>
        </param>
        <briefdescription>
<para>Clear the list of device instances a driver knows about. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>driver</parametername>
</parameternamelist>
<parameterdescription>
<para>The driver to use. This must be a pointer to one of the entries returned by <ref refid="a00073_1ga755e937630acf9037eff1938233782c8" kindref="member">sr_driver_list()</ref>. Must not be NULL.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>SR_OK</parametername>
</parameternamelist>
<parameterdescription>
<para>Success. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>SR_ERR_ARG</parametername>
</parameternamelist>
<parameterdescription>
<para>Invalid driver.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>0.2.0 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/libsigrok/proto.h" line="84" column="6" bodyfile="src/device.c" bodystart="628" bodyend="648" declfile="include/libsigrok/proto.h" declline="84" declcolumn="6"/>
        <references refid="a00178_1a78504fc823d187e0f2f2646d9f20e883" compoundref="a00050" startline="1258">sr_dev_driver::context</references>
        <references refid="a00178_1a84cc44efef6af3904bb854f2437b5911" compoundref="a00050" startline="1220">sr_dev_driver::dev_clear</references>
        <references refid="a00050_1af94f33f23c5855e3e429bd2ca01e3b95a214df8baf519bba79a1b48d364be3f20" compoundref="a00050" startline="70">SR_ERR_ARG</references>
        <references refid="a00050_1af94f33f23c5855e3e429bd2ca01e3b95aa35b06e07345c41f0102c255c9cd0bf1" compoundref="a00050" startline="67">SR_OK</references>
      </memberdef>
      <memberdef kind="function" id="a00071_1gabb8d2f9296376e2223d1c23d04de5cf2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int sr_dev_open</definition>
        <argsstring>(struct sr_dev_inst *sdi)</argsstring>
        <name>sr_dev_open</name>
        <param>
          <type>struct sr_dev_inst *</type>
          <declname>sdi</declname>
        </param>
        <briefdescription>
<para>Open the specified device instance. </para>
        </briefdescription>
        <detaileddescription>
<para>If the device instance is already open (sdi-&gt;status == SR_ST_ACTIVE), SR_ERR will be returned and no re-opening of the device will be attempted.</para>
<para>If opening was successful, sdi-&gt;status is set to SR_ST_ACTIVE, otherwise it will be left unchanged.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>sdi</parametername>
</parameternamelist>
<parameterdescription>
<para>Device instance to use. Must not be NULL.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>SR_OK</parametername>
</parameternamelist>
<parameterdescription>
<para>Success. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>SR_ERR_ARG</parametername>
</parameternamelist>
<parameterdescription>
<para>Invalid arguments. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>SR_ERR</parametername>
</parameternamelist>
<parameterdescription>
<para>Device instance was already active, or other error.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>0.2.0 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/libsigrok/proto.h" line="85" column="6" bodyfile="src/device.c" bodystart="667" bodyend="688" declfile="include/libsigrok/proto.h" declline="85" declcolumn="6"/>
        <references refid="a00050_1af94f33f23c5855e3e429bd2ca01e3b95a132553bf1f479756d2590f9fd40bb289" compoundref="a00050" startline="68">SR_ERR</references>
        <references refid="a00050_1af94f33f23c5855e3e429bd2ca01e3b95a214df8baf519bba79a1b48d364be3f20" compoundref="a00050" startline="70">SR_ERR_ARG</references>
        <references refid="a00050_1af94f33f23c5855e3e429bd2ca01e3b95aa35b06e07345c41f0102c255c9cd0bf1" compoundref="a00050" startline="67">SR_OK</references>
        <references refid="a00050_1aeafac70caf348818c4ea8290137ff0e9a27b78acb86610b24607730033ab1eac7" compoundref="a00050" startline="1188">SR_ST_ACTIVE</references>
      </memberdef>
      <memberdef kind="function" id="a00071_1ga64973860ad236d001ee8f45d09b98372" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int sr_dev_close</definition>
        <argsstring>(struct sr_dev_inst *sdi)</argsstring>
        <name>sr_dev_close</name>
        <param>
          <type>struct sr_dev_inst *</type>
          <declname>sdi</declname>
        </param>
        <briefdescription>
<para>Close the specified device instance. </para>
        </briefdescription>
        <detaileddescription>
<para>If the device instance is not open (sdi-&gt;status != SR_ST_ACTIVE), SR_ERR_DEV_CLOSED will be returned and no closing will be attempted.</para>
<para>Note: sdi-&gt;status will be set to SR_ST_INACTIVE, regardless of whether there are any errors during closing of the device instance (any errors will be reported via error code and log message, though).</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>sdi</parametername>
</parameternamelist>
<parameterdescription>
<para>Device instance to use. Must not be NULL.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>SR_OK</parametername>
</parameternamelist>
<parameterdescription>
<para>Success. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>SR_ERR_ARG</parametername>
</parameternamelist>
<parameterdescription>
<para>Invalid arguments. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>SR_ERR_DEV_CLOSED</parametername>
</parameternamelist>
<parameterdescription>
<para>Device instance was not active. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>SR_ERR</parametername>
</parameternamelist>
<parameterdescription>
<para>Other error.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>0.2.0 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/libsigrok/proto.h" line="86" column="6" bodyfile="src/device.c" bodystart="709" bodyend="725" declfile="include/libsigrok/proto.h" declline="86" declcolumn="6"/>
        <references refid="a00050_1af94f33f23c5855e3e429bd2ca01e3b95a214df8baf519bba79a1b48d364be3f20" compoundref="a00050" startline="70">SR_ERR_ARG</references>
        <references refid="a00050_1af94f33f23c5855e3e429bd2ca01e3b95a876e62a9b4ae742236909f3cc639478a" compoundref="a00050" startline="74">SR_ERR_DEV_CLOSED</references>
        <references refid="a00050_1aeafac70caf348818c4ea8290137ff0e9a27b78acb86610b24607730033ab1eac7" compoundref="a00050" startline="1188">SR_ST_ACTIVE</references>
        <references refid="a00050_1aeafac70caf348818c4ea8290137ff0e9afc2699248859ab2bcb7550e3760460cc" compoundref="a00050" startline="1186">SR_ST_INACTIVE</references>
      </memberdef>
      <memberdef kind="function" id="a00071_1gac54ac663464d994e07681e7566f3b068" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>struct <ref refid="a00178" kindref="compound">sr_dev_driver</ref> *</type>
        <definition>struct sr_dev_driver* sr_dev_inst_driver_get</definition>
        <argsstring>(const struct sr_dev_inst *sdi)</argsstring>
        <name>sr_dev_inst_driver_get</name>
        <param>
          <type>const struct sr_dev_inst *</type>
          <declname>sdi</declname>
        </param>
        <briefdescription>
<para>Queries a device instances&apos; driver. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>sdi</parametername>
</parameternamelist>
<parameterdescription>
<para>Device instance to use. Must not be NULL.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The driver instance or NULL on error. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/libsigrok/proto.h" line="88" column="21" bodyfile="src/device.c" bodystart="734" bodyend="740" declfile="include/libsigrok/proto.h" declline="88" declcolumn="21"/>
      </memberdef>
      <memberdef kind="function" id="a00071_1ga666849e9e179e21e2cd263311a49b100" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const char *</type>
        <definition>const char* sr_dev_inst_vendor_get</definition>
        <argsstring>(const struct sr_dev_inst *sdi)</argsstring>
        <name>sr_dev_inst_vendor_get</name>
        <param>
          <type>const struct sr_dev_inst *</type>
          <declname>sdi</declname>
        </param>
        <briefdescription>
<para>Queries a device instances&apos; vendor. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>sdi</parametername>
</parameternamelist>
<parameterdescription>
<para>Device instance to use. Must not be NULL.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The vendor string or NULL. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/libsigrok/proto.h" line="89" column="13" bodyfile="src/device.c" bodystart="749" bodyend="755" declfile="include/libsigrok/proto.h" declline="89" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="a00071_1ga0cf89172ac7c3110348fec441e3e4119" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const char *</type>
        <definition>const char* sr_dev_inst_model_get</definition>
        <argsstring>(const struct sr_dev_inst *sdi)</argsstring>
        <name>sr_dev_inst_model_get</name>
        <param>
          <type>const struct sr_dev_inst *</type>
          <declname>sdi</declname>
        </param>
        <briefdescription>
<para>Queries a device instances&apos; model. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>sdi</parametername>
</parameternamelist>
<parameterdescription>
<para>Device instance to use. Must not be NULL.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The model string or NULL. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/libsigrok/proto.h" line="90" column="13" bodyfile="src/device.c" bodystart="764" bodyend="770" declfile="include/libsigrok/proto.h" declline="90" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="a00071_1ga8cd7545b8254c6f5b1150b43f3fd406f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const char *</type>
        <definition>const char* sr_dev_inst_version_get</definition>
        <argsstring>(const struct sr_dev_inst *sdi)</argsstring>
        <name>sr_dev_inst_version_get</name>
        <param>
          <type>const struct sr_dev_inst *</type>
          <declname>sdi</declname>
        </param>
        <briefdescription>
<para>Queries a device instances&apos; version. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>sdi</parametername>
</parameternamelist>
<parameterdescription>
<para>Device instance to use. Must not be NULL.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The version string or NULL. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/libsigrok/proto.h" line="91" column="13" bodyfile="src/device.c" bodystart="779" bodyend="785" declfile="include/libsigrok/proto.h" declline="91" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="a00071_1ga7dadb80a5ebe2fef6be0369c8bcb7ee4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const char *</type>
        <definition>const char* sr_dev_inst_sernum_get</definition>
        <argsstring>(const struct sr_dev_inst *sdi)</argsstring>
        <name>sr_dev_inst_sernum_get</name>
        <param>
          <type>const struct sr_dev_inst *</type>
          <declname>sdi</declname>
        </param>
        <briefdescription>
<para>Queries a device instances&apos; serial number. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>sdi</parametername>
</parameternamelist>
<parameterdescription>
<para>Device instance to use. Must not be NULL.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The serial number string or NULL. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/libsigrok/proto.h" line="92" column="13" bodyfile="src/device.c" bodystart="794" bodyend="800" declfile="include/libsigrok/proto.h" declline="92" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="a00071_1ga77f128263c50a618983c360185229115" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const char *</type>
        <definition>const char* sr_dev_inst_connid_get</definition>
        <argsstring>(const struct sr_dev_inst *sdi)</argsstring>
        <name>sr_dev_inst_connid_get</name>
        <param>
          <type>const struct sr_dev_inst *</type>
          <declname>sdi</declname>
        </param>
        <briefdescription>
<para>Queries a device instances&apos; connection identifier. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>sdi</parametername>
</parameternamelist>
<parameterdescription>
<para>Device instance to use. Must not be NULL.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A copy of the connection ID string or NULL. The caller is responsible for g_free()ing the string when it is no longer needed. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/libsigrok/proto.h" line="93" column="13" bodyfile="src/device.c" bodystart="810" bodyend="880" declfile="include/libsigrok/proto.h" declline="93" declcolumn="13"/>
        <references refid="a00050_1a849b033f345398d0fc85d4dc7d93be97aa912ddffee5003f408b80e7b5e2e9a8b" compoundref="a00050" startline="1172">SR_INST_SCPI</references>
        <references refid="a00050_1a849b033f345398d0fc85d4dc7d93be97a9745a78144502dbaa2eef05925cd9e39" compoundref="a00050" startline="1170">SR_INST_SERIAL</references>
        <references refid="a00050_1a849b033f345398d0fc85d4dc7d93be97a5a5cfb4465e2bbcc603d22fd9853aa80" compoundref="a00050" startline="1168">SR_INST_USB</references>
      </memberdef>
      <memberdef kind="function" id="a00071_1ga7fd62dba1ab23181dd5f3515ce244c54" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GSList *</type>
        <definition>GSList* sr_dev_inst_channels_get</definition>
        <argsstring>(const struct sr_dev_inst *sdi)</argsstring>
        <name>sr_dev_inst_channels_get</name>
        <param>
          <type>const struct sr_dev_inst *</type>
          <declname>sdi</declname>
        </param>
        <briefdescription>
<para>Queries a device instances&apos; channel list. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>sdi</parametername>
</parameternamelist>
<parameterdescription>
<para>Device instance to use. Must not be NULL.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The GSList of channels or NULL. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/libsigrok/proto.h" line="94" column="9" bodyfile="src/device.c" bodystart="889" bodyend="895" declfile="include/libsigrok/proto.h" declline="94" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="a00071_1gad2a2914e066fc3c405836445ecdd9ca4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GSList *</type>
        <definition>GSList* sr_dev_inst_channel_groups_get</definition>
        <argsstring>(const struct sr_dev_inst *sdi)</argsstring>
        <name>sr_dev_inst_channel_groups_get</name>
        <param>
          <type>const struct sr_dev_inst *</type>
          <declname>sdi</declname>
        </param>
        <briefdescription>
<para>Queries a device instances&apos; channel groups list. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>sdi</parametername>
</parameternamelist>
<parameterdescription>
<para>Device instance to use. Must not be NULL.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The GSList of channel groups or NULL. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/libsigrok/proto.h" line="95" column="9" bodyfile="src/device.c" bodystart="904" bodyend="910" declfile="include/libsigrok/proto.h" declline="95" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="a00071_1ga11dcc1cfb14c582a5cc683a08bb5da65" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>struct sr_dev_inst *</type>
        <definition>struct sr_dev_inst* sr_dev_inst_user_new</definition>
        <argsstring>(const char *vendor, const char *model, const char *version)</argsstring>
        <name>sr_dev_inst_user_new</name>
        <param>
          <type>const char *</type>
          <declname>vendor</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>model</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>version</declname>
        </param>
        <briefdescription>
<para>Allocate and init a new user-generated device instance. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>vendor</parametername>
</parameternamelist>
<parameterdescription>
<para>Device vendor. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>model</parametername>
</parameternamelist>
<parameterdescription>
<para>Device model. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>version</parametername>
</parameternamelist>
<parameterdescription>
<para>Device version.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>struct</parametername>
</parameternamelist>
<parameterdescription>
<para>sr_dev_inst *. Dynamically allocated, free using sr_dev_inst_free(). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/libsigrok/proto.h" line="97" column="19" bodyfile="src/device.c" bodystart="405" bodyend="418" declfile="include/libsigrok/proto.h" declline="97" declcolumn="19"/>
        <references refid="a00050_1a849b033f345398d0fc85d4dc7d93be97ac3316d7b058dc02920c68d6d31382524" compoundref="a00050" startline="1174">SR_INST_USER</references>
      </memberdef>
      <memberdef kind="function" id="a00071_1ga8c038a70b39b7465e74f1954be8d4c60" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int sr_dev_inst_channel_add</definition>
        <argsstring>(struct sr_dev_inst *sdi, int index, int type, const char *name)</argsstring>
        <name>sr_dev_inst_channel_add</name>
        <param>
          <type>struct sr_dev_inst *</type>
          <declname>sdi</declname>
        </param>
        <param>
          <type>int</type>
          <declname>index</declname>
        </param>
        <param>
          <type>int</type>
          <declname>type</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <briefdescription>
<para>Add a new channel to the specified device instance. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">sdi</parametername>
</parameternamelist>
<parameterdescription>
<para>Device instance to use. Must not be NULL. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">index</parametername>
</parameternamelist>
<parameterdescription>
<para>The index of this channel, starting at 0. Logic channels will be encoded according to this index in SR_DF_LOGIC packets. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">type</parametername>
</parameternamelist>
<parameterdescription>
<para>Channel type (SR_CHANNEL_LOGIC, ...)</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">name</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of channel.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>SR_OK Success. </para>
</simplesect>
<simplesect kind="return"><para>SR_OK Invalid argument. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/libsigrok/proto.h" line="99" column="6" bodyfile="src/device.c" bodystart="431" bodyend="439" declfile="include/libsigrok/proto.h" declline="99" declcolumn="6"/>
        <references refid="a00050_1af94f33f23c5855e3e429bd2ca01e3b95a214df8baf519bba79a1b48d364be3f20" compoundref="a00050" startline="70">SR_ERR_ARG</references>
        <references refid="a00050_1a849b033f345398d0fc85d4dc7d93be97ac3316d7b058dc02920c68d6d31382524" compoundref="a00050" startline="1174">SR_INST_USER</references>
      </memberdef>
      <memberdef kind="function" id="a00073_1ga755e937630acf9037eff1938233782c8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>struct <ref refid="a00178" kindref="compound">sr_dev_driver</ref> **</type>
        <definition>struct sr_dev_driver** sr_driver_list</definition>
        <argsstring>(const struct sr_context *ctx)</argsstring>
        <name>sr_driver_list</name>
        <param>
          <type>const struct <ref refid="a00186" kindref="compound">sr_context</ref> *</type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
<para>Return the list of supported hardware drivers. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to a libsigrok context struct. Must not be NULL.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>NULL</parametername>
</parameternamelist>
<parameterdescription>
<para>The ctx argument was NULL, or there are no supported drivers. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Other</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the NULL-terminated list of hardware drivers. The user should NOT g_free() this list, <ref refid="a00070_1ga94b41cf5bc8ccafad9fe4c1bd6d2cc41" kindref="member">sr_exit()</ref> will do that.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>0.4.0 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/libsigrok/proto.h" line="103" column="21" bodyfile="src/hwdriver.c" bodystart="391" bodyend="397" declfile="include/libsigrok/proto.h" declline="103" declcolumn="21"/>
      </memberdef>
      <memberdef kind="function" id="a00073_1ga33ced36993359a47eae8810f79737976" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int sr_driver_init</definition>
        <argsstring>(struct sr_context *ctx, struct sr_dev_driver *driver)</argsstring>
        <name>sr_driver_init</name>
        <param>
          <type>struct <ref refid="a00186" kindref="compound">sr_context</ref> *</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>struct <ref refid="a00178" kindref="compound">sr_dev_driver</ref> *</type>
          <declname>driver</declname>
        </param>
        <briefdescription>
<para>Initialize a hardware driver. </para>
        </briefdescription>
        <detaileddescription>
<para>This usually involves memory allocations and variable initializations within the driver, but <emphasis>not</emphasis> scanning for attached devices. The API call <ref refid="a00073_1ga997c1db14dae8faef0865b6331d52bdd" kindref="member">sr_driver_scan()</ref> is used for that.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>A libsigrok context object allocated by a previous call to <ref refid="a00070_1ga6210982b018100246093873faf07a667" kindref="member">sr_init()</ref>. Must not be NULL. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>driver</parametername>
</parameternamelist>
<parameterdescription>
<para>The driver to initialize. This must be a pointer to one of the entries returned by <ref refid="a00073_1ga755e937630acf9037eff1938233782c8" kindref="member">sr_driver_list()</ref>. Must not be NULL.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>SR_OK</parametername>
</parameternamelist>
<parameterdescription>
<para>Success </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>SR_ERR_ARG</parametername>
</parameternamelist>
<parameterdescription>
<para>Invalid parameter(s). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>SR_ERR_BUG</parametername>
</parameternamelist>
<parameterdescription>
<para>Internal errors. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>other</parametername>
</parameternamelist>
<parameterdescription>
<para>Another negative error code upon other errors.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>0.2.0 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/libsigrok/proto.h" line="104" column="6" bodyfile="src/hwdriver.c" bodystart="418" bodyend="438" declfile="include/libsigrok/proto.h" declline="104" declcolumn="6"/>
        <references refid="a00178_1ab651e39fdcbadacbb2782af2989716bc" compoundref="a00050" startline="1203">sr_dev_driver::init</references>
        <references refid="a00050_1af94f33f23c5855e3e429bd2ca01e3b95a214df8baf519bba79a1b48d364be3f20" compoundref="a00050" startline="70">SR_ERR_ARG</references>
      </memberdef>
      <memberdef kind="function" id="a00073_1ga8bfdb365f409063a682928716f8c3c3f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GArray *</type>
        <definition>GArray* sr_driver_scan_options_list</definition>
        <argsstring>(const struct sr_dev_driver *driver)</argsstring>
        <name>sr_driver_scan_options_list</name>
        <param>
          <type>const struct <ref refid="a00178" kindref="compound">sr_dev_driver</ref> *</type>
          <declname>driver</declname>
        </param>
        <briefdescription>
<para>Enumerate scan options supported by this driver. </para>
        </briefdescription>
        <detaileddescription>
<para>Before calling <ref refid="a00073_1ga8bfdb365f409063a682928716f8c3c3f" kindref="member">sr_driver_scan_options_list()</ref>, the user must have previously initialized the driver by calling <ref refid="a00073_1ga33ced36993359a47eae8810f79737976" kindref="member">sr_driver_init()</ref>.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>driver</parametername>
</parameternamelist>
<parameterdescription>
<para>The driver to enumerate options for. This must be a pointer to one of the entries returned by <ref refid="a00073_1ga755e937630acf9037eff1938233782c8" kindref="member">sr_driver_list()</ref>. Must not be NULL.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A GArray * of uint32_t entries, or NULL on invalid arguments. Each entry is a configuration key that is supported as a scan option. The array must be freed by the caller using g_array_free().</para>
</simplesect>
<simplesect kind="since"><para>0.4.0 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/libsigrok/proto.h" line="106" column="9" bodyfile="src/hwdriver.c" bodystart="456" bodyend="475" declfile="include/libsigrok/proto.h" declline="106" declcolumn="9"/>
        <references refid="a00073_1gaac72c02a32f953728715973412be0bc6" compoundref="a00023" startline="940" endline="994">sr_config_list</references>
        <references refid="a00050_1af94f33f23c5855e3e429bd2ca01e3b95aa35b06e07345c41f0102c255c9cd0bf1" compoundref="a00050" startline="67">SR_OK</references>
      </memberdef>
      <memberdef kind="function" id="a00073_1ga997c1db14dae8faef0865b6331d52bdd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GSList *</type>
        <definition>GSList* sr_driver_scan</definition>
        <argsstring>(struct sr_dev_driver *driver, GSList *options)</argsstring>
        <name>sr_driver_scan</name>
        <param>
          <type>struct <ref refid="a00178" kindref="compound">sr_dev_driver</ref> *</type>
          <declname>driver</declname>
        </param>
        <param>
          <type>GSList *</type>
          <declname>options</declname>
        </param>
        <briefdescription>
<para>Tell a hardware driver to scan for devices. </para>
        </briefdescription>
        <detaileddescription>
<para>In addition to the detection, the devices that are found are also initialized automatically. On some devices, this involves a firmware upload, or other such measures.</para>
<para>The order in which the system is scanned for devices is not specified. The caller should not assume or rely on any specific order.</para>
<para>Before calling <ref refid="a00073_1ga997c1db14dae8faef0865b6331d52bdd" kindref="member">sr_driver_scan()</ref>, the user must have previously initialized the driver by calling <ref refid="a00073_1ga33ced36993359a47eae8810f79737976" kindref="member">sr_driver_init()</ref>.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>driver</parametername>
</parameternamelist>
<parameterdescription>
<para>The driver that should scan. This must be a pointer to one of the entries returned by <ref refid="a00073_1ga755e937630acf9037eff1938233782c8" kindref="member">sr_driver_list()</ref>. Must not be NULL. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>options</parametername>
</parameternamelist>
<parameterdescription>
<para>A list of &apos;struct sr_hwopt&apos; options to pass to the driver&apos;s scanner. Can be NULL/empty.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A GSList * of &apos;struct sr_dev_inst&apos;, or NULL if no devices were found (or errors were encountered). This list must be freed by the caller using g_slist_free(), but without freeing the data pointed to in the list.</para>
</simplesect>
<simplesect kind="since"><para>0.2.0 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/libsigrok/proto.h" line="107" column="9" bodyfile="src/hwdriver.c" bodystart="546" bodyend="570" declfile="include/libsigrok/proto.h" declline="107" declcolumn="9"/>
        <references refid="a00178_1a78504fc823d187e0f2f2646d9f20e883" compoundref="a00050" startline="1258">sr_dev_driver::context</references>
      </memberdef>
      <memberdef kind="function" id="a00073_1gabc6131f95a0a1198355a4f013200ad7b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int sr_config_get</definition>
        <argsstring>(const struct sr_dev_driver *driver, const struct sr_dev_inst *sdi, const struct sr_channel_group *cg, uint32_t key, GVariant **data)</argsstring>
        <name>sr_config_get</name>
        <param>
          <type>const struct <ref refid="a00178" kindref="compound">sr_dev_driver</ref> *</type>
          <declname>driver</declname>
        </param>
        <param>
          <type>const struct sr_dev_inst *</type>
          <declname>sdi</declname>
        </param>
        <param>
          <type>const struct <ref refid="a00166" kindref="compound">sr_channel_group</ref> *</type>
          <declname>cg</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>key</declname>
        </param>
        <param>
          <type>GVariant **</type>
          <declname>data</declname>
        </param>
        <briefdescription>
<para>Query value of a configuration key at the given driver or device instance. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">driver</parametername>
</parameternamelist>
<parameterdescription>
<para>The <ref refid="a00178" kindref="compound">sr_dev_driver</ref> struct to query. Must not be NULL. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">sdi</parametername>
</parameternamelist>
<parameterdescription>
<para>(optional) If the key is specific to a device, this must contain a pointer to the struct sr_dev_inst to be checked. Otherwise it must be NULL. If sdi is != NULL, sdi-&gt;priv must also be != NULL. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">cg</parametername>
</parameternamelist>
<parameterdescription>
<para>The channel group on the device for which to list the values, or NULL. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">key</parametername>
</parameternamelist>
<parameterdescription>
<para>The configuration key (SR_CONF_*). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="inout">data</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to a GVariant where the value will be stored. Must not be NULL. The caller is given ownership of the GVariant and must thus decrease the refcount after use. However if this function returns an error code, the field should be considered unused, and should not be unreferenced.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>SR_OK</parametername>
</parameternamelist>
<parameterdescription>
<para>Success. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>SR_ERR</parametername>
</parameternamelist>
<parameterdescription>
<para>Error. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>SR_ERR_ARG</parametername>
</parameternamelist>
<parameterdescription>
<para>The driver doesn&apos;t know that key, but this is not to be interpreted as an error by the caller; merely as an indication that it&apos;s not applicable.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>0.3.0 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/libsigrok/proto.h" line="108" column="6" bodyfile="src/hwdriver.c" bodystart="797" bodyend="830" declfile="include/libsigrok/proto.h" declline="108" declcolumn="6"/>
        <references refid="a00178_1a53a547f712afbaa08238df3ba91fd8e9" compoundref="a00050" startline="1224">sr_dev_driver::config_get</references>
        <references refid="a00050_1af94f33f23c5855e3e429bd2ca01e3b95a132553bf1f479756d2590f9fd40bb289" compoundref="a00050" startline="68">SR_ERR</references>
        <references refid="a00050_1af94f33f23c5855e3e429bd2ca01e3b95a214df8baf519bba79a1b48d364be3f20" compoundref="a00050" startline="70">SR_ERR_ARG</references>
      </memberdef>
      <memberdef kind="function" id="a00073_1ga17f18fc144eeb667f2fd596948426941" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int sr_config_set</definition>
        <argsstring>(const struct sr_dev_inst *sdi, const struct sr_channel_group *cg, uint32_t key, GVariant *data)</argsstring>
        <name>sr_config_set</name>
        <param>
          <type>const struct sr_dev_inst *</type>
          <declname>sdi</declname>
        </param>
        <param>
          <type>const struct <ref refid="a00166" kindref="compound">sr_channel_group</ref> *</type>
          <declname>cg</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>key</declname>
        </param>
        <param>
          <type>GVariant *</type>
          <declname>data</declname>
        </param>
        <briefdescription>
<para>Set value of a configuration key in a device instance. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">sdi</parametername>
</parameternamelist>
<parameterdescription>
<para>The device instance. Must not be NULL. sdi-&gt;driver and sdi-&gt;priv must not be NULL either. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">cg</parametername>
</parameternamelist>
<parameterdescription>
<para>The channel group on the device for which to list the values, or NULL. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">key</parametername>
</parameternamelist>
<parameterdescription>
<para>The configuration key (SR_CONF_*). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>The new value for the key, as a GVariant with GVariantType appropriate to that key. A floating reference can be passed in; its refcount will be sunk and unreferenced after use.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>SR_OK</parametername>
</parameternamelist>
<parameterdescription>
<para>Success. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>SR_ERR</parametername>
</parameternamelist>
<parameterdescription>
<para>Error. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>SR_ERR_ARG</parametername>
</parameternamelist>
<parameterdescription>
<para>The driver doesn&apos;t know that key, but this is not to be interpreted as an error by the caller; merely as an indication that it&apos;s not applicable.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>0.3.0 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/libsigrok/proto.h" line="112" column="6" bodyfile="src/hwdriver.c" bodystart="852" bodyend="882" declfile="include/libsigrok/proto.h" declline="112" declcolumn="6"/>
        <references refid="a00050_1af94f33f23c5855e3e429bd2ca01e3b95a132553bf1f479756d2590f9fd40bb289" compoundref="a00050" startline="68">SR_ERR</references>
        <references refid="a00050_1af94f33f23c5855e3e429bd2ca01e3b95a214df8baf519bba79a1b48d364be3f20" compoundref="a00050" startline="70">SR_ERR_ARG</references>
        <references refid="a00050_1af94f33f23c5855e3e429bd2ca01e3b95a876e62a9b4ae742236909f3cc639478a" compoundref="a00050" startline="74">SR_ERR_DEV_CLOSED</references>
        <references refid="a00050_1aeafac70caf348818c4ea8290137ff0e9a27b78acb86610b24607730033ab1eac7" compoundref="a00050" startline="1188">SR_ST_ACTIVE</references>
      </memberdef>
      <memberdef kind="function" id="a00073_1ga392e481fc872786f871b5c7ce3934087" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int sr_config_commit</definition>
        <argsstring>(const struct sr_dev_inst *sdi)</argsstring>
        <name>sr_config_commit</name>
        <param>
          <type>const struct sr_dev_inst *</type>
          <declname>sdi</declname>
        </param>
        <briefdescription>
<para>Apply configuration settings to the device hardware. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>sdi</parametername>
</parameternamelist>
<parameterdescription>
<para>The device instance.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>SR_OK upon success or SR_ERR in case of error.</para>
</simplesect>
<simplesect kind="since"><para>0.3.0 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/libsigrok/proto.h" line="115" column="6" bodyfile="src/hwdriver.c" bodystart="893" bodyend="909" declfile="include/libsigrok/proto.h" declline="115" declcolumn="6"/>
        <references refid="a00050_1af94f33f23c5855e3e429bd2ca01e3b95a132553bf1f479756d2590f9fd40bb289" compoundref="a00050" startline="68">SR_ERR</references>
        <references refid="a00050_1af94f33f23c5855e3e429bd2ca01e3b95a876e62a9b4ae742236909f3cc639478a" compoundref="a00050" startline="74">SR_ERR_DEV_CLOSED</references>
        <references refid="a00050_1af94f33f23c5855e3e429bd2ca01e3b95aa35b06e07345c41f0102c255c9cd0bf1" compoundref="a00050" startline="67">SR_OK</references>
        <references refid="a00050_1aeafac70caf348818c4ea8290137ff0e9a27b78acb86610b24607730033ab1eac7" compoundref="a00050" startline="1188">SR_ST_ACTIVE</references>
        <referencedby refid="a00076_1gac037d037baecc2b3679044d2b7c3bad3" compoundref="a00035" startline="318" endline="377">sr_session_dev_add</referencedby>
      </memberdef>
      <memberdef kind="function" id="a00073_1gaac72c02a32f953728715973412be0bc6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int sr_config_list</definition>
        <argsstring>(const struct sr_dev_driver *driver, const struct sr_dev_inst *sdi, const struct sr_channel_group *cg, uint32_t key, GVariant **data)</argsstring>
        <name>sr_config_list</name>
        <param>
          <type>const struct <ref refid="a00178" kindref="compound">sr_dev_driver</ref> *</type>
          <declname>driver</declname>
        </param>
        <param>
          <type>const struct sr_dev_inst *</type>
          <declname>sdi</declname>
        </param>
        <param>
          <type>const struct <ref refid="a00166" kindref="compound">sr_channel_group</ref> *</type>
          <declname>cg</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>key</declname>
        </param>
        <param>
          <type>GVariant **</type>
          <declname>data</declname>
        </param>
        <briefdescription>
<para>List all possible values for a configuration key. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">driver</parametername>
</parameternamelist>
<parameterdescription>
<para>The <ref refid="a00178" kindref="compound">sr_dev_driver</ref> struct to query. Must not be NULL. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">sdi</parametername>
</parameternamelist>
<parameterdescription>
<para>(optional) If the key is specific to a device instance, this must contain a pointer to the struct sr_dev_inst to be checked. Otherwise it must be NULL. If sdi is != NULL, sdi-&gt;priv must also be != NULL. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">cg</parametername>
</parameternamelist>
<parameterdescription>
<para>The channel group on the device instance for which to list the values, or NULL. If this device instance doesn&apos;t have channel groups, this must not be != NULL. If cg is NULL, this function will return the &quot;common&quot; device instance options that are channel-group independent. Otherwise it will return the channel-group specific options. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">key</parametername>
</parameternamelist>
<parameterdescription>
<para>The configuration key (SR_CONF_*). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="inout">data</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to a GVariant where the list will be stored. The caller is given ownership of the GVariant and must thus unref the GVariant after use. However if this function returns an error code, the field should be considered unused, and should not be unreferenced.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>SR_OK</parametername>
</parameternamelist>
<parameterdescription>
<para>Success. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>SR_ERR</parametername>
</parameternamelist>
<parameterdescription>
<para>Error. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>SR_ERR_ARG</parametername>
</parameternamelist>
<parameterdescription>
<para>The driver doesn&apos;t know that key, but this is not to be interpreted as an error by the caller; merely as an indication that it&apos;s not applicable.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>0.3.0 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/libsigrok/proto.h" line="116" column="6" bodyfile="src/hwdriver.c" bodystart="940" bodyend="994" declfile="include/libsigrok/proto.h" declline="116" declcolumn="6"/>
        <references refid="a00178_1add11215f64fb44c03ccd406ce42b5c5a" compoundref="a00050" startline="1242">sr_dev_driver::config_list</references>
        <references refid="a00174_1a279e22888cc8ef8d5b0d42091c72d80b" compoundref="a00050" startline="656">sr_key_info::key</references>
        <references refid="a00050_1af94f33f23c5855e3e429bd2ca01e3b95a132553bf1f479756d2590f9fd40bb289" compoundref="a00050" startline="68">SR_ERR</references>
        <references refid="a00050_1af94f33f23c5855e3e429bd2ca01e3b95a214df8baf519bba79a1b48d364be3f20" compoundref="a00050" startline="70">SR_ERR_ARG</references>
        <referencedby refid="a00073_1ga8bfdb365f409063a682928716f8c3c3f" compoundref="a00023" startline="456" endline="475">sr_driver_scan_options_list</referencedby>
      </memberdef>
      <memberdef kind="function" id="a00073_1gafbe481f247af711cbd6902d9a3120cb6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const struct <ref refid="a00174" kindref="compound">sr_key_info</ref> *</type>
        <definition>const struct sr_key_info* sr_key_info_get</definition>
        <argsstring>(int keytype, uint32_t key)</argsstring>
        <name>sr_key_info_get</name>
        <param>
          <type>int</type>
          <declname>keytype</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>key</declname>
        </param>
        <briefdescription>
<para>Get information about a key, by key. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">keytype</parametername>
</parameternamelist>
<parameterdescription>
<para>The namespace the key is in. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">key</parametername>
</parameternamelist>
<parameterdescription>
<para>The key to find.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A pointer to a struct <ref refid="a00174" kindref="compound">sr_key_info</ref>, or NULL if the key was not found.</para>
</simplesect>
<simplesect kind="since"><para>0.3.0 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/libsigrok/proto.h" line="120" column="25" bodyfile="src/hwdriver.c" bodystart="1029" bodyend="1043" declfile="include/libsigrok/proto.h" declline="120" declcolumn="25"/>
      </memberdef>
      <memberdef kind="function" id="a00073_1gac033a6db6a21346591a068d90ee8fae4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const struct <ref refid="a00174" kindref="compound">sr_key_info</ref> *</type>
        <definition>const struct sr_key_info* sr_key_info_name_get</definition>
        <argsstring>(int keytype, const char *keyid)</argsstring>
        <name>sr_key_info_name_get</name>
        <param>
          <type>int</type>
          <declname>keytype</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>keyid</declname>
        </param>
        <briefdescription>
<para>Get information about a key, by name. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">keytype</parametername>
</parameternamelist>
<parameterdescription>
<para>The namespace the key is in. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">keyid</parametername>
</parameternamelist>
<parameterdescription>
<para>The key id string.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A pointer to a struct <ref refid="a00174" kindref="compound">sr_key_info</ref>, or NULL if the key was not found.</para>
</simplesect>
<simplesect kind="since"><para>0.2.0 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/libsigrok/proto.h" line="121" column="25" bodyfile="src/hwdriver.c" bodystart="1056" bodyend="1072" declfile="include/libsigrok/proto.h" declline="121" declcolumn="25"/>
      </memberdef>
      <memberdef kind="function" id="a00076_1ga9b2382d16a6b005f7d22e77b78cc32ec" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>struct <ref refid="a00106" kindref="compound">sr_trigger</ref> *</type>
        <definition>struct sr_trigger* sr_session_trigger_get</definition>
        <argsstring>(struct sr_session *session)</argsstring>
        <name>sr_session_trigger_get</name>
        <param>
          <type>struct <ref refid="a00190" kindref="compound">sr_session</ref> *</type>
          <declname>session</declname>
        </param>
        <briefdescription>
<para>Get the trigger assigned to this session. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>session</parametername>
</parameternamelist>
<parameterdescription>
<para>The session to use.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>NULL</parametername>
</parameternamelist>
<parameterdescription>
<para>Invalid (NULL) session was passed to the function. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>other</parametername>
</parameternamelist>
<parameterdescription>
<para>The trigger assigned to this session (can be NULL).</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>0.4.0 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/libsigrok/proto.h" line="129" column="18" bodyfile="src/session.c" bodystart="518" bodyend="524" declfile="include/libsigrok/proto.h" declline="129" declcolumn="18"/>
      </memberdef>
      <memberdef kind="function" id="a00076_1ga2c71ff4871df5448ae3c6a6f2e1a7bfd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int sr_session_load</definition>
        <argsstring>(struct sr_context *ctx, const char *filename, struct sr_session **session)</argsstring>
        <name>sr_session_load</name>
        <param>
          <type>struct <ref refid="a00186" kindref="compound">sr_context</ref> *</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>filename</declname>
        </param>
        <param>
          <type>struct <ref refid="a00190" kindref="compound">sr_session</ref> **</type>
          <declname>session</declname>
        </param>
        <briefdescription>
<para>Load the session from the specified filename. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>The context in which to load the session. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>filename</parametername>
</parameternamelist>
<parameterdescription>
<para>The name of the session file to load. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>session</parametername>
</parameternamelist>
<parameterdescription>
<para>The session to load the file into.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>SR_OK</parametername>
</parameternamelist>
<parameterdescription>
<para>Success </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>SR_ERR_MALLOC</parametername>
</parameternamelist>
<parameterdescription>
<para>Memory allocation error </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>SR_ERR_DATA</parametername>
</parameternamelist>
<parameterdescription>
<para>Malformed session file </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>SR_ERR</parametername>
</parameternamelist>
<parameterdescription>
<para>This is not a session file </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/libsigrok/proto.h" line="132" column="6" bodyfile="src/session_file.c" bodystart="207" bodyend="394" declfile="include/libsigrok/proto.h" declline="132" declcolumn="6"/>
        <references refid="a00050_1af48ebab90ddc869a235404107fbecf2c" compoundref="a00050" startline="90">SR_MAX_CHANNELNAME_LEN</references>
      </memberdef>
      <memberdef kind="function" id="a00076_1ga83de7a88c9e1a41be0a421669369dbd0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int sr_session_new</definition>
        <argsstring>(struct sr_context *ctx, struct sr_session **session)</argsstring>
        <name>sr_session_new</name>
        <param>
          <type>struct <ref refid="a00186" kindref="compound">sr_context</ref> *</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>struct <ref refid="a00190" kindref="compound">sr_session</ref> **</type>
          <declname>session</declname>
          <defname>new_session</defname>
        </param>
        <briefdescription>
<para>Create a new session. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>The context in which to create the new session. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>new_session</parametername>
</parameternamelist>
<parameterdescription>
<para>This will contain a pointer to the newly created session if the return value is SR_OK, otherwise the value is undefined and should not be used. Must not be NULL.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>SR_OK</parametername>
</parameternamelist>
<parameterdescription>
<para>Success. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>SR_ERR_ARG</parametername>
</parameternamelist>
<parameterdescription>
<para>Invalid argument.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>0.4.0 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/libsigrok/proto.h" line="134" column="6" bodyfile="src/session.c" bodystart="215" bodyend="237" declfile="include/libsigrok/proto.h" declline="134" declcolumn="6"/>
        <references refid="a00050_1af94f33f23c5855e3e429bd2ca01e3b95a214df8baf519bba79a1b48d364be3f20" compoundref="a00050" startline="70">SR_ERR_ARG</references>
        <references refid="a00050_1af94f33f23c5855e3e429bd2ca01e3b95aa35b06e07345c41f0102c255c9cd0bf1" compoundref="a00050" startline="67">SR_OK</references>
      </memberdef>
      <memberdef kind="function" id="a00076_1gaf1b7200161c362ee2fc5c0fe88586462" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int sr_session_destroy</definition>
        <argsstring>(struct sr_session *session)</argsstring>
        <name>sr_session_destroy</name>
        <param>
          <type>struct <ref refid="a00190" kindref="compound">sr_session</ref> *</type>
          <declname>session</declname>
        </param>
        <briefdescription>
<para>Destroy a session. </para>
        </briefdescription>
        <detaileddescription>
<para>This frees up all memory used by the session.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>session</parametername>
</parameternamelist>
<parameterdescription>
<para>The session to destroy. Must not be NULL.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>SR_OK</parametername>
</parameternamelist>
<parameterdescription>
<para>Success. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>SR_ERR_ARG</parametername>
</parameternamelist>
<parameterdescription>
<para>Invalid session passed.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>0.4.0 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/libsigrok/proto.h" line="135" column="6" bodyfile="src/session.c" bodystart="250" bodyend="269" declfile="include/libsigrok/proto.h" declline="135" declcolumn="6"/>
        <references refid="a00050_1af94f33f23c5855e3e429bd2ca01e3b95a214df8baf519bba79a1b48d364be3f20" compoundref="a00050" startline="70">SR_ERR_ARG</references>
        <references refid="a00076_1gad77b8c141a6e158fa474d6e9281ca77c" compoundref="a00035" startline="284" endline="303">sr_session_dev_remove_all</references>
      </memberdef>
      <memberdef kind="function" id="a00076_1gad77b8c141a6e158fa474d6e9281ca77c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int sr_session_dev_remove_all</definition>
        <argsstring>(struct sr_session *session)</argsstring>
        <name>sr_session_dev_remove_all</name>
        <param>
          <type>struct <ref refid="a00190" kindref="compound">sr_session</ref> *</type>
          <declname>session</declname>
        </param>
        <briefdescription>
<para>Remove all the devices from a session. </para>
        </briefdescription>
        <detaileddescription>
<para>The session itself (i.e., the struct <ref refid="a00190" kindref="compound">sr_session</ref>) is not free&apos;d and still exists after this function returns.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>session</parametername>
</parameternamelist>
<parameterdescription>
<para>The session to use. Must not be NULL.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>SR_OK</parametername>
</parameternamelist>
<parameterdescription>
<para>Success. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>SR_ERR_BUG</parametername>
</parameternamelist>
<parameterdescription>
<para>Invalid session passed.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>0.4.0 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/libsigrok/proto.h" line="136" column="6" bodyfile="src/session.c" bodystart="284" bodyend="303" declfile="include/libsigrok/proto.h" declline="136" declcolumn="6"/>
        <references refid="a00050_1af94f33f23c5855e3e429bd2ca01e3b95a214df8baf519bba79a1b48d364be3f20" compoundref="a00050" startline="70">SR_ERR_ARG</references>
        <references refid="a00050_1af94f33f23c5855e3e429bd2ca01e3b95aa35b06e07345c41f0102c255c9cd0bf1" compoundref="a00050" startline="67">SR_OK</references>
        <referencedby refid="a00076_1gaf1b7200161c362ee2fc5c0fe88586462" compoundref="a00035" startline="250" endline="269">sr_session_destroy</referencedby>
      </memberdef>
      <memberdef kind="function" id="a00076_1gac037d037baecc2b3679044d2b7c3bad3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int sr_session_dev_add</definition>
        <argsstring>(struct sr_session *session, struct sr_dev_inst *sdi)</argsstring>
        <name>sr_session_dev_add</name>
        <param>
          <type>struct <ref refid="a00190" kindref="compound">sr_session</ref> *</type>
          <declname>session</declname>
        </param>
        <param>
          <type>struct sr_dev_inst *</type>
          <declname>sdi</declname>
        </param>
        <briefdescription>
<para>Add a device instance to a session. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>session</parametername>
</parameternamelist>
<parameterdescription>
<para>The session to add to. Must not be NULL. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>sdi</parametername>
</parameternamelist>
<parameterdescription>
<para>The device instance to add to a session. Must not be NULL. Also, sdi-&gt;driver and sdi-&gt;driver-&gt;dev_open must not be NULL.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>SR_OK</parametername>
</parameternamelist>
<parameterdescription>
<para>Success. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>SR_ERR_ARG</parametername>
</parameternamelist>
<parameterdescription>
<para>Invalid argument.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>0.4.0 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/libsigrok/proto.h" line="137" column="6" bodyfile="src/session.c" bodystart="318" bodyend="377" declfile="include/libsigrok/proto.h" declline="137" declcolumn="6"/>
        <references refid="a00073_1ga392e481fc872786f871b5c7ce3934087" compoundref="a00023" startline="893" endline="909">sr_config_commit</references>
        <references refid="a00050_1af94f33f23c5855e3e429bd2ca01e3b95a214df8baf519bba79a1b48d364be3f20" compoundref="a00050" startline="70">SR_ERR_ARG</references>
        <references refid="a00050_1af94f33f23c5855e3e429bd2ca01e3b95a73d02d78044acbb231b3c2db09ac9073" compoundref="a00050" startline="71">SR_ERR_BUG</references>
        <references refid="a00050_1af94f33f23c5855e3e429bd2ca01e3b95aa35b06e07345c41f0102c255c9cd0bf1" compoundref="a00050" startline="67">SR_OK</references>
        <references refid="a00072_1ga7aacfdde4d4f0b3a64d50797f3c10103" compoundref="a00020" startline="53" endline="88">sr_strerror</references>
      </memberdef>
      <memberdef kind="function" id="a00076_1gad08ce13c738a985321596778bfc22273" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int sr_session_dev_remove</definition>
        <argsstring>(struct sr_session *session, struct sr_dev_inst *sdi)</argsstring>
        <name>sr_session_dev_remove</name>
        <param>
          <type>struct <ref refid="a00190" kindref="compound">sr_session</ref> *</type>
          <declname>session</declname>
        </param>
        <param>
          <type>struct sr_dev_inst *</type>
          <declname>sdi</declname>
        </param>
        <briefdescription>
<para>Remove a device instance from a session. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>session</parametername>
</parameternamelist>
<parameterdescription>
<para>The session to remove from. Must not be NULL. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>sdi</parametername>
</parameternamelist>
<parameterdescription>
<para>The device instance to remove from a session. Must not be NULL. Also, sdi-&gt;driver and sdi-&gt;driver-&gt;dev_open must not be NULL.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>SR_OK</parametername>
</parameternamelist>
<parameterdescription>
<para>Success. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>SR_ERR_ARG</parametername>
</parameternamelist>
<parameterdescription>
<para>Invalid argument.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>0.4.0 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/libsigrok/proto.h" line="139" column="6" bodyfile="src/session.c" bodystart="421" bodyend="445" declfile="include/libsigrok/proto.h" declline="139" declcolumn="6"/>
        <references refid="a00050_1af94f33f23c5855e3e429bd2ca01e3b95a214df8baf519bba79a1b48d364be3f20" compoundref="a00050" startline="70">SR_ERR_ARG</references>
        <references refid="a00050_1af94f33f23c5855e3e429bd2ca01e3b95aa35b06e07345c41f0102c255c9cd0bf1" compoundref="a00050" startline="67">SR_OK</references>
      </memberdef>
      <memberdef kind="function" id="a00076_1ga0753ea59f6f7f2f99bf6de35fab72400" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int sr_session_dev_list</definition>
        <argsstring>(struct sr_session *session, GSList **devlist)</argsstring>
        <name>sr_session_dev_list</name>
        <param>
          <type>struct <ref refid="a00190" kindref="compound">sr_session</ref> *</type>
          <declname>session</declname>
        </param>
        <param>
          <type>GSList **</type>
          <declname>devlist</declname>
        </param>
        <briefdescription>
<para>List all device instances attached to a session. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>session</parametername>
</parameternamelist>
<parameterdescription>
<para>The session to use. Must not be NULL. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>devlist</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer where the device instance list will be stored on return. If no devices are in the session, this will be NULL. Each element in the list points to a struct sr_dev_inst *. The list must be freed by the caller, but not the elements pointed to.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>SR_OK</parametername>
</parameternamelist>
<parameterdescription>
<para>Success. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>SR_ERR_ARG</parametername>
</parameternamelist>
<parameterdescription>
<para>Invalid argument.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>0.4.0 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/libsigrok/proto.h" line="141" column="6" bodyfile="src/session.c" bodystart="395" bodyend="406" declfile="include/libsigrok/proto.h" declline="141" declcolumn="6"/>
        <references refid="a00050_1af94f33f23c5855e3e429bd2ca01e3b95a214df8baf519bba79a1b48d364be3f20" compoundref="a00050" startline="70">SR_ERR_ARG</references>
        <references refid="a00050_1af94f33f23c5855e3e429bd2ca01e3b95aa35b06e07345c41f0102c255c9cd0bf1" compoundref="a00050" startline="67">SR_OK</references>
      </memberdef>
      <memberdef kind="function" id="a00076_1ga0a72faea3441cb5e9e42079ecb2f4651" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int sr_session_trigger_set</definition>
        <argsstring>(struct sr_session *session, struct sr_trigger *trig)</argsstring>
        <name>sr_session_trigger_set</name>
        <param>
          <type>struct <ref refid="a00190" kindref="compound">sr_session</ref> *</type>
          <declname>session</declname>
        </param>
        <param>
          <type>struct <ref refid="a00106" kindref="compound">sr_trigger</ref> *</type>
          <declname>trig</declname>
        </param>
        <briefdescription>
<para>Set the trigger of this session. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>session</parametername>
</parameternamelist>
<parameterdescription>
<para>The session to use. Must not be NULL. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>trig</parametername>
</parameternamelist>
<parameterdescription>
<para>The trigger to assign to this session. Can be NULL.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>SR_OK</parametername>
</parameternamelist>
<parameterdescription>
<para>Success. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>SR_ERR_ARG</parametername>
</parameternamelist>
<parameterdescription>
<para>Invalid argument.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>0.4.0 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/libsigrok/proto.h" line="142" column="6" bodyfile="src/session.c" bodystart="537" bodyend="545" declfile="include/libsigrok/proto.h" declline="142" declcolumn="6"/>
        <references refid="a00050_1af94f33f23c5855e3e429bd2ca01e3b95a214df8baf519bba79a1b48d364be3f20" compoundref="a00050" startline="70">SR_ERR_ARG</references>
        <references refid="a00050_1af94f33f23c5855e3e429bd2ca01e3b95aa35b06e07345c41f0102c255c9cd0bf1" compoundref="a00050" startline="67">SR_OK</references>
      </memberdef>
      <memberdef kind="function" id="a00076_1ga184a47240fd2a77038df65e85b7cd356" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int sr_session_datafeed_callback_remove_all</definition>
        <argsstring>(struct sr_session *session)</argsstring>
        <name>sr_session_datafeed_callback_remove_all</name>
        <param>
          <type>struct <ref refid="a00190" kindref="compound">sr_session</ref> *</type>
          <declname>session</declname>
        </param>
        <briefdescription>
<para>Remove all datafeed callbacks in a session. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>session</parametername>
</parameternamelist>
<parameterdescription>
<para>The session to use. Must not be NULL.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>SR_OK</parametername>
</parameternamelist>
<parameterdescription>
<para>Success. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>SR_ERR_ARG</parametername>
</parameternamelist>
<parameterdescription>
<para>Invalid session passed.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>0.4.0 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/libsigrok/proto.h" line="145" column="6" bodyfile="src/session.c" bodystart="457" bodyend="468" declfile="include/libsigrok/proto.h" declline="145" declcolumn="6"/>
        <references refid="a00050_1af94f33f23c5855e3e429bd2ca01e3b95a214df8baf519bba79a1b48d364be3f20" compoundref="a00050" startline="70">SR_ERR_ARG</references>
        <references refid="a00050_1af94f33f23c5855e3e429bd2ca01e3b95aa35b06e07345c41f0102c255c9cd0bf1" compoundref="a00050" startline="67">SR_OK</references>
      </memberdef>
      <memberdef kind="function" id="a00076_1ga8675ef7da27e7dd4a54a2c09371272a2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int sr_session_datafeed_callback_add</definition>
        <argsstring>(struct sr_session *session, sr_datafeed_callback cb, void *cb_data)</argsstring>
        <name>sr_session_datafeed_callback_add</name>
        <param>
          <type>struct <ref refid="a00190" kindref="compound">sr_session</ref> *</type>
          <declname>session</declname>
        </param>
        <param>
          <type><ref refid="a00053_1abe3dfadc282fa9e0cc1479a27feec66b" kindref="member">sr_datafeed_callback</ref></type>
          <declname>cb</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>cb_data</declname>
        </param>
        <briefdescription>
<para>Add a datafeed callback to a session. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>session</parametername>
</parameternamelist>
<parameterdescription>
<para>The session to use. Must not be NULL. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cb</parametername>
</parameternamelist>
<parameterdescription>
<para>Function to call when a chunk of data is received. Must not be NULL. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cb_data</parametername>
</parameternamelist>
<parameterdescription>
<para>Opaque pointer passed in by the caller.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>SR_OK</parametername>
</parameternamelist>
<parameterdescription>
<para>Success. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>SR_ERR_BUG</parametername>
</parameternamelist>
<parameterdescription>
<para>No session exists.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>0.3.0 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/libsigrok/proto.h" line="146" column="6" bodyfile="src/session.c" bodystart="483" bodyend="506" declfile="include/libsigrok/proto.h" declline="146" declcolumn="6"/>
        <references refid="a00050_1af94f33f23c5855e3e429bd2ca01e3b95a214df8baf519bba79a1b48d364be3f20" compoundref="a00050" startline="70">SR_ERR_ARG</references>
        <references refid="a00050_1af94f33f23c5855e3e429bd2ca01e3b95a73d02d78044acbb231b3c2db09ac9073" compoundref="a00050" startline="71">SR_ERR_BUG</references>
        <references refid="a00050_1af94f33f23c5855e3e429bd2ca01e3b95aa35b06e07345c41f0102c255c9cd0bf1" compoundref="a00050" startline="67">SR_OK</references>
      </memberdef>
      <memberdef kind="function" id="a00076_1gaac6e5af8f883193213a60b21f9f16432" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int sr_session_start</definition>
        <argsstring>(struct sr_session *session)</argsstring>
        <name>sr_session_start</name>
        <param>
          <type>struct <ref refid="a00190" kindref="compound">sr_session</ref> *</type>
          <declname>session</declname>
        </param>
        <briefdescription>
<para>Start a session. </para>
        </briefdescription>
        <detaileddescription>
<para>When this function returns with a status code indicating success, the session is running. Use <ref refid="a00076_1gaba31aafc42478ea8991f16361586a96e" kindref="member">sr_session_stopped_callback_set()</ref> to receive notification upon completion, or call <ref refid="a00076_1ga183fd38711238188c9cd798684a867dd" kindref="member">sr_session_run()</ref> to block until the session stops.</para>
<para>Session events will be processed in the context of the current thread. If a thread-default GLib main context has been set, and is not owned by any other thread, it will be used. Otherwise, libsigrok will create its own main context for the current thread.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>session</parametername>
</parameternamelist>
<parameterdescription>
<para>The session to use. Must not be NULL.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>SR_OK</parametername>
</parameternamelist>
<parameterdescription>
<para>Success. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>SR_ERR_ARG</parametername>
</parameternamelist>
<parameterdescription>
<para>Invalid session passed. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>SR_ERR</parametername>
</parameternamelist>
<parameterdescription>
<para>Other error.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>0.4.0 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/libsigrok/proto.h" line="150" column="6" bodyfile="src/session.c" bodystart="753" bodyend="848" declfile="include/libsigrok/proto.h" declline="150" declcolumn="6"/>
        <references refid="a00050_1af94f33f23c5855e3e429bd2ca01e3b95a132553bf1f479756d2590f9fd40bb289" compoundref="a00050" startline="68">SR_ERR</references>
        <references refid="a00050_1af94f33f23c5855e3e429bd2ca01e3b95a214df8baf519bba79a1b48d364be3f20" compoundref="a00050" startline="70">SR_ERR_ARG</references>
      </memberdef>
      <memberdef kind="function" id="a00076_1ga183fd38711238188c9cd798684a867dd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int sr_session_run</definition>
        <argsstring>(struct sr_session *session)</argsstring>
        <name>sr_session_run</name>
        <param>
          <type>struct <ref refid="a00190" kindref="compound">sr_session</ref> *</type>
          <declname>session</declname>
        </param>
        <briefdescription>
<para>Block until the running session stops. </para>
        </briefdescription>
        <detaileddescription>
<para>This is a convenience function which creates a GLib main loop and runs it to process session events until the session stops.</para>
<para>Instead of using this function, applications may run their own GLib main loop, and use <ref refid="a00076_1gaba31aafc42478ea8991f16361586a96e" kindref="member">sr_session_stopped_callback_set()</ref> to receive notification when the session finished running.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>session</parametername>
</parameternamelist>
<parameterdescription>
<para>The session to use. Must not be NULL.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>SR_OK</parametername>
</parameternamelist>
<parameterdescription>
<para>Success. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>SR_ERR_ARG</parametername>
</parameternamelist>
<parameterdescription>
<para>Invalid session passed. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>SR_ERR</parametername>
</parameternamelist>
<parameterdescription>
<para>Other error.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>0.4.0 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/libsigrok/proto.h" line="151" column="6" bodyfile="src/session.c" bodystart="868" bodyend="900" declfile="include/libsigrok/proto.h" declline="151" declcolumn="6"/>
        <references refid="a00050_1af94f33f23c5855e3e429bd2ca01e3b95a132553bf1f479756d2590f9fd40bb289" compoundref="a00050" startline="68">SR_ERR</references>
        <references refid="a00050_1af94f33f23c5855e3e429bd2ca01e3b95a214df8baf519bba79a1b48d364be3f20" compoundref="a00050" startline="70">SR_ERR_ARG</references>
        <references refid="a00050_1af94f33f23c5855e3e429bd2ca01e3b95aa35b06e07345c41f0102c255c9cd0bf1" compoundref="a00050" startline="67">SR_OK</references>
      </memberdef>
      <memberdef kind="function" id="a00076_1ga5d7668d5dc7dce074cc427d847283d93" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int sr_session_stop</definition>
        <argsstring>(struct sr_session *session)</argsstring>
        <name>sr_session_stop</name>
        <param>
          <type>struct <ref refid="a00190" kindref="compound">sr_session</ref> *</type>
          <declname>session</declname>
        </param>
        <briefdescription>
<para>Stop a session. </para>
        </briefdescription>
        <detaileddescription>
<para>This requests the drivers of each device participating in the session to abort the acquisition as soon as possible. Even after this function returns, event processing still continues until all devices have actually stopped.</para>
<para>Use <ref refid="a00076_1gaba31aafc42478ea8991f16361586a96e" kindref="member">sr_session_stopped_callback_set()</ref> to receive notification when the event processing finished.</para>
<para>This function is reentrant. That is, it may be called from a different thread than the one executing the session, as long as it can be ensured that the session object is valid.</para>
<para>If the session is not running, <ref refid="a00076_1ga5d7668d5dc7dce074cc427d847283d93" kindref="member">sr_session_stop()</ref> silently does nothing.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>session</parametername>
</parameternamelist>
<parameterdescription>
<para>The session to use. Must not be NULL.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>SR_OK</parametername>
</parameternamelist>
<parameterdescription>
<para>Success. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>SR_ERR_ARG</parametername>
</parameternamelist>
<parameterdescription>
<para>Invalid session passed.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>0.4.0 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/libsigrok/proto.h" line="152" column="6" bodyfile="src/session.c" bodystart="946" bodyend="972" declfile="include/libsigrok/proto.h" declline="152" declcolumn="6"/>
        <references refid="a00050_1af94f33f23c5855e3e429bd2ca01e3b95a214df8baf519bba79a1b48d364be3f20" compoundref="a00050" startline="70">SR_ERR_ARG</references>
        <references refid="a00050_1af94f33f23c5855e3e429bd2ca01e3b95aa35b06e07345c41f0102c255c9cd0bf1" compoundref="a00050" startline="67">SR_OK</references>
      </memberdef>
      <memberdef kind="function" id="a00076_1ga030b75ad7e5736f34ff1961fe48c7a7e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int sr_session_is_running</definition>
        <argsstring>(struct sr_session *session)</argsstring>
        <name>sr_session_is_running</name>
        <param>
          <type>struct <ref refid="a00190" kindref="compound">sr_session</ref> *</type>
          <declname>session</declname>
        </param>
        <briefdescription>
<para>Return whether the session is currently running. </para>
        </briefdescription>
        <detaileddescription>
<para>Note that this function should be called from the same thread the session was started in.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>session</parametername>
</parameternamelist>
<parameterdescription>
<para>The session to use. Must not be NULL.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>TRUE</parametername>
</parameternamelist>
<parameterdescription>
<para>Session is running. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>FALSE</parametername>
</parameternamelist>
<parameterdescription>
<para>Session is not running. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>SR_ERR_ARG</parametername>
</parameternamelist>
<parameterdescription>
<para>Invalid session passed.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>0.4.0 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/libsigrok/proto.h" line="153" column="6" bodyfile="src/session.c" bodystart="988" bodyend="995" declfile="include/libsigrok/proto.h" declline="153" declcolumn="6"/>
        <references refid="a00050_1af94f33f23c5855e3e429bd2ca01e3b95a214df8baf519bba79a1b48d364be3f20" compoundref="a00050" startline="70">SR_ERR_ARG</references>
      </memberdef>
      <memberdef kind="function" id="a00076_1gaba31aafc42478ea8991f16361586a96e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int sr_session_stopped_callback_set</definition>
        <argsstring>(struct sr_session *session, sr_session_stopped_callback cb, void *cb_data)</argsstring>
        <name>sr_session_stopped_callback_set</name>
        <param>
          <type>struct <ref refid="a00190" kindref="compound">sr_session</ref> *</type>
          <declname>session</declname>
        </param>
        <param>
          <type><ref refid="a00053_1a5a47dcc64d187d380133c1986fce7bfd" kindref="member">sr_session_stopped_callback</ref></type>
          <declname>cb</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>cb_data</declname>
        </param>
        <briefdescription>
<para>Set the callback to be invoked after a session stopped running. </para>
        </briefdescription>
        <detaileddescription>
<para>Install a callback to receive notification when a session run stopped. This can be used to integrate session execution with an existing main loop, without having to block in <ref refid="a00076_1ga183fd38711238188c9cd798684a867dd" kindref="member">sr_session_run()</ref>.</para>
<para>Note that the callback will be invoked in the context of the thread that calls <ref refid="a00076_1gaac6e5af8f883193213a60b21f9f16432" kindref="member">sr_session_start()</ref>.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>session</parametername>
</parameternamelist>
<parameterdescription>
<para>The session to use. Must not be NULL. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cb</parametername>
</parameternamelist>
<parameterdescription>
<para>The callback to invoke on session stop. May be NULL to unset. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cb_data</parametername>
</parameternamelist>
<parameterdescription>
<para>User data pointer to be passed to the callback.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>SR_OK</parametername>
</parameternamelist>
<parameterdescription>
<para>Success. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>SR_ERR_ARG</parametername>
</parameternamelist>
<parameterdescription>
<para>Invalid session passed.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>0.4.0 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/libsigrok/proto.h" line="154" column="6" bodyfile="src/session.c" bodystart="1016" bodyend="1027" declfile="include/libsigrok/proto.h" declline="154" declcolumn="6"/>
        <references refid="a00050_1af94f33f23c5855e3e429bd2ca01e3b95a214df8baf519bba79a1b48d364be3f20" compoundref="a00050" startline="70">SR_ERR_ARG</references>
        <references refid="a00050_1af94f33f23c5855e3e429bd2ca01e3b95aa35b06e07345c41f0102c255c9cd0bf1" compoundref="a00050" startline="67">SR_OK</references>
      </memberdef>
      <memberdef kind="function" id="a00076_1gaf484c0abf0aed79a5de4dfb985246680" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int sr_packet_copy</definition>
        <argsstring>(const struct sr_datafeed_packet *packet, struct sr_datafeed_packet **copy)</argsstring>
        <name>sr_packet_copy</name>
        <param>
          <type>const struct <ref refid="a00122" kindref="compound">sr_datafeed_packet</ref> *</type>
          <declname>packet</declname>
        </param>
        <param>
          <type>struct <ref refid="a00122" kindref="compound">sr_datafeed_packet</ref> **</type>
          <declname>copy</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/libsigrok/proto.h" line="157" column="6" bodyfile="src/session.c" bodystart="1490" bodyend="1559" declfile="include/libsigrok/proto.h" declline="157" declcolumn="6"/>
        <references refid="a00130_1affa2de59760870fb0def08a0708206bc" compoundref="a00050" startline="506">sr_datafeed_meta::config</references>
        <references refid="a00122_1a71e93b70f24a5856205569cba463623c" compoundref="a00050" startline="495">sr_datafeed_packet::payload</references>
        <references refid="a00050_1acb492d2b26747a2155cb1c8f251727b0a8f1233d22d019a41c6eade61a6716f3c" compoundref="a00050" startline="165">SR_DF_END</references>
        <references refid="a00050_1acb492d2b26747a2155cb1c8f251727b0a86dc970c65e25bccfb8932a3a3afbdcd" compoundref="a00050" startline="163">SR_DF_HEADER</references>
        <references refid="a00050_1acb492d2b26747a2155cb1c8f251727b0a7a7b1d8c7d1cc99a3b7ef36d32dc855c" compoundref="a00050" startline="167">SR_DF_META</references>
        <references refid="a00050_1acb492d2b26747a2155cb1c8f251727b0aa24f5acec3f4da3abb93a76c85efa53e" compoundref="a00050" startline="169">SR_DF_TRIGGER</references>
        <references refid="a00122_1a1ad7f2dacc022262d942eeccf5d602f8" compoundref="a00050" startline="494">sr_datafeed_packet::type</references>
      </memberdef>
      <memberdef kind="function" id="a00076_1gacefe885be96f97d263ccd2b44ddac7bc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void sr_packet_free</definition>
        <argsstring>(struct sr_datafeed_packet *packet)</argsstring>
        <name>sr_packet_free</name>
        <param>
          <type>struct <ref refid="a00122" kindref="compound">sr_datafeed_packet</ref> *</type>
          <declname>packet</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/libsigrok/proto.h" line="159" column="7" bodyfile="src/session.c" bodystart="1561" bodyend="1606" declfile="include/libsigrok/proto.h" declline="159" declcolumn="7"/>
        <references refid="a00146_1aa94e9989cfd57941a7867daa98076498" compoundref="a00050" startline="545">sr_analog_meaning::channels</references>
        <references refid="a00130_1affa2de59760870fb0def08a0708206bc" compoundref="a00050" startline="506">sr_datafeed_meta::config</references>
        <references refid="a00134_1a66994faadfe017216bb900939349cfba" compoundref="a00050" startline="513">sr_datafeed_logic::data</references>
        <references refid="a00138_1a5c4aca13deba4509ec718b04f825fe10" compoundref="a00050" startline="518">sr_datafeed_analog::data</references>
        <references refid="a00170_1a3cc5d7e7c4929f066af7817943c4f367" compoundref="a00050" startline="644">sr_config::data</references>
        <references refid="a00138_1ad570779bcec5a0800815112655031fd5" compoundref="a00050" startline="520">sr_datafeed_analog::encoding</references>
        <references refid="a00138_1a9e97bc2f38a677065f11d7ec4ade7644" compoundref="a00050" startline="521">sr_datafeed_analog::meaning</references>
        <references refid="a00122_1a71e93b70f24a5856205569cba463623c" compoundref="a00050" startline="495">sr_datafeed_packet::payload</references>
        <references refid="a00138_1affc68d81d02c38c1528ab666a4a7cb1a" compoundref="a00050" startline="522">sr_datafeed_analog::spec</references>
        <references refid="a00050_1acb492d2b26747a2155cb1c8f251727b0ac2ee6953a14f91d2980418d781d4d066" compoundref="a00050" startline="177">SR_DF_ANALOG</references>
        <references refid="a00050_1acb492d2b26747a2155cb1c8f251727b0a8f1233d22d019a41c6eade61a6716f3c" compoundref="a00050" startline="165">SR_DF_END</references>
        <references refid="a00050_1acb492d2b26747a2155cb1c8f251727b0a86dc970c65e25bccfb8932a3a3afbdcd" compoundref="a00050" startline="163">SR_DF_HEADER</references>
        <references refid="a00050_1acb492d2b26747a2155cb1c8f251727b0a2a1bd93aafd5d494c0f8af89ab4f392c" compoundref="a00050" startline="171">SR_DF_LOGIC</references>
        <references refid="a00050_1acb492d2b26747a2155cb1c8f251727b0a7a7b1d8c7d1cc99a3b7ef36d32dc855c" compoundref="a00050" startline="167">SR_DF_META</references>
        <references refid="a00050_1acb492d2b26747a2155cb1c8f251727b0aa24f5acec3f4da3abb93a76c85efa53e" compoundref="a00050" startline="169">SR_DF_TRIGGER</references>
        <references refid="a00122_1a1ad7f2dacc022262d942eeccf5d602f8" compoundref="a00050" startline="494">sr_datafeed_packet::type</references>
      </memberdef>
      <memberdef kind="function" id="a00080_1ga8741998692209adfd4e352e56a57b114" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const struct sr_input_module **</type>
        <definition>const struct sr_input_module** sr_input_list</definition>
        <argsstring>(void)</argsstring>
        <name>sr_input_list</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Returns a NULL-terminated list of all available input modules. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="since"><para>0.4.0 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/libsigrok/proto.h" line="163" column="29" bodyfile="src/input/input.c" bodystart="97" bodyend="100" declfile="include/libsigrok/proto.h" declline="163" declcolumn="29"/>
      </memberdef>
      <memberdef kind="function" id="a00080_1ga072925b562704cb510449f2fee55f899" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const char *</type>
        <definition>const char* sr_input_id_get</definition>
        <argsstring>(const struct sr_input_module *imod)</argsstring>
        <name>sr_input_id_get</name>
        <param>
          <type>const struct sr_input_module *</type>
          <declname>imod</declname>
        </param>
        <briefdescription>
<para>Returns the specified input module&apos;s ID. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="since"><para>0.4.0 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/libsigrok/proto.h" line="164" column="13" bodyfile="src/input/input.c" bodystart="107" bodyend="115" declfile="include/libsigrok/proto.h" declline="164" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="a00080_1ga3d106248a419623aa9a1fd5e37b2e8c5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const char *</type>
        <definition>const char* sr_input_name_get</definition>
        <argsstring>(const struct sr_input_module *imod)</argsstring>
        <name>sr_input_name_get</name>
        <param>
          <type>const struct sr_input_module *</type>
          <declname>imod</declname>
        </param>
        <briefdescription>
<para>Returns the specified input module&apos;s name. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="since"><para>0.4.0 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/libsigrok/proto.h" line="165" column="13" bodyfile="src/input/input.c" bodystart="122" bodyend="130" declfile="include/libsigrok/proto.h" declline="165" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="a00080_1ga622935496493c2023a4563345a4c5c24" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const char *</type>
        <definition>const char* sr_input_description_get</definition>
        <argsstring>(const struct sr_input_module *imod)</argsstring>
        <name>sr_input_description_get</name>
        <param>
          <type>const struct sr_input_module *</type>
          <declname>imod</declname>
        </param>
        <briefdescription>
<para>Returns the specified input module&apos;s description. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="since"><para>0.4.0 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/libsigrok/proto.h" line="166" column="13" bodyfile="src/input/input.c" bodystart="137" bodyend="145" declfile="include/libsigrok/proto.h" declline="166" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="a00080_1gadd755e2266d3c19536add2bda2cdb2cc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const char *const  *</type>
        <definition>const char* const* sr_input_extensions_get</definition>
        <argsstring>(const struct sr_input_module *imod)</argsstring>
        <name>sr_input_extensions_get</name>
        <param>
          <type>const struct sr_input_module *</type>
          <declname>imod</declname>
        </param>
        <briefdescription>
<para>Returns the specified input module&apos;s file extensions typical for the file format, as a NULL terminated array, or returns a NULL pointer if there is no preferred extension. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>these are a suggestions only.</para>
</simplesect>
<simplesect kind="since"><para>0.4.0 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/libsigrok/proto.h" line="167" column="19" bodyfile="src/input/input.c" bodystart="155" bodyend="164" declfile="include/libsigrok/proto.h" declline="167" declcolumn="19"/>
      </memberdef>
      <memberdef kind="function" id="a00080_1gab57b823af6c177edf93dab2d96299f8d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const struct sr_input_module *</type>
        <definition>const struct sr_input_module* sr_input_find</definition>
        <argsstring>(char *id)</argsstring>
        <name>sr_input_find</name>
        <param>
          <type>char *</type>
          <declname>id</declname>
        </param>
        <briefdescription>
<para>Return the input module with the specified ID, or NULL if no module with that id is found. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="since"><para>0.4.0 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/libsigrok/proto.h" line="169" column="29" bodyfile="src/input/input.c" bodystart="172" bodyend="182" declfile="include/libsigrok/proto.h" declline="169" declcolumn="29"/>
      </memberdef>
      <memberdef kind="function" id="a00080_1ga947b91ce69fc64cef5b4e72b3ddf4c5b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const struct <ref refid="a00154" kindref="compound">sr_option</ref> **</type>
        <definition>const struct sr_option** sr_input_options_get</definition>
        <argsstring>(const struct sr_input_module *imod)</argsstring>
        <name>sr_input_options_get</name>
        <param>
          <type>const struct sr_input_module *</type>
          <declname>imod</declname>
        </param>
        <briefdescription>
<para>Returns a NULL-terminated array of struct <ref refid="a00154" kindref="compound">sr_option</ref>, or NULL if the module takes no options. </para>
        </briefdescription>
        <detaileddescription>
<para>Each call to this function must be followed by a call to <ref refid="a00080_1gae7bccebee91a6991a65018a68b68c264" kindref="member">sr_input_options_free()</ref>.</para>
<para><simplesect kind="since"><para>0.4.0 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/libsigrok/proto.h" line="170" column="23" bodyfile="src/input/input.c" bodystart="193" bodyend="212" declfile="include/libsigrok/proto.h" declline="170" declcolumn="23"/>
        <references refid="a00154_1afada45d978757a68c202595ce6ceb8b7" compoundref="a00050" startline="561">sr_option::id</references>
      </memberdef>
      <memberdef kind="function" id="a00080_1gae7bccebee91a6991a65018a68b68c264" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void sr_input_options_free</definition>
        <argsstring>(const struct sr_option **options)</argsstring>
        <name>sr_input_options_free</name>
        <param>
          <type>const struct <ref refid="a00154" kindref="compound">sr_option</ref> **</type>
          <declname>options</declname>
        </param>
        <briefdescription>
<para>After a call to <ref refid="a00080_1ga947b91ce69fc64cef5b4e72b3ddf4c5b" kindref="member">sr_input_options_get()</ref>, this function cleans up all resources returned by that call. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="since"><para>0.4.0 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/libsigrok/proto.h" line="171" column="7" bodyfile="src/input/input.c" bodystart="220" bodyend="239" declfile="include/libsigrok/proto.h" declline="171" declcolumn="7"/>
        <references refid="a00154_1a9cd94aff6f0b88deb90de546009ec62d" compoundref="a00050" startline="567">sr_option::def</references>
        <references refid="a00154_1a08fc98c220b8e4230c13ca58e85402c2" compoundref="a00050" startline="569">sr_option::values</references>
      </memberdef>
      <memberdef kind="function" id="a00080_1ga555801748623b935b60be3e662f9ea36" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>struct sr_input *</type>
        <definition>struct sr_input* sr_input_new</definition>
        <argsstring>(const struct sr_input_module *imod, GHashTable *options)</argsstring>
        <name>sr_input_new</name>
        <param>
          <type>const struct sr_input_module *</type>
          <declname>imod</declname>
        </param>
        <param>
          <type>GHashTable *</type>
          <declname>options</declname>
        </param>
        <briefdescription>
<para>Create a new input instance using the specified input module. </para>
        </briefdescription>
        <detaileddescription>
<para>This function is used when a client wants to use a specific input module to parse a stream. No effort is made to identify the format.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>imod</parametername>
</parameternamelist>
<parameterdescription>
<para>The input module to use. Must not be NULL. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>options</parametername>
</parameternamelist>
<parameterdescription>
<para>GHashTable consisting of keys corresponding with the module options <computeroutput>id</computeroutput> field. The values should be GVariant pointers with sunk references, of the same GVariantType as the option&apos;s default value.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>0.4.0 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/libsigrok/proto.h" line="172" column="16" bodyfile="src/input/input.c" bodystart="255" bodyend="319" declfile="include/libsigrok/proto.h" declline="172" declcolumn="16"/>
        <references refid="a00154_1a9cd94aff6f0b88deb90de546009ec62d" compoundref="a00050" startline="567">sr_option::def</references>
        <references refid="a00154_1afada45d978757a68c202595ce6ceb8b7" compoundref="a00050" startline="561">sr_option::id</references>
        <references refid="a00050_1af94f33f23c5855e3e429bd2ca01e3b95aa35b06e07345c41f0102c255c9cd0bf1" compoundref="a00050" startline="67">SR_OK</references>
      </memberdef>
      <memberdef kind="function" id="a00080_1ga3d226bd14eb70973129c736e24ec905a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int sr_input_scan_buffer</definition>
        <argsstring>(GString *buf, const struct sr_input **in)</argsstring>
        <name>sr_input_scan_buffer</name>
        <param>
          <type>GString *</type>
          <declname>buf</declname>
        </param>
        <param>
          <type>const struct sr_input **</type>
          <declname>in</declname>
        </param>
        <briefdescription>
<para>Try to find an input module that can parse the given buffer. </para>
        </briefdescription>
        <detaileddescription>
<para>The buffer must contain enough of the beginning of the file for the input modules to find a match. This is format-dependent. When magic strings get checked, 128 bytes normally could be enough. Note that some formats try to parse larger header sections, and benefit from seeing a larger scope.</para>
<para>If an input module is found, an instance is created into *in. Otherwise, *in contains NULL. When multiple input moduless claim support for the format, the one with highest confidence takes precedence. Applications will see at most one input module spec.</para>
<para>If an instance is created, it has the given buffer used for scanning already submitted to it, to be processed before more data is sent. This allows a frontend to submit an initial chunk of a non-seekable stream, such as stdin, without having to keep it around and submit it again later. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/libsigrok/proto.h" line="174" column="6" bodyfile="src/input/input.c" bodystart="364" bodyend="431" declfile="include/libsigrok/proto.h" declline="174" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="a00080_1ga57905453bc7b85d23e80862afb75e4d4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int sr_input_scan_file</definition>
        <argsstring>(const char *filename, const struct sr_input **in)</argsstring>
        <name>sr_input_scan_file</name>
        <param>
          <type>const char *</type>
          <declname>filename</declname>
        </param>
        <param>
          <type>const struct sr_input **</type>
          <declname>in</declname>
        </param>
        <briefdescription>
<para>Try to find an input module that can parse the given file. </para>
        </briefdescription>
        <detaileddescription>
<para>If an input module is found, an instance is created into *in. Otherwise, *in contains NULL. When multiple input moduless claim support for the format, the one with highest confidence takes precedence. Applications will see at most one input module spec. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/libsigrok/proto.h" line="175" column="6" bodyfile="src/input/input.c" bodystart="442" bodyend="537" declfile="include/libsigrok/proto.h" declline="175" declcolumn="6"/>
        <references refid="a00050_1af94f33f23c5855e3e429bd2ca01e3b95a132553bf1f479756d2590f9fd40bb289" compoundref="a00050" startline="68">SR_ERR</references>
        <references refid="a00050_1af94f33f23c5855e3e429bd2ca01e3b95a214df8baf519bba79a1b48d364be3f20" compoundref="a00050" startline="70">SR_ERR_ARG</references>
      </memberdef>
      <memberdef kind="function" id="a00080_1ga267353360cd2dfd9d4783a192de2ee09" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const struct sr_input_module *</type>
        <definition>const struct sr_input_module* sr_input_module_get</definition>
        <argsstring>(const struct sr_input *in)</argsstring>
        <name>sr_input_module_get</name>
        <param>
          <type>const struct sr_input *</type>
          <declname>in</declname>
        </param>
        <briefdescription>
<para>Return the input instance&apos;s module &quot;class&quot;. </para>
        </briefdescription>
        <detaileddescription>
<para>This can be used to find out which input module handles a specific input file. This is especially useful when an application did not create the input stream by specifying an input module, but instead some shortcut or convenience wrapper did.</para>
<para><simplesect kind="since"><para>0.6.0 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/libsigrok/proto.h" line="176" column="29" bodyfile="src/input/input.c" bodystart="547" bodyend="553" declfile="include/libsigrok/proto.h" declline="176" declcolumn="29"/>
      </memberdef>
      <memberdef kind="function" id="a00080_1gad6021700cdb73e4c843c16f88f75beed" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>struct sr_dev_inst *</type>
        <definition>struct sr_dev_inst* sr_input_dev_inst_get</definition>
        <argsstring>(const struct sr_input *in)</argsstring>
        <name>sr_input_dev_inst_get</name>
        <param>
          <type>const struct sr_input *</type>
          <declname>in</declname>
        </param>
        <briefdescription>
<para>Return the input instance&apos;s (virtual) device instance. </para>
        </briefdescription>
        <detaileddescription>
<para>This can be used to find out the number of channels and other information.</para>
<para>If the device instance has not yet been fully populated by the input module, NULL is returned. This indicates the module needs more data to identify the number of channels and so on.</para>
<para><simplesect kind="since"><para>0.4.0 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/libsigrok/proto.h" line="177" column="19" bodyfile="src/input/input.c" bodystart="565" bodyend="571" declfile="include/libsigrok/proto.h" declline="177" declcolumn="19"/>
      </memberdef>
      <memberdef kind="function" id="a00080_1gada8138722494a8b7665749f5b3297805" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int sr_input_send</definition>
        <argsstring>(const struct sr_input *in, GString *buf)</argsstring>
        <name>sr_input_send</name>
        <param>
          <type>const struct sr_input *</type>
          <declname>in</declname>
        </param>
        <param>
          <type>GString *</type>
          <declname>buf</declname>
        </param>
        <briefdescription>
<para>Send data to the specified input instance. </para>
        </briefdescription>
        <detaileddescription>
<para>When an input module instance is created with <ref refid="a00080_1ga555801748623b935b60be3e662f9ea36" kindref="member">sr_input_new()</ref>, this function is used to feed data to the instance.</para>
<para>As enough data gets fed into this function to completely populate the device instance associated with this input instance, this is guaranteed to return the moment it&apos;s ready. This gives the caller the chance to examine the device instance, attach session callbacks and so on.</para>
<para><simplesect kind="since"><para>0.4.0 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/libsigrok/proto.h" line="178" column="6" bodyfile="src/input/input.c" bodystart="587" bodyend="594" declfile="include/libsigrok/proto.h" declline="178" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="a00080_1gaaa887145d0ff9ce8aea3b9d9c4b5c0ea" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int sr_input_end</definition>
        <argsstring>(const struct sr_input *in)</argsstring>
        <name>sr_input_end</name>
        <param>
          <type>const struct sr_input *</type>
          <declname>in</declname>
        </param>
        <briefdescription>
<para>Signal the input module no more data will come. </para>
        </briefdescription>
        <detaileddescription>
<para>This will cause the module to process any data it may have buffered. The SR_DF_END packet will also typically be sent at this time.</para>
<para><simplesect kind="since"><para>0.4.0 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/libsigrok/proto.h" line="179" column="6" bodyfile="src/input/input.c" bodystart="604" bodyend="608" declfile="include/libsigrok/proto.h" declline="179" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="a00080_1gaedab9768c2587f4f14e456c25f55193d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int sr_input_reset</definition>
        <argsstring>(const struct sr_input *in)</argsstring>
        <name>sr_input_reset</name>
        <param>
          <type>const struct sr_input *</type>
          <declname>in</declname>
          <defname>in_ro</defname>
        </param>
        <briefdescription>
<para>Reset the input module&apos;s input handling structures. </para>
        </briefdescription>
        <detaileddescription>
<para>Causes the input module to reset its internal state so that we can re-send the input data from the beginning without having to re-create the entire input module.</para>
<para><simplesect kind="since"><para>0.5.0 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/libsigrok/proto.h" line="180" column="6" bodyfile="src/input/input.c" bodystart="619" bodyend="662" declfile="include/libsigrok/proto.h" declline="180" declcolumn="6"/>
        <references refid="a00050_1af94f33f23c5855e3e429bd2ca01e3b95a214df8baf519bba79a1b48d364be3f20" compoundref="a00050" startline="70">SR_ERR_ARG</references>
        <references refid="a00050_1af94f33f23c5855e3e429bd2ca01e3b95aa35b06e07345c41f0102c255c9cd0bf1" compoundref="a00050" startline="67">SR_OK</references>
      </memberdef>
      <memberdef kind="function" id="a00080_1gaa1d7eb09c7366fe32cc90191d08292eb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void sr_input_free</definition>
        <argsstring>(const struct sr_input *in)</argsstring>
        <name>sr_input_free</name>
        <param>
          <type>const struct sr_input *</type>
          <declname>in</declname>
        </param>
        <briefdescription>
<para>Free the specified input instance and all associated resources. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="since"><para>0.4.0 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/libsigrok/proto.h" line="181" column="7" bodyfile="src/input/input.c" bodystart="669" bodyend="696" declfile="include/libsigrok/proto.h" declline="181" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="a00081_1gaef157a70847b5cd4e5db3f706f97bb7a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const struct sr_output_module **</type>
        <definition>const struct sr_output_module** sr_output_list</definition>
        <argsstring>(void)</argsstring>
        <name>sr_output_list</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Returns a NULL-terminated list of all available output modules. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="since"><para>0.4.0 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/libsigrok/proto.h" line="185" column="30" bodyfile="src/output/output.c" bodystart="93" bodyend="96" declfile="include/libsigrok/proto.h" declline="185" declcolumn="30"/>
      </memberdef>
      <memberdef kind="function" id="a00081_1gadaaeaa73ee938484c31094a05fc5cea6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const char *</type>
        <definition>const char* sr_output_id_get</definition>
        <argsstring>(const struct sr_output_module *omod)</argsstring>
        <name>sr_output_id_get</name>
        <param>
          <type>const struct sr_output_module *</type>
          <declname>omod</declname>
        </param>
        <briefdescription>
<para>Returns the specified output module&apos;s ID. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="since"><para>0.4.0 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/libsigrok/proto.h" line="186" column="13" bodyfile="src/output/output.c" bodystart="103" bodyend="111" declfile="include/libsigrok/proto.h" declline="186" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="a00081_1gaf1764b518bd10533a686b3a50a849aed" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const char *</type>
        <definition>const char* sr_output_name_get</definition>
        <argsstring>(const struct sr_output_module *omod)</argsstring>
        <name>sr_output_name_get</name>
        <param>
          <type>const struct sr_output_module *</type>
          <declname>omod</declname>
        </param>
        <briefdescription>
<para>Returns the specified output module&apos;s name. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="since"><para>0.4.0 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/libsigrok/proto.h" line="187" column="13" bodyfile="src/output/output.c" bodystart="118" bodyend="126" declfile="include/libsigrok/proto.h" declline="187" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="a00081_1gaf6538c0a75f51cba0c704cca50d2d401" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const char *</type>
        <definition>const char* sr_output_description_get</definition>
        <argsstring>(const struct sr_output_module *omod)</argsstring>
        <name>sr_output_description_get</name>
        <param>
          <type>const struct sr_output_module *</type>
          <declname>omod</declname>
        </param>
        <briefdescription>
<para>Returns the specified output module&apos;s description. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="since"><para>0.4.0 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/libsigrok/proto.h" line="188" column="13" bodyfile="src/output/output.c" bodystart="133" bodyend="141" declfile="include/libsigrok/proto.h" declline="188" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="a00081_1gab1b775eab6f493462ad96d83cb5eb950" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const char *const  *</type>
        <definition>const char* const* sr_output_extensions_get</definition>
        <argsstring>(const struct sr_output_module *omod)</argsstring>
        <name>sr_output_extensions_get</name>
        <param>
          <type>const struct sr_output_module *</type>
          <declname>omod</declname>
        </param>
        <briefdescription>
<para>Returns the specified output module&apos;s file extensions typical for the file format, as a NULL terminated array, or returns a NULL pointer if there is no preferred extension. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>these are a suggestions only.</para>
</simplesect>
<simplesect kind="since"><para>0.4.0 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/libsigrok/proto.h" line="189" column="19" bodyfile="src/output/output.c" bodystart="151" bodyend="160" declfile="include/libsigrok/proto.h" declline="189" declcolumn="19"/>
      </memberdef>
      <memberdef kind="function" id="a00081_1ga4ebad67fb70ac52f736d21190637a128" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const struct sr_output_module *</type>
        <definition>const struct sr_output_module* sr_output_find</definition>
        <argsstring>(char *id)</argsstring>
        <name>sr_output_find</name>
        <param>
          <type>char *</type>
          <declname>id</declname>
        </param>
        <briefdescription>
<para>Return the output module with the specified ID, or NULL if no module with that id is found. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="since"><para>0.4.0 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/libsigrok/proto.h" line="191" column="30" bodyfile="src/output/output.c" bodystart="180" bodyend="190" declfile="include/libsigrok/proto.h" declline="191" declcolumn="30"/>
      </memberdef>
      <memberdef kind="function" id="a00081_1gaafc116fd45e035ab626da3a155a34125" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const struct <ref refid="a00154" kindref="compound">sr_option</ref> **</type>
        <definition>const struct sr_option** sr_output_options_get</definition>
        <argsstring>(const struct sr_output_module *omod)</argsstring>
        <name>sr_output_options_get</name>
        <param>
          <type>const struct sr_output_module *</type>
          <declname>omod</declname>
        </param>
        <briefdescription>
<para>Returns a NULL-terminated array of struct <ref refid="a00154" kindref="compound">sr_option</ref>, or NULL if the module takes no options. </para>
        </briefdescription>
        <detaileddescription>
<para>Each call to this function must be followed by a call to <ref refid="a00081_1ga5a8ecfb107a90d4d9fad92bf80b650cc" kindref="member">sr_output_options_free()</ref>.</para>
<para><simplesect kind="since"><para>0.4.0 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/libsigrok/proto.h" line="192" column="23" bodyfile="src/output/output.c" bodystart="201" bodyend="220" declfile="include/libsigrok/proto.h" declline="192" declcolumn="23"/>
        <references refid="a00154_1afada45d978757a68c202595ce6ceb8b7" compoundref="a00050" startline="561">sr_option::id</references>
      </memberdef>
      <memberdef kind="function" id="a00081_1ga5a8ecfb107a90d4d9fad92bf80b650cc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void sr_output_options_free</definition>
        <argsstring>(const struct sr_option **opts)</argsstring>
        <name>sr_output_options_free</name>
        <param>
          <type>const struct <ref refid="a00154" kindref="compound">sr_option</ref> **</type>
          <declname>opts</declname>
          <defname>options</defname>
        </param>
        <briefdescription>
<para>After a call to <ref refid="a00081_1gaafc116fd45e035ab626da3a155a34125" kindref="member">sr_output_options_get()</ref>, this function cleans up all resources returned by that call. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="since"><para>0.4.0 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/libsigrok/proto.h" line="193" column="7" bodyfile="src/output/output.c" bodystart="228" bodyend="247" declfile="include/libsigrok/proto.h" declline="193" declcolumn="7"/>
        <references refid="a00154_1a9cd94aff6f0b88deb90de546009ec62d" compoundref="a00050" startline="567">sr_option::def</references>
        <references refid="a00154_1a08fc98c220b8e4230c13ca58e85402c2" compoundref="a00050" startline="569">sr_option::values</references>
      </memberdef>
      <memberdef kind="function" id="a00081_1gac3d851b86178014ba38725c882df310c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const struct sr_output *</type>
        <definition>const struct sr_output* sr_output_new</definition>
        <argsstring>(const struct sr_output_module *omod, GHashTable *params, const struct sr_dev_inst *sdi, const char *filename)</argsstring>
        <name>sr_output_new</name>
        <param>
          <type>const struct sr_output_module *</type>
          <declname>omod</declname>
        </param>
        <param>
          <type>GHashTable *</type>
          <declname>params</declname>
          <defname>options</defname>
        </param>
        <param>
          <type>const struct sr_dev_inst *</type>
          <declname>sdi</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>filename</declname>
        </param>
        <briefdescription>
<para>Create a new output instance using the specified output module. </para>
        </briefdescription>
        <detaileddescription>
<para><computeroutput>options</computeroutput> is a *HashTable with the keys corresponding with the module options&apos; <computeroutput>id</computeroutput> field. The values should be GVariant pointers with sunk * references, of the same GVariantType as the option&apos;s default value.</para>
<para>The sr_dev_inst passed in can be used by the instance to determine channel names, samplerate, and so on.</para>
<para><simplesect kind="since"><para>0.4.0 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/libsigrok/proto.h" line="194" column="23" bodyfile="src/output/output.c" bodystart="262" bodyend="326" declfile="include/libsigrok/proto.h" declline="194" declcolumn="23"/>
        <references refid="a00154_1a9cd94aff6f0b88deb90de546009ec62d" compoundref="a00050" startline="567">sr_option::def</references>
        <references refid="a00154_1afada45d978757a68c202595ce6ceb8b7" compoundref="a00050" startline="561">sr_option::id</references>
        <references refid="a00050_1af94f33f23c5855e3e429bd2ca01e3b95aa35b06e07345c41f0102c255c9cd0bf1" compoundref="a00050" startline="67">SR_OK</references>
      </memberdef>
      <memberdef kind="function" id="a00081_1ga6ebef60903110bb03be4c3e3783ac9b9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>gboolean</type>
        <definition>gboolean sr_output_test_flag</definition>
        <argsstring>(const struct sr_output_module *omod, uint64_t flag)</argsstring>
        <name>sr_output_test_flag</name>
        <param>
          <type>const struct sr_output_module *</type>
          <declname>omod</declname>
        </param>
        <param>
          <type>uint64_t</type>
          <declname>flag</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/libsigrok/proto.h" line="197" column="11" bodyfile="src/output/output.c" bodystart="168" bodyend="172" declfile="include/libsigrok/proto.h" declline="197" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="a00081_1gacb03f8a92c738c52b37d019fc893aeac" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int sr_output_send</definition>
        <argsstring>(const struct sr_output *o, const struct sr_datafeed_packet *packet, GString **out)</argsstring>
        <name>sr_output_send</name>
        <param>
          <type>const struct sr_output *</type>
          <declname>o</declname>
        </param>
        <param>
          <type>const struct <ref refid="a00122" kindref="compound">sr_datafeed_packet</ref> *</type>
          <declname>packet</declname>
        </param>
        <param>
          <type>GString **</type>
          <declname>out</declname>
        </param>
        <briefdescription>
<para>Send a packet to the specified output instance. </para>
        </briefdescription>
        <detaileddescription>
<para>The instance&apos;s output is returned as a newly allocated GString, which must be freed by the caller.</para>
<para><simplesect kind="since"><para>0.4.0 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/libsigrok/proto.h" line="199" column="6" bodyfile="src/output/output.c" bodystart="336" bodyend="340" declfile="include/libsigrok/proto.h" declline="199" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="a00081_1ga45328449dcc9cb8804c2635ebf558182" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int sr_output_free</definition>
        <argsstring>(const struct sr_output *o)</argsstring>
        <name>sr_output_free</name>
        <param>
          <type>const struct sr_output *</type>
          <declname>o</declname>
        </param>
        <briefdescription>
<para>Free the specified output instance and all associated resources. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="since"><para>0.4.0 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/libsigrok/proto.h" line="201" column="6" bodyfile="src/output/output.c" bodystart="347" bodyend="361" declfile="include/libsigrok/proto.h" declline="201" declcolumn="6"/>
        <references refid="a00050_1af94f33f23c5855e3e429bd2ca01e3b95a214df8baf519bba79a1b48d364be3f20" compoundref="a00050" startline="70">SR_ERR_ARG</references>
        <references refid="a00050_1af94f33f23c5855e3e429bd2ca01e3b95aa35b06e07345c41f0102c255c9cd0bf1" compoundref="a00050" startline="67">SR_OK</references>
      </memberdef>
      <memberdef kind="function" id="a00082_1ga3d6573f5a163c1c5dde57408d4149e5e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const struct sr_transform_module **</type>
        <definition>const struct sr_transform_module** sr_transform_list</definition>
        <argsstring>(void)</argsstring>
        <name>sr_transform_list</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Returns a NULL-terminated list of all available transform modules. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="since"><para>0.4.0 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/libsigrok/proto.h" line="205" column="33" bodyfile="src/transform/transform.c" bodystart="62" bodyend="65" declfile="include/libsigrok/proto.h" declline="205" declcolumn="33"/>
      </memberdef>
      <memberdef kind="function" id="a00082_1ga19a02c79476c3b4d08946fe9ca1d2a6b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const char *</type>
        <definition>const char* sr_transform_id_get</definition>
        <argsstring>(const struct sr_transform_module *tmod)</argsstring>
        <name>sr_transform_id_get</name>
        <param>
          <type>const struct sr_transform_module *</type>
          <declname>tmod</declname>
        </param>
        <briefdescription>
<para>Returns the specified transform module&apos;s ID. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="since"><para>0.4.0 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/libsigrok/proto.h" line="206" column="13" bodyfile="src/transform/transform.c" bodystart="72" bodyend="80" declfile="include/libsigrok/proto.h" declline="206" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="a00082_1ga43638b933fdb0cff24e9b4c3ae60fa06" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const char *</type>
        <definition>const char* sr_transform_name_get</definition>
        <argsstring>(const struct sr_transform_module *tmod)</argsstring>
        <name>sr_transform_name_get</name>
        <param>
          <type>const struct sr_transform_module *</type>
          <declname>tmod</declname>
        </param>
        <briefdescription>
<para>Returns the specified transform module&apos;s name. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="since"><para>0.4.0 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/libsigrok/proto.h" line="207" column="13" bodyfile="src/transform/transform.c" bodystart="87" bodyend="95" declfile="include/libsigrok/proto.h" declline="207" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="a00082_1ga213ab97732cb4a1aee5f18df17c60434" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const char *</type>
        <definition>const char* sr_transform_description_get</definition>
        <argsstring>(const struct sr_transform_module *tmod)</argsstring>
        <name>sr_transform_description_get</name>
        <param>
          <type>const struct sr_transform_module *</type>
          <declname>tmod</declname>
        </param>
        <briefdescription>
<para>Returns the specified transform module&apos;s description. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="since"><para>0.4.0 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/libsigrok/proto.h" line="208" column="13" bodyfile="src/transform/transform.c" bodystart="102" bodyend="110" declfile="include/libsigrok/proto.h" declline="208" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="a00082_1ga0e58f96b92dd90fef598491c418a4e33" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const struct sr_transform_module *</type>
        <definition>const struct sr_transform_module* sr_transform_find</definition>
        <argsstring>(const char *id)</argsstring>
        <name>sr_transform_find</name>
        <param>
          <type>const char *</type>
          <declname>id</declname>
        </param>
        <briefdescription>
<para>Return the transform module with the specified ID, or NULL if no module with that ID is found. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="since"><para>0.4.0 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/libsigrok/proto.h" line="209" column="33" bodyfile="src/transform/transform.c" bodystart="118" bodyend="128" declfile="include/libsigrok/proto.h" declline="209" declcolumn="33"/>
      </memberdef>
      <memberdef kind="function" id="a00082_1ga7333904e22a5229921e2e2517a7046c0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const struct <ref refid="a00154" kindref="compound">sr_option</ref> **</type>
        <definition>const struct sr_option** sr_transform_options_get</definition>
        <argsstring>(const struct sr_transform_module *tmod)</argsstring>
        <name>sr_transform_options_get</name>
        <param>
          <type>const struct sr_transform_module *</type>
          <declname>tmod</declname>
        </param>
        <briefdescription>
<para>Returns a NULL-terminated array of struct <ref refid="a00154" kindref="compound">sr_option</ref>, or NULL if the module takes no options. </para>
        </briefdescription>
        <detaileddescription>
<para>Each call to this function must be followed by a call to <ref refid="a00082_1ga14e80f34546c57130e9af030fae2b077" kindref="member">sr_transform_options_free()</ref>.</para>
<para><simplesect kind="since"><para>0.4.0 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/libsigrok/proto.h" line="210" column="23" bodyfile="src/transform/transform.c" bodystart="139" bodyend="158" declfile="include/libsigrok/proto.h" declline="210" declcolumn="23"/>
        <references refid="a00154_1afada45d978757a68c202595ce6ceb8b7" compoundref="a00050" startline="561">sr_option::id</references>
      </memberdef>
      <memberdef kind="function" id="a00082_1ga14e80f34546c57130e9af030fae2b077" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void sr_transform_options_free</definition>
        <argsstring>(const struct sr_option **opts)</argsstring>
        <name>sr_transform_options_free</name>
        <param>
          <type>const struct <ref refid="a00154" kindref="compound">sr_option</ref> **</type>
          <declname>opts</declname>
          <defname>options</defname>
        </param>
        <briefdescription>
<para>After a call to <ref refid="a00082_1ga7333904e22a5229921e2e2517a7046c0" kindref="member">sr_transform_options_get()</ref>, this function cleans up all resources returned by that call. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="since"><para>0.4.0 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/libsigrok/proto.h" line="211" column="7" bodyfile="src/transform/transform.c" bodystart="166" bodyend="185" declfile="include/libsigrok/proto.h" declline="211" declcolumn="7"/>
        <references refid="a00154_1a9cd94aff6f0b88deb90de546009ec62d" compoundref="a00050" startline="567">sr_option::def</references>
        <references refid="a00154_1a08fc98c220b8e4230c13ca58e85402c2" compoundref="a00050" startline="569">sr_option::values</references>
      </memberdef>
      <memberdef kind="function" id="a00082_1gad3e048363e44899d058e7ca1a62f942a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const struct sr_transform *</type>
        <definition>const struct sr_transform* sr_transform_new</definition>
        <argsstring>(const struct sr_transform_module *tmod, GHashTable *params, const struct sr_dev_inst *sdi)</argsstring>
        <name>sr_transform_new</name>
        <param>
          <type>const struct sr_transform_module *</type>
          <declname>tmod</declname>
        </param>
        <param>
          <type>GHashTable *</type>
          <declname>params</declname>
          <defname>options</defname>
        </param>
        <param>
          <type>const struct sr_dev_inst *</type>
          <declname>sdi</declname>
        </param>
        <briefdescription>
<para>Create a new transform instance using the specified transform module. </para>
        </briefdescription>
        <detaileddescription>
<para><computeroutput>options</computeroutput> is a *GHashTable with the keys corresponding with the module options&apos; <computeroutput>id</computeroutput> field. The values should be GVariant pointers with sunk * references, of the same GVariantType as the option&apos;s default value.</para>
<para>The sr_dev_inst passed in can be used by the instance to determine channel names, samplerate, and so on.</para>
<para><simplesect kind="since"><para>0.4.0 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/libsigrok/proto.h" line="212" column="26" bodyfile="src/transform/transform.c" bodystart="200" bodyend="265" declfile="include/libsigrok/proto.h" declline="212" declcolumn="26"/>
        <references refid="a00154_1a9cd94aff6f0b88deb90de546009ec62d" compoundref="a00050" startline="567">sr_option::def</references>
        <references refid="a00154_1afada45d978757a68c202595ce6ceb8b7" compoundref="a00050" startline="561">sr_option::id</references>
        <references refid="a00050_1af94f33f23c5855e3e429bd2ca01e3b95aa35b06e07345c41f0102c255c9cd0bf1" compoundref="a00050" startline="67">SR_OK</references>
      </memberdef>
      <memberdef kind="function" id="a00082_1gac86732ac317991b2b859fde11f5bf9eb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int sr_transform_free</definition>
        <argsstring>(const struct sr_transform *t)</argsstring>
        <name>sr_transform_free</name>
        <param>
          <type>const struct sr_transform *</type>
          <declname>t</declname>
        </param>
        <briefdescription>
<para>Free the specified transform instance and all associated resources. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="since"><para>0.4.0 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/libsigrok/proto.h" line="214" column="6" bodyfile="src/transform/transform.c" bodystart="272" bodyend="285" declfile="include/libsigrok/proto.h" declline="214" declcolumn="6"/>
        <references refid="a00050_1af94f33f23c5855e3e429bd2ca01e3b95a214df8baf519bba79a1b48d364be3f20" compoundref="a00050" startline="70">SR_ERR_ARG</references>
        <references refid="a00050_1af94f33f23c5855e3e429bd2ca01e3b95aa35b06e07345c41f0102c255c9cd0bf1" compoundref="a00050" startline="67">SR_OK</references>
      </memberdef>
      <memberdef kind="function" id="a00078_1ga0276d66ef0c3ced910af1c7799c57895" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>struct <ref refid="a00106" kindref="compound">sr_trigger</ref> *</type>
        <definition>struct sr_trigger* sr_trigger_new</definition>
        <argsstring>(const char *name)</argsstring>
        <name>sr_trigger_new</name>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <briefdescription>
<para>Create a new trigger. </para>
        </briefdescription>
        <detaileddescription>
<para>The caller is responsible to free the trigger (including all stages and matches) using <ref refid="a00078_1ga39e4c8e299f0d246cb36914c8e9d6e7c" kindref="member">sr_trigger_free()</ref> once it is no longer needed.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>The trigger name to use. Can be NULL.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A newly allocated trigger.</para>
</simplesect>
<simplesect kind="since"><para>0.4.0 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/libsigrok/proto.h" line="218" column="18" bodyfile="src/trigger.c" bodystart="54" bodyend="63" declfile="include/libsigrok/proto.h" declline="218" declcolumn="18"/>
        <references refid="a00106_1a1d7ca93d2167ce7b17cf886008d3e8b2" compoundref="a00050" startline="427">sr_trigger::name</references>
      </memberdef>
      <memberdef kind="function" id="a00078_1ga39e4c8e299f0d246cb36914c8e9d6e7c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void sr_trigger_free</definition>
        <argsstring>(struct sr_trigger *trig)</argsstring>
        <name>sr_trigger_free</name>
        <param>
          <type>struct <ref refid="a00106" kindref="compound">sr_trigger</ref> *</type>
          <declname>trig</declname>
        </param>
        <briefdescription>
<para>Free a previously allocated trigger. </para>
        </briefdescription>
        <detaileddescription>
<para>This will also free any trigger stages/matches in this trigger.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>trig</parametername>
</parameternamelist>
<parameterdescription>
<para>The trigger to free. Must not be NULL.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>0.4.0 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/libsigrok/proto.h" line="219" column="7" bodyfile="src/trigger.c" bodystart="74" bodyend="92" declfile="include/libsigrok/proto.h" declline="219" declcolumn="7"/>
        <references refid="a00106_1a1d7ca93d2167ce7b17cf886008d3e8b2" compoundref="a00050" startline="427">sr_trigger::name</references>
        <references refid="a00110_1a223b2622bcefdcf93ab16e9a6008eb69" compoundref="a00050" startline="435">sr_trigger_stage::stage</references>
        <references refid="a00106_1a5d82a6e8a0e748e4a4b5ffac6c473553" compoundref="a00050" startline="429">sr_trigger::stages</references>
      </memberdef>
      <memberdef kind="function" id="a00078_1ga225a5c7467d13ac60798ffd1fbb3750d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>struct <ref refid="a00110" kindref="compound">sr_trigger_stage</ref> *</type>
        <definition>struct sr_trigger_stage* sr_trigger_stage_add</definition>
        <argsstring>(struct sr_trigger *trig)</argsstring>
        <name>sr_trigger_stage_add</name>
        <param>
          <type>struct <ref refid="a00106" kindref="compound">sr_trigger</ref> *</type>
          <declname>trig</declname>
        </param>
        <briefdescription>
<para>Allocate a new trigger stage and add it to the specified trigger. </para>
        </briefdescription>
        <detaileddescription>
<para>The caller is responsible to free the trigger (including all stages and matches) using <ref refid="a00078_1ga39e4c8e299f0d246cb36914c8e9d6e7c" kindref="member">sr_trigger_free()</ref> once it is no longer needed.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>trig</parametername>
</parameternamelist>
<parameterdescription>
<para>The trigger to add a stage to. Must not be NULL.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>NULL</parametername>
</parameternamelist>
<parameterdescription>
<para>An invalid (NULL) trigger was passed into the function. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>other</parametername>
</parameternamelist>
<parameterdescription>
<para>A newly allocated trigger stage (which has also been added to the list of stages of the specified trigger).</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>0.4.0 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/libsigrok/proto.h" line="220" column="24" bodyfile="src/trigger.c" bodystart="108" bodyend="120" declfile="include/libsigrok/proto.h" declline="220" declcolumn="24"/>
        <references refid="a00110_1a223b2622bcefdcf93ab16e9a6008eb69" compoundref="a00050" startline="435">sr_trigger_stage::stage</references>
        <references refid="a00106_1a5d82a6e8a0e748e4a4b5ffac6c473553" compoundref="a00050" startline="429">sr_trigger::stages</references>
      </memberdef>
      <memberdef kind="function" id="a00078_1ga55eeefded4138be23a6989ead396174a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int sr_trigger_match_add</definition>
        <argsstring>(struct sr_trigger_stage *stage, struct sr_channel *ch, int trigger_match, float value)</argsstring>
        <name>sr_trigger_match_add</name>
        <param>
          <type>struct <ref refid="a00110" kindref="compound">sr_trigger_stage</ref> *</type>
          <declname>stage</declname>
        </param>
        <param>
          <type>struct <ref refid="a00162" kindref="compound">sr_channel</ref> *</type>
          <declname>ch</declname>
        </param>
        <param>
          <type>int</type>
          <declname>trigger_match</declname>
        </param>
        <param>
          <type>float</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Allocate a new trigger match and add it to the specified trigger stage. </para>
        </briefdescription>
        <detaileddescription>
<para>The caller is responsible to free the trigger (including all stages and matches) using <ref refid="a00078_1ga39e4c8e299f0d246cb36914c8e9d6e7c" kindref="member">sr_trigger_free()</ref> once it is no longer needed.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>stage</parametername>
</parameternamelist>
<parameterdescription>
<para>The trigger stage to add the match to. Must not be NULL. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ch</parametername>
</parameternamelist>
<parameterdescription>
<para>The channel for this trigger match. Must not be NULL. Must be either of type SR_CHANNEL_LOGIC or SR_CHANNEL_ANALOG. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>trigger_match</parametername>
</parameternamelist>
<parameterdescription>
<para>The type of trigger match. Must be a valid trigger type from enum sr_trigger_matches. The trigger type must be valid for the respective channel type as well. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>Trigger value.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>SR_OK</parametername>
</parameternamelist>
<parameterdescription>
<para>Success. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>SR_ERR_ARG</parametername>
</parameternamelist>
<parameterdescription>
<para>Invalid argument(s) were passed to this functions.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>0.4.0 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/libsigrok/proto.h" line="221" column="6" bodyfile="src/trigger.c" bodystart="141" bodyend="179" declfile="include/libsigrok/proto.h" declline="221" declcolumn="6"/>
        <references refid="a00114_1a29b9a3c4717d54c86b85bc851fb5d4a7" compoundref="a00050" startline="459">sr_trigger_match::match</references>
        <references refid="a00110_1a0664437fbdd904d7f54ccb0c185aebaf" compoundref="a00050" startline="437">sr_trigger_stage::matches</references>
        <references refid="a00050_1abe35ec3609ce0d8618a264cf53a4f68aaeb9f075cd43996644fc5b2cbc76e1edd" compoundref="a00050" startline="609">SR_CHANNEL_ANALOG</references>
        <references refid="a00050_1abe35ec3609ce0d8618a264cf53a4f68aa159812493482f1eb027eb15d981d7290" compoundref="a00050" startline="607">SR_CHANNEL_LOGIC</references>
        <references refid="a00050_1af94f33f23c5855e3e429bd2ca01e3b95a214df8baf519bba79a1b48d364be3f20" compoundref="a00050" startline="70">SR_ERR_ARG</references>
        <references refid="a00050_1af94f33f23c5855e3e429bd2ca01e3b95aa35b06e07345c41f0102c255c9cd0bf1" compoundref="a00050" startline="67">SR_OK</references>
        <references refid="a00050_1a2a05e89c547e9db554ef37e0beb28cd5a0e0939fb271f92e5b51edbb6774dff9f" compoundref="a00050" startline="417">SR_TRIGGER_EDGE</references>
        <references refid="a00050_1a2a05e89c547e9db554ef37e0beb28cd5a93b2e8da68935e0006224a822b792fa7" compoundref="a00050" startline="416">SR_TRIGGER_FALLING</references>
        <references refid="a00050_1a2a05e89c547e9db554ef37e0beb28cd5a3273ef68bdf46a93fd3e397ffd3c8c57" compoundref="a00050" startline="414">SR_TRIGGER_ONE</references>
        <references refid="a00050_1a2a05e89c547e9db554ef37e0beb28cd5a7a9fd2c5653b82548603981eaccdb59c" compoundref="a00050" startline="418">SR_TRIGGER_OVER</references>
        <references refid="a00050_1a2a05e89c547e9db554ef37e0beb28cd5a8d9ad0852406dee7917e3aace4fea388" compoundref="a00050" startline="415">SR_TRIGGER_RISING</references>
        <references refid="a00050_1a2a05e89c547e9db554ef37e0beb28cd5a1f6378e260ed126682371c32ccf5c3dd" compoundref="a00050" startline="419">SR_TRIGGER_UNDER</references>
        <references refid="a00050_1a2a05e89c547e9db554ef37e0beb28cd5a21805c7029c9e88f40ac71a22c006b4f" compoundref="a00050" startline="413">SR_TRIGGER_ZERO</references>
        <references refid="a00162_1ac4725baebd258b88f06dc8df833d7073" compoundref="a00050" startline="620">sr_channel::type</references>
        <references refid="a00114_1a3d7ab6efba1234081400e62088876e1e" compoundref="a00050" startline="462">sr_trigger_match::value</references>
      </memberdef>
      <memberdef kind="function" id="a00075_1gaa663dbbaa19113a8799256024df1dc2c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GSList *</type>
        <definition>GSList* sr_serial_list</definition>
        <argsstring>(const struct sr_dev_driver *driver)</argsstring>
        <name>sr_serial_list</name>
        <param>
          <type>const struct <ref refid="a00178" kindref="compound">sr_dev_driver</ref> *</type>
          <declname>driver</declname>
        </param>
        <briefdescription>
<para>List available serial devices. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>A GSList of strings containing the path of the serial devices or NULL if no serial device is found. The returned list must be freed by the caller. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/libsigrok/proto.h" line="226" column="9" bodyfile="src/serial.c" bodystart="1059" bodyend="1082" declfile="include/libsigrok/proto.h" declline="226" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="a00075_1ga1c53acd13d3ff7895d4bc9d1f1fc3df8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void sr_serial_free</definition>
        <argsstring>(struct sr_serial_port *serial)</argsstring>
        <name>sr_serial_free</name>
        <param>
          <type>struct <ref refid="a00182" kindref="compound">sr_serial_port</ref> *</type>
          <declname>serial</declname>
        </param>
        <briefdescription>
<para>Free a previously allocated <ref refid="a00182" kindref="compound">sr_serial_port</ref> structure. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>serial</parametername>
</parameternamelist>
<parameterdescription>
<para>The <ref refid="a00182" kindref="compound">sr_serial_port</ref> struct to free. Must not be NULL. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/libsigrok/proto.h" line="227" column="7" bodyfile="src/serial.c" bodystart="1038" bodyend="1045" declfile="include/libsigrok/proto.h" declline="227" declcolumn="7"/>
        <references refid="a00182_1a8fe5ff6c0b75442717673e3ae40bfd6e" compoundref="a00050" startline="1266">sr_serial_port::description</references>
        <references refid="a00182_1ae4aa770ba1ab042be67c26dac907b90b" compoundref="a00050" startline="1264">sr_serial_port::name</references>
      </memberdef>
      <memberdef kind="function" id="a00053_1a0598bee8e091c1cfdf442d160c70e4e9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GSList *</type>
        <definition>GSList* sr_resourcepaths_get</definition>
        <argsstring>(int res_type)</argsstring>
        <name>sr_resourcepaths_get</name>
        <param>
          <type>int</type>
          <declname>res_type</declname>
        </param>
        <briefdescription>
<para>Get a list of paths where we look for resource (e.g. </para>
        </briefdescription>
        <detaileddescription>
<para>firmware) files.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>res_type</parametername>
</parameternamelist>
<parameterdescription>
<para>The type of resource to get the search paths for.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>List of strings that must be freed after use, including the strings.</para>
</simplesect>
<simplesect kind="since"><para>0.6.0 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/libsigrok/proto.h" line="238" column="9" bodyfile="src/resource.c" bodystart="47" bodyend="79" declfile="include/libsigrok/proto.h" declline="238" declcolumn="9"/>
        <references refid="a00050_1ac51d661320a4b2c0beb21ffb399ca6d2a19f9024eccef3c74192de9aa46762d79" compoundref="a00050" startline="576">SR_RESOURCE_FIRMWARE</references>
      </memberdef>
      <memberdef kind="function" id="a00053_1af6485cd6a98a0b05dec092b6b2a66e8a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int sr_resource_set_hooks</definition>
        <argsstring>(struct sr_context *ctx, sr_resource_open_callback open_cb, sr_resource_close_callback close_cb, sr_resource_read_callback read_cb, void *cb_data)</argsstring>
        <name>sr_resource_set_hooks</name>
        <param>
          <type>struct <ref refid="a00186" kindref="compound">sr_context</ref> *</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type><ref refid="a00053_1a752a7d3375e2685e90893b1089d63972" kindref="member">sr_resource_open_callback</ref></type>
          <declname>open_cb</declname>
        </param>
        <param>
          <type><ref refid="a00053_1a51a8a2ac69656aabe68b54dab38288af" kindref="member">sr_resource_close_callback</ref></type>
          <declname>close_cb</declname>
        </param>
        <param>
          <type><ref refid="a00053_1aa98b4fba926e47164a1701658efe2550" kindref="member">sr_resource_read_callback</ref></type>
          <declname>read_cb</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>cb_data</declname>
        </param>
        <briefdescription>
<para>Install resource access hooks. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>libsigrok context. Must not be NULL. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>open_cb</parametername>
</parameternamelist>
<parameterdescription>
<para>Resource open callback, or NULL to unset. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>close_cb</parametername>
</parameternamelist>
<parameterdescription>
<para>Resource close callback, or NULL to unset. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>read_cb</parametername>
</parameternamelist>
<parameterdescription>
<para>Resource read callback, or NULL to unset. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cb_data</parametername>
</parameternamelist>
<parameterdescription>
<para>User data pointer passed to callbacks.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>SR_OK</parametername>
</parameternamelist>
<parameterdescription>
<para>Success. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>SR_ERR_ARG</parametername>
</parameternamelist>
<parameterdescription>
<para>Invalid argument.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>0.4.0 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/libsigrok/proto.h" line="240" column="6" bodyfile="src/resource.c" bodystart="250" bodyend="274" declfile="include/libsigrok/proto.h" declline="240" declcolumn="6"/>
        <references refid="a00050_1af94f33f23c5855e3e429bd2ca01e3b95a214df8baf519bba79a1b48d364be3f20" compoundref="a00050" startline="70">SR_ERR_ARG</references>
      </memberdef>
      <memberdef kind="function" id="a00077_1ga7126aced4c86bf82f91b4fb0a2713e68" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>char *</type>
        <definition>char* sr_si_string_u64</definition>
        <argsstring>(uint64_t x, const char *unit)</argsstring>
        <name>sr_si_string_u64</name>
        <param>
          <type>uint64_t</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>unit</declname>
        </param>
        <briefdescription>
<para>Convert a numeric value value to its &quot;natural&quot; string representation in SI units. </para>
        </briefdescription>
        <detaileddescription>
<para>E.g. a value of 3000000, with units set to &quot;W&quot;, would be converted to &quot;3 MW&quot;, 20000 to &quot;20 kW&quot;, 31500 would become &quot;31.5 kW&quot;.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>The value to convert. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>unit</parametername>
</parameternamelist>
<parameterdescription>
<para>The unit to append to the string, or NULL if the string has no units.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A newly allocated string representation of the samplerate value, or NULL upon errors. The caller is responsible to g_free() the memory.</para>
</simplesect>
<simplesect kind="since"><para>0.2.0 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/libsigrok/proto.h" line="247" column="7" bodyfile="src/strutil.c" bodystart="931" bodyend="957" declfile="include/libsigrok/proto.h" declline="247" declcolumn="7"/>
        <references refid="a00050_1ab12bd9a979a0943b8b4e43814daf81dc" compoundref="a00050" startline="96">SR_GHZ</references>
        <references refid="a00050_1a5481ff3ca66afbea7fcae97751d60a5e" compoundref="a00050" startline="93">SR_HZ</references>
        <references refid="a00050_1a10c908619204f2f26b2a9a4fff1cdb95" compoundref="a00050" startline="94">SR_KHZ</references>
        <references refid="a00050_1a41578a5e5730fec84fb3efcfa9f29e68" compoundref="a00050" startline="95">SR_MHZ</references>
        <referencedby refid="a00077_1gab4e6df219e62795b510a932f567598ad" compoundref="a00041" startline="973" endline="976">sr_samplerate_string</referencedby>
      </memberdef>
      <memberdef kind="function" id="a00077_1gab4e6df219e62795b510a932f567598ad" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>char *</type>
        <definition>char* sr_samplerate_string</definition>
        <argsstring>(uint64_t samplerate)</argsstring>
        <name>sr_samplerate_string</name>
        <param>
          <type>uint64_t</type>
          <declname>samplerate</declname>
        </param>
        <briefdescription>
<para>Convert a numeric samplerate value to its &quot;natural&quot; string representation. </para>
        </briefdescription>
        <detaileddescription>
<para>E.g. a value of 3000000 would be converted to &quot;3 MHz&quot;, 20000 to &quot;20 kHz&quot;, 31500 would become &quot;31.5 kHz&quot;.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>samplerate</parametername>
</parameternamelist>
<parameterdescription>
<para>The samplerate in Hz.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A newly allocated string representation of the samplerate value, or NULL upon errors. The caller is responsible to g_free() the memory.</para>
</simplesect>
<simplesect kind="since"><para>0.1.0 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/libsigrok/proto.h" line="248" column="7" bodyfile="src/strutil.c" bodystart="973" bodyend="976" declfile="include/libsigrok/proto.h" declline="248" declcolumn="7"/>
        <references refid="a00077_1ga7126aced4c86bf82f91b4fb0a2713e68" compoundref="a00041" startline="931" endline="957">sr_si_string_u64</references>
      </memberdef>
      <memberdef kind="function" id="a00077_1ga3bee5618e4ddfa4bd90e3fc46c5ad8f1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>char *</type>
        <definition>char* sr_period_string</definition>
        <argsstring>(uint64_t v_p, uint64_t v_q)</argsstring>
        <name>sr_period_string</name>
        <param>
          <type>uint64_t</type>
          <declname>v_p</declname>
        </param>
        <param>
          <type>uint64_t</type>
          <declname>v_q</declname>
        </param>
        <briefdescription>
<para>Convert a numeric period value to the &quot;natural&quot; string representation of its period value. </para>
        </briefdescription>
        <detaileddescription>
<para>The period is specified as a rational number&apos;s numerator and denominator.</para>
<para>E.g. a pair of (1, 5) would be converted to &quot;200 ms&quot;, (10, 100) to &quot;100 ms&quot;.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>v_p</parametername>
</parameternamelist>
<parameterdescription>
<para>The period numerator. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>v_q</parametername>
</parameternamelist>
<parameterdescription>
<para>The period denominator.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A newly allocated string representation of the period value, or NULL upon errors. The caller is responsible to g_free() the memory.</para>
</simplesect>
<simplesect kind="since"><para>0.5.0 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/libsigrok/proto.h" line="249" column="7" bodyfile="src/strutil.c" bodystart="995" bodyend="1023" declfile="include/libsigrok/proto.h" declline="249" declcolumn="7"/>
        <references refid="a00050_1ab12bd9a979a0943b8b4e43814daf81dc" compoundref="a00050" startline="96">SR_GHZ</references>
        <references refid="a00050_1a10c908619204f2f26b2a9a4fff1cdb95" compoundref="a00050" startline="94">SR_KHZ</references>
        <references refid="a00050_1a41578a5e5730fec84fb3efcfa9f29e68" compoundref="a00050" startline="95">SR_MHZ</references>
      </memberdef>
      <memberdef kind="function" id="a00077_1ga547339234122efc4e3162d4a514a6216" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>char *</type>
        <definition>char* sr_voltage_string</definition>
        <argsstring>(uint64_t v_p, uint64_t v_q)</argsstring>
        <name>sr_voltage_string</name>
        <param>
          <type>uint64_t</type>
          <declname>v_p</declname>
        </param>
        <param>
          <type>uint64_t</type>
          <declname>v_q</declname>
        </param>
        <briefdescription>
<para>Convert a numeric voltage value to the &quot;natural&quot; string representation of its voltage value. </para>
        </briefdescription>
        <detaileddescription>
<para>The voltage is specified as a rational number&apos;s numerator and denominator.</para>
<para>E.g. a value of 300000 would be converted to &quot;300mV&quot;, 2 to &quot;2V&quot;.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>v_p</parametername>
</parameternamelist>
<parameterdescription>
<para>The voltage numerator. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>v_q</parametername>
</parameternamelist>
<parameterdescription>
<para>The voltage denominator.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A newly allocated string representation of the voltage value, or NULL upon errors. The caller is responsible to g_free() the memory.</para>
</simplesect>
<simplesect kind="since"><para>0.2.0 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/libsigrok/proto.h" line="250" column="7" bodyfile="src/strutil.c" bodystart="1041" bodyend="1049" declfile="include/libsigrok/proto.h" declline="250" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="a00077_1gaadc9a8f474d285002395ce5e34ae2ee2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int sr_parse_sizestring</definition>
        <argsstring>(const char *sizestring, uint64_t *size)</argsstring>
        <name>sr_parse_sizestring</name>
        <param>
          <type>const char *</type>
          <declname>sizestring</declname>
        </param>
        <param>
          <type>uint64_t *</type>
          <declname>size</declname>
        </param>
        <briefdescription>
<para>Convert a &quot;natural&quot; string representation of a size value to uint64_t. </para>
        </briefdescription>
        <detaileddescription>
<para>E.g. a value of &quot;3k&quot; or &quot;3 K&quot; would be converted to 3000, a value of &quot;15M&quot; would be converted to 15000000.</para>
<para>Value representations other than decimal (such as hex or octal) are not supported. Only &apos;k&apos; (kilo), &apos;m&apos; (mega), &apos;g&apos; (giga) suffixes are supported. Spaces (but not other whitespace) between value and suffix are allowed.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>sizestring</parametername>
</parameternamelist>
<parameterdescription>
<para>A string containing a (decimal) size value. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>size</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to uint64_t which will contain the string&apos;s size value.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>SR_OK upon success, SR_ERR upon errors.</para>
</simplesect>
<simplesect kind="since"><para>0.1.0 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/libsigrok/proto.h" line="251" column="6" bodyfile="src/strutil.c" bodystart="1068" bodyend="1127" declfile="include/libsigrok/proto.h" declline="251" declcolumn="6"/>
        <references refid="a00050_1af94f33f23c5855e3e429bd2ca01e3b95a132553bf1f479756d2590f9fd40bb289" compoundref="a00050" startline="68">SR_ERR</references>
        <references refid="a00050_1ab12bd9a979a0943b8b4e43814daf81dc" compoundref="a00050" startline="96">SR_GHZ</references>
        <references refid="a00050_1a10c908619204f2f26b2a9a4fff1cdb95" compoundref="a00050" startline="94">SR_KHZ</references>
        <references refid="a00050_1a41578a5e5730fec84fb3efcfa9f29e68" compoundref="a00050" startline="95">SR_MHZ</references>
        <references refid="a00050_1af94f33f23c5855e3e429bd2ca01e3b95aa35b06e07345c41f0102c255c9cd0bf1" compoundref="a00050" startline="67">SR_OK</references>
      </memberdef>
      <memberdef kind="function" id="a00077_1ga32b3f8287c1be88d88273d5e233b8d8a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint64_t</type>
        <definition>uint64_t sr_parse_timestring</definition>
        <argsstring>(const char *timestring)</argsstring>
        <name>sr_parse_timestring</name>
        <param>
          <type>const char *</type>
          <declname>timestring</declname>
        </param>
        <briefdescription>
<para>Convert a &quot;natural&quot; string representation of a time value to an uint64_t value in milliseconds. </para>
        </briefdescription>
        <detaileddescription>
<para>E.g. a value of &quot;3s&quot; or &quot;3 s&quot; would be converted to 3000, a value of &quot;15ms&quot; would be converted to 15.</para>
<para>Value representations other than decimal (such as hex or octal) are not supported. Only lower-case &quot;s&quot; and &quot;ms&quot; time suffixes are supported. Spaces (but not other whitespace) between value and suffix are allowed.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>timestring</parametername>
</parameternamelist>
<parameterdescription>
<para>A string containing a (decimal) time value. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The string&apos;s time value as uint64_t, in milliseconds.</para>
</simplesect>
</para>
<para><simplesect kind="since"><para>0.1.0 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/libsigrok/proto.h" line="252" column="11" bodyfile="src/strutil.c" bodystart="1149" bodyend="1172" declfile="include/libsigrok/proto.h" declline="252" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="a00077_1gac5de1c92b1a833f4a9d31b8bbd02df2e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>gboolean</type>
        <definition>gboolean sr_parse_boolstring</definition>
        <argsstring>(const char *boolstring)</argsstring>
        <name>sr_parse_boolstring</name>
        <param>
          <type>const char *</type>
          <declname>boolstring</declname>
          <defname>boolstr</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="since"><para>0.1.0 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/libsigrok/proto.h" line="253" column="11" bodyfile="src/strutil.c" bodystart="1175" bodyend="1192" declfile="include/libsigrok/proto.h" declline="253" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="a00077_1gafba460c1d435fe35501ac0e8a4ec4283" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int sr_parse_period</definition>
        <argsstring>(const char *periodstr, uint64_t *p, uint64_t *q)</argsstring>
        <name>sr_parse_period</name>
        <param>
          <type>const char *</type>
          <declname>periodstr</declname>
        </param>
        <param>
          <type>uint64_t *</type>
          <declname>p</declname>
        </param>
        <param>
          <type>uint64_t *</type>
          <declname>q</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="since"><para>0.2.0 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/libsigrok/proto.h" line="254" column="6" bodyfile="src/strutil.c" bodystart="1195" bodyend="1225" declfile="include/libsigrok/proto.h" declline="254" declcolumn="6"/>
        <references refid="a00050_1af94f33f23c5855e3e429bd2ca01e3b95a214df8baf519bba79a1b48d364be3f20" compoundref="a00050" startline="70">SR_ERR_ARG</references>
        <references refid="a00050_1af94f33f23c5855e3e429bd2ca01e3b95aa35b06e07345c41f0102c255c9cd0bf1" compoundref="a00050" startline="67">SR_OK</references>
      </memberdef>
      <memberdef kind="function" id="a00077_1gad4dd6b1a65ca06339639a9a0933dc7d9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int sr_parse_voltage</definition>
        <argsstring>(const char *voltstr, uint64_t *p, uint64_t *q)</argsstring>
        <name>sr_parse_voltage</name>
        <param>
          <type>const char *</type>
          <declname>voltstr</declname>
        </param>
        <param>
          <type>uint64_t *</type>
          <declname>p</declname>
        </param>
        <param>
          <type>uint64_t *</type>
          <declname>q</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="since"><para>0.2.0 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/libsigrok/proto.h" line="255" column="6" bodyfile="src/strutil.c" bodystart="1228" bodyend="1250" declfile="include/libsigrok/proto.h" declline="255" declcolumn="6"/>
        <references refid="a00050_1af94f33f23c5855e3e429bd2ca01e3b95a214df8baf519bba79a1b48d364be3f20" compoundref="a00050" startline="70">SR_ERR_ARG</references>
        <references refid="a00050_1af94f33f23c5855e3e429bd2ca01e3b95aa35b06e07345c41f0102c255c9cd0bf1" compoundref="a00050" startline="67">SR_OK</references>
      </memberdef>
      <memberdef kind="function" id="a00077_1ga99e7a0edbcad0e8f48b402aaab07b135" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int sr_sprintf_ascii</definition>
        <argsstring>(char *buf, const char *format,...)</argsstring>
        <name>sr_sprintf_ascii</name>
        <param>
          <type>char *</type>
          <declname>buf</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>format</declname>
        </param>
        <param>
          <type>...</type>
        </param>
        <briefdescription>
<para>Compose a string with a format string in the buffer pointed to by buf. </para>
        </briefdescription>
        <detaileddescription>
<para>It is up to the caller to ensure that the allocated buffer is large enough to hold the formatted result.</para>
<para>A terminating NUL character is automatically appended after the content written.</para>
<para>After the format parameter, the function expects at least as many additional arguments as needed for format.</para>
<para>This version ignores the current locale and uses the locale &quot;C&quot; for Linux, FreeBSD, OSX and Android.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>buf</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to a buffer where the resulting C string is stored. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>format</parametername>
</parameternamelist>
<parameterdescription>
<para>C string that contains a format string (see printf). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>...</parametername>
</parameternamelist>
<parameterdescription>
<para>A sequence of additional arguments, each containing a value to be used to replace a format specifier in the format string.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>On success, the number of characters that would have been written, not counting the terminating NUL character.</para>
</simplesect>
<simplesect kind="since"><para>0.6.0 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/libsigrok/proto.h" line="256" column="6" bodyfile="src/strutil.c" bodystart="467" bodyend="477" declfile="include/libsigrok/proto.h" declline="256" declcolumn="6"/>
        <references refid="a00077_1gadc3b0e400d218f8f3ffbef7867b96dc3" compoundref="a00041" startline="506" endline="599">sr_vsprintf_ascii</references>
      </memberdef>
      <memberdef kind="function" id="a00077_1gadc3b0e400d218f8f3ffbef7867b96dc3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int sr_vsprintf_ascii</definition>
        <argsstring>(char *buf, const char *format, va_list args)</argsstring>
        <name>sr_vsprintf_ascii</name>
        <param>
          <type>char *</type>
          <declname>buf</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>format</declname>
        </param>
        <param>
          <type>va_list</type>
          <declname>args</declname>
        </param>
        <briefdescription>
<para>Compose a string with a format string in the buffer pointed to by buf. </para>
        </briefdescription>
        <detaileddescription>
<para>It is up to the caller to ensure that the allocated buffer is large enough to hold the formatted result.</para>
<para>Internally, the function retrieves arguments from the list identified by args as if va_arg was used on it, and thus the state of args is likely to be altered by the call.</para>
<para>In any case, args should have been initialized by va_start at some point before the call, and it is expected to be released by va_end at some point after the call.</para>
<para>This version ignores the current locale and uses the locale &quot;C&quot; for Linux, FreeBSD, OSX and Android.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>buf</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to a buffer where the resulting C string is stored. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>format</parametername>
</parameternamelist>
<parameterdescription>
<para>C string that contains a format string (see printf). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>args</parametername>
</parameternamelist>
<parameterdescription>
<para>A value identifying a variable arguments list initialized with va_start.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>On success, the number of characters that would have been written, not counting the terminating NUL character.</para>
</simplesect>
<simplesect kind="since"><para>0.6.0 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/libsigrok/proto.h" line="257" column="6" bodyfile="src/strutil.c" bodystart="506" bodyend="599" declfile="include/libsigrok/proto.h" declline="257" declcolumn="6"/>
        <referencedby refid="a00077_1ga99e7a0edbcad0e8f48b402aaab07b135" compoundref="a00041" startline="467" endline="477">sr_sprintf_ascii</referencedby>
      </memberdef>
      <memberdef kind="function" id="a00077_1gad79390f49111f423ba58d98f539b10c9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int sr_snprintf_ascii</definition>
        <argsstring>(char *buf, size_t buf_size, const char *format,...)</argsstring>
        <name>sr_snprintf_ascii</name>
        <param>
          <type>char *</type>
          <declname>buf</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>buf_size</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>format</declname>
        </param>
        <param>
          <type>...</type>
        </param>
        <briefdescription>
<para>Composes a string with a format string (like printf) in the buffer pointed by buf (taking buf_size as the maximum buffer capacity to fill). </para>
        </briefdescription>
        <detaileddescription>
<para>If the resulting string would be longer than n - 1 characters, the remaining characters are discarded and not stored, but counted for the value returned by the function. A terminating NUL character is automatically appended after the content written. After the format parameter, the function expects at least as many additional arguments as needed for format.</para>
<para>This version ignores the current locale and uses the locale &quot;C&quot; for Linux, FreeBSD, OSX and Android.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>buf</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to a buffer where the resulting C string is stored. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>buf_size</parametername>
</parameternamelist>
<parameterdescription>
<para>Maximum number of bytes to be used in the buffer. The generated string has a length of at most buf_size - 1, leaving space for the additional terminating NUL character. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>format</parametername>
</parameternamelist>
<parameterdescription>
<para>C string that contains a format string (see printf). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>...</parametername>
</parameternamelist>
<parameterdescription>
<para>A sequence of additional arguments, each containing a value to be used to replace a format specifier in the format string.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>On success, the number of characters that would have been written if buf_size had been sufficiently large, not counting the terminating NUL character. On failure, a negative number is returned. Notice that only when this returned value is non-negative and less than buf_size, the string has been completely written.</para>
</simplesect>
<simplesect kind="since"><para>0.6.0 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/libsigrok/proto.h" line="258" column="6" bodyfile="src/strutil.c" bodystart="631" bodyend="642" declfile="include/libsigrok/proto.h" declline="258" declcolumn="6"/>
        <references refid="a00077_1ga3021c6a73fddd6a4ce43ad8058d231cc" compoundref="a00041" startline="678" endline="772">sr_vsnprintf_ascii</references>
      </memberdef>
      <memberdef kind="function" id="a00077_1ga3021c6a73fddd6a4ce43ad8058d231cc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int sr_vsnprintf_ascii</definition>
        <argsstring>(char *buf, size_t buf_size, const char *format, va_list args)</argsstring>
        <name>sr_vsnprintf_ascii</name>
        <param>
          <type>char *</type>
          <declname>buf</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>buf_size</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>format</declname>
        </param>
        <param>
          <type>va_list</type>
          <declname>args</declname>
        </param>
        <briefdescription>
<para>Composes a string with a format string (like printf) in the buffer pointed by buf (taking buf_size as the maximum buffer capacity to fill). </para>
        </briefdescription>
        <detaileddescription>
<para>If the resulting string would be longer than n - 1 characters, the remaining characters are discarded and not stored, but counted for the value returned by the function. A terminating NUL character is automatically appended after the content written. Internally, the function retrieves arguments from the list identified by args as if va_arg was used on it, and thus the state of args is likely to be altered by the call. In any case, arg should have been initialized by va_start at some point before the call, and it is expected to be released by va_end at some point after the call.</para>
<para>This version ignores the current locale and uses the locale &quot;C&quot; for Linux, FreeBSD, OSX and Android.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>buf</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to a buffer where the resulting C string is stored. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>buf_size</parametername>
</parameternamelist>
<parameterdescription>
<para>Maximum number of bytes to be used in the buffer. The generated string has a length of at most buf_size - 1, leaving space for the additional terminating NUL character. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>format</parametername>
</parameternamelist>
<parameterdescription>
<para>C string that contains a format string (see printf). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>args</parametername>
</parameternamelist>
<parameterdescription>
<para>A value identifying a variable arguments list initialized with va_start.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>On success, the number of characters that would have been written if buf_size had been sufficiently large, not counting the terminating NUL character. On failure, a negative number is returned. Notice that only when this returned value is non-negative and less than buf_size, the string has been completely written.</para>
</simplesect>
<simplesect kind="since"><para>0.6.0 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/libsigrok/proto.h" line="260" column="6" bodyfile="src/strutil.c" bodystart="678" bodyend="772" declfile="include/libsigrok/proto.h" declline="260" declcolumn="6"/>
        <referencedby refid="a00077_1gad79390f49111f423ba58d98f539b10c9" compoundref="a00041" startline="631" endline="642">sr_snprintf_ascii</referencedby>
      </memberdef>
      <memberdef kind="function" id="a00077_1ga5fb4eb4552fd16a31f0aadffcad8d096" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int sr_parse_rational</definition>
        <argsstring>(const char *str, struct sr_rational *ret)</argsstring>
        <name>sr_parse_rational</name>
        <param>
          <type>const char *</type>
          <declname>str</declname>
        </param>
        <param>
          <type>struct <ref refid="a00118" kindref="compound">sr_rational</ref> *</type>
          <declname>ret</declname>
        </param>
        <briefdescription>
<para>Convert a string representation of a numeric value to a <ref refid="a00118" kindref="compound">sr_rational</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para>The conversion is strict and will fail if the complete string does not represent a valid number. The function sets errno according to the details of the failure. This version ignores the locale.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>str</parametername>
</parameternamelist>
<parameterdescription>
<para>The string representation to convert. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ret</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to <ref refid="a00118" kindref="compound">sr_rational</ref> where the result of the conversion will be stored.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>SR_OK</parametername>
</parameternamelist>
<parameterdescription>
<para>Conversion successful. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>SR_ERR</parametername>
</parameternamelist>
<parameterdescription>
<para>Failure.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>0.5.0 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/libsigrok/proto.h" line="262" column="6" bodyfile="src/strutil.c" bodystart="829" bodyend="912" declfile="include/libsigrok/proto.h" declline="262" declcolumn="6"/>
        <references refid="a00118_1a4aaae7eaf8b4be92c17c5158b431ca59" compoundref="a00050" startline="487">sr_rational::p</references>
        <references refid="a00118_1aea760e51129f529a28b91d5ba757678c" compoundref="a00050" startline="489">sr_rational::q</references>
        <references refid="a00050_1af94f33f23c5855e3e429bd2ca01e3b95a132553bf1f479756d2590f9fd40bb289" compoundref="a00050" startline="68">SR_ERR</references>
        <references refid="a00050_1af94f33f23c5855e3e429bd2ca01e3b95aa35b06e07345c41f0102c255c9cd0bf1" compoundref="a00050" startline="67">SR_OK</references>
      </memberdef>
      <memberdef kind="function" id="a00079_1gaa578d2cf576270655de7bdc3d84031a1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int sr_package_version_major_get</definition>
        <argsstring>(void)</argsstring>
        <name>sr_package_version_major_get</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Get the major libsigrok package version number. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The major package version number.</para>
</simplesect>
<simplesect kind="since"><para>0.1.0 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/libsigrok/proto.h" line="266" column="6" bodyfile="src/version.c" bodystart="56" bodyend="59" declfile="include/libsigrok/proto.h" declline="266" declcolumn="6"/>
        <references refid="a00079_1ga633ff27d380bdccce157c919eb618e4b" compoundref="a00056" startline="41">SR_PACKAGE_VERSION_MAJOR</references>
      </memberdef>
      <memberdef kind="function" id="a00079_1ga8655c30cfab2f1be18cf10dad181d057" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int sr_package_version_minor_get</definition>
        <argsstring>(void)</argsstring>
        <name>sr_package_version_minor_get</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Get the minor libsigrok package version number. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The minor package version number.</para>
</simplesect>
<simplesect kind="since"><para>0.1.0 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/libsigrok/proto.h" line="267" column="6" bodyfile="src/version.c" bodystart="68" bodyend="71" declfile="include/libsigrok/proto.h" declline="267" declcolumn="6"/>
        <references refid="a00079_1ga0e70e791f3927bb1738d1ae17102a916" compoundref="a00056" startline="44">SR_PACKAGE_VERSION_MINOR</references>
      </memberdef>
      <memberdef kind="function" id="a00079_1ga1f79f39844f62898869bcae94e8eb60c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int sr_package_version_micro_get</definition>
        <argsstring>(void)</argsstring>
        <name>sr_package_version_micro_get</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Get the micro libsigrok package version number. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The micro package version number.</para>
</simplesect>
<simplesect kind="since"><para>0.1.0 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/libsigrok/proto.h" line="268" column="6" bodyfile="src/version.c" bodystart="80" bodyend="83" declfile="include/libsigrok/proto.h" declline="268" declcolumn="6"/>
        <references refid="a00079_1ga90febc04ea263a6365972bb7026420ff" compoundref="a00056" startline="47">SR_PACKAGE_VERSION_MICRO</references>
      </memberdef>
      <memberdef kind="function" id="a00079_1gab69dee3c84c594faf1b7a20587ebec5d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const char *</type>
        <definition>const char* sr_package_version_string_get</definition>
        <argsstring>(void)</argsstring>
        <name>sr_package_version_string_get</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Get the libsigrok package version number as a string. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The package version number string. The returned string is static and thus should NOT be free&apos;d by the caller.</para>
</simplesect>
<simplesect kind="since"><para>0.1.0 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/libsigrok/proto.h" line="269" column="13" bodyfile="src/version.c" bodystart="93" bodyend="96" declfile="include/libsigrok/proto.h" declline="269" declcolumn="13"/>
        <references refid="a00079_1ga1b5c2ca3b262c82cb4be77611b54e92f" compoundref="a00056" startline="50">SR_PACKAGE_VERSION_STRING</references>
      </memberdef>
      <memberdef kind="function" id="a00079_1ga5cffad288a578de133a3859f7e4e39d4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int sr_lib_version_current_get</definition>
        <argsstring>(void)</argsstring>
        <name>sr_lib_version_current_get</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Get the &quot;current&quot; part of the libsigrok library version number. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The &quot;current&quot; library version number.</para>
</simplesect>
<simplesect kind="since"><para>0.1.0 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/libsigrok/proto.h" line="271" column="6" bodyfile="src/version.c" bodystart="105" bodyend="108" declfile="include/libsigrok/proto.h" declline="271" declcolumn="6"/>
        <references refid="a00079_1gaa454733b673a6e5198cf729b2722947f" compoundref="a00056" startline="57">SR_LIB_VERSION_CURRENT</references>
      </memberdef>
      <memberdef kind="function" id="a00079_1ga2d128fd0fff141ef16bcddd3cf1e6fe9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int sr_lib_version_revision_get</definition>
        <argsstring>(void)</argsstring>
        <name>sr_lib_version_revision_get</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Get the &quot;revision&quot; part of the libsigrok library version number. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The &quot;revision&quot; library version number.</para>
</simplesect>
<simplesect kind="since"><para>0.1.0 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/libsigrok/proto.h" line="272" column="6" bodyfile="src/version.c" bodystart="117" bodyend="120" declfile="include/libsigrok/proto.h" declline="272" declcolumn="6"/>
        <references refid="a00079_1ga26733bd26a726e8948f2a975202d9bcf" compoundref="a00056" startline="60">SR_LIB_VERSION_REVISION</references>
      </memberdef>
      <memberdef kind="function" id="a00079_1gaf969bd6aef6f09cf2301e26b160891df" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int sr_lib_version_age_get</definition>
        <argsstring>(void)</argsstring>
        <name>sr_lib_version_age_get</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Get the &quot;age&quot; part of the libsigrok library version number. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The &quot;age&quot; library version number.</para>
</simplesect>
<simplesect kind="since"><para>0.1.0 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/libsigrok/proto.h" line="273" column="6" bodyfile="src/version.c" bodystart="129" bodyend="132" declfile="include/libsigrok/proto.h" declline="273" declcolumn="6"/>
        <references refid="a00079_1gabd0c6bd9b797c4b737f970561a23399b" compoundref="a00056" startline="63">SR_LIB_VERSION_AGE</references>
      </memberdef>
      <memberdef kind="function" id="a00079_1gab62c0a995dcf873504edbd7c6f610b25" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const char *</type>
        <definition>const char* sr_lib_version_string_get</definition>
        <argsstring>(void)</argsstring>
        <name>sr_lib_version_string_get</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Get the libsigrok library version number as a string. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The library version number string. The returned string is static and thus should NOT be free&apos;d by the caller.</para>
</simplesect>
<simplesect kind="since"><para>0.1.0 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/libsigrok/proto.h" line="274" column="13" bodyfile="src/version.c" bodystart="142" bodyend="145" declfile="include/libsigrok/proto.h" declline="274" declcolumn="13"/>
        <references refid="a00079_1gae2be8ab4f93877b1bc49cd487d08ba77" compoundref="a00056" startline="66">SR_LIB_VERSION_STRING</references>
      </memberdef>
      <memberdef kind="function" id="a00072_1ga7aacfdde4d4f0b3a64d50797f3c10103" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const char *</type>
        <definition>const char* sr_strerror</definition>
        <argsstring>(int error_code)</argsstring>
        <name>sr_strerror</name>
        <param>
          <type>int</type>
          <declname>error_code</declname>
        </param>
        <briefdescription>
<para>Return a human-readable error string for the given libsigrok error code. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>error_code</parametername>
</parameternamelist>
<parameterdescription>
<para>A libsigrok error code number, such as SR_ERR_MALLOC.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A const string containing a short, human-readable (English) description of the error, such as &quot;memory allocation error&quot;. The string must NOT be free&apos;d by the caller!</para>
</simplesect>
<simplesect kind="see"><para><ref refid="a00072_1ga7b17e89928756a8282c4a085762dcf37" kindref="member">sr_strerror_name</ref></para>
</simplesect>
<simplesect kind="since"><para>0.2.0 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/libsigrok/proto.h" line="278" column="13" bodyfile="src/error.c" bodystart="53" bodyend="88" declfile="include/libsigrok/proto.h" declline="278" declcolumn="13"/>
        <references refid="a00050_1af94f33f23c5855e3e429bd2ca01e3b95a132553bf1f479756d2590f9fd40bb289" compoundref="a00050" startline="68">SR_ERR</references>
        <references refid="a00050_1af94f33f23c5855e3e429bd2ca01e3b95a214df8baf519bba79a1b48d364be3f20" compoundref="a00050" startline="70">SR_ERR_ARG</references>
        <references refid="a00050_1af94f33f23c5855e3e429bd2ca01e3b95a73d02d78044acbb231b3c2db09ac9073" compoundref="a00050" startline="71">SR_ERR_BUG</references>
        <references refid="a00050_1af94f33f23c5855e3e429bd2ca01e3b95a6c0e2e6dab8298c353668d1060989f71" compoundref="a00050" startline="76">SR_ERR_CHANNEL_GROUP</references>
        <references refid="a00050_1af94f33f23c5855e3e429bd2ca01e3b95aeee8ec5930fa84cfcbf2e9772cd05eed" compoundref="a00050" startline="77">SR_ERR_DATA</references>
        <references refid="a00050_1af94f33f23c5855e3e429bd2ca01e3b95a876e62a9b4ae742236909f3cc639478a" compoundref="a00050" startline="74">SR_ERR_DEV_CLOSED</references>
        <references refid="a00050_1af94f33f23c5855e3e429bd2ca01e3b95a5df4d703fdb8c7b848b3f6187aa75473" compoundref="a00050" startline="78">SR_ERR_IO</references>
        <references refid="a00050_1af94f33f23c5855e3e429bd2ca01e3b95a2b09e88e11f188acddd045e8589ea774" compoundref="a00050" startline="69">SR_ERR_MALLOC</references>
        <references refid="a00050_1af94f33f23c5855e3e429bd2ca01e3b95a6f2b8ec909e8f5137db63a14fad0f67c" compoundref="a00050" startline="73">SR_ERR_NA</references>
        <references refid="a00050_1af94f33f23c5855e3e429bd2ca01e3b95a3f7596ab3e2406b3fd37e88bbeaaf0b2" compoundref="a00050" startline="72">SR_ERR_SAMPLERATE</references>
        <references refid="a00050_1af94f33f23c5855e3e429bd2ca01e3b95adb701ac55b29396e80265d7f950cb113" compoundref="a00050" startline="75">SR_ERR_TIMEOUT</references>
        <references refid="a00050_1af94f33f23c5855e3e429bd2ca01e3b95aa35b06e07345c41f0102c255c9cd0bf1" compoundref="a00050" startline="67">SR_OK</references>
        <referencedby refid="a00076_1gac037d037baecc2b3679044d2b7c3bad3" compoundref="a00035" startline="318" endline="377">sr_session_dev_add</referencedby>
      </memberdef>
      <memberdef kind="function" id="a00072_1ga7b17e89928756a8282c4a085762dcf37" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const char *</type>
        <definition>const char* sr_strerror_name</definition>
        <argsstring>(int error_code)</argsstring>
        <name>sr_strerror_name</name>
        <param>
          <type>int</type>
          <declname>error_code</declname>
        </param>
        <briefdescription>
<para>Return the &quot;name&quot; string of the given libsigrok error code. </para>
        </briefdescription>
        <detaileddescription>
<para>For example, the &quot;name&quot; of the SR_ERR_MALLOC error code is &quot;SR_ERR_MALLOC&quot;, the name of the SR_OK code is &quot;SR_OK&quot;, and so on.</para>
<para>This function can be used for various purposes where the &quot;name&quot; string of a libsigrok error code is useful.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>error_code</parametername>
</parameternamelist>
<parameterdescription>
<para>A libsigrok error code number, such as SR_ERR_MALLOC.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A const string containing the &quot;name&quot; of the error code as string. The string must NOT be free&apos;d by the caller!</para>
</simplesect>
<simplesect kind="see"><para><ref refid="a00072_1ga7aacfdde4d4f0b3a64d50797f3c10103" kindref="member">sr_strerror</ref></para>
</simplesect>
<simplesect kind="since"><para>0.2.0 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/libsigrok/proto.h" line="279" column="13" bodyfile="src/error.c" bodystart="108" bodyend="143" declfile="include/libsigrok/proto.h" declline="279" declcolumn="13"/>
        <references refid="a00050_1af94f33f23c5855e3e429bd2ca01e3b95a132553bf1f479756d2590f9fd40bb289" compoundref="a00050" startline="68">SR_ERR</references>
        <references refid="a00050_1af94f33f23c5855e3e429bd2ca01e3b95a214df8baf519bba79a1b48d364be3f20" compoundref="a00050" startline="70">SR_ERR_ARG</references>
        <references refid="a00050_1af94f33f23c5855e3e429bd2ca01e3b95a73d02d78044acbb231b3c2db09ac9073" compoundref="a00050" startline="71">SR_ERR_BUG</references>
        <references refid="a00050_1af94f33f23c5855e3e429bd2ca01e3b95a6c0e2e6dab8298c353668d1060989f71" compoundref="a00050" startline="76">SR_ERR_CHANNEL_GROUP</references>
        <references refid="a00050_1af94f33f23c5855e3e429bd2ca01e3b95aeee8ec5930fa84cfcbf2e9772cd05eed" compoundref="a00050" startline="77">SR_ERR_DATA</references>
        <references refid="a00050_1af94f33f23c5855e3e429bd2ca01e3b95a876e62a9b4ae742236909f3cc639478a" compoundref="a00050" startline="74">SR_ERR_DEV_CLOSED</references>
        <references refid="a00050_1af94f33f23c5855e3e429bd2ca01e3b95a5df4d703fdb8c7b848b3f6187aa75473" compoundref="a00050" startline="78">SR_ERR_IO</references>
        <references refid="a00050_1af94f33f23c5855e3e429bd2ca01e3b95a2b09e88e11f188acddd045e8589ea774" compoundref="a00050" startline="69">SR_ERR_MALLOC</references>
        <references refid="a00050_1af94f33f23c5855e3e429bd2ca01e3b95a6f2b8ec909e8f5137db63a14fad0f67c" compoundref="a00050" startline="73">SR_ERR_NA</references>
        <references refid="a00050_1af94f33f23c5855e3e429bd2ca01e3b95a3f7596ab3e2406b3fd37e88bbeaaf0b2" compoundref="a00050" startline="72">SR_ERR_SAMPLERATE</references>
        <references refid="a00050_1af94f33f23c5855e3e429bd2ca01e3b95adb701ac55b29396e80265d7f950cb113" compoundref="a00050" startline="75">SR_ERR_TIMEOUT</references>
        <references refid="a00050_1af94f33f23c5855e3e429bd2ca01e3b95aa35b06e07345c41f0102c255c9cd0bf1" compoundref="a00050" startline="67">SR_OK</references>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Header file containing API function prototypes. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="include/libsigrok/proto.h"/>
  </compounddef>
</doxygen>
