<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="a00029" kind="file" language="C++">
    <compoundname>resource.c</compoundname>
    <includes local="no">config.h</includes>
    <includes local="no">errno.h</includes>
    <includes local="no">stdio.h</includes>
    <includes local="no">glib.h</includes>
    <includes local="no">glib/gstdio.h</includes>
    <includes refid="a00050" local="no">libsigrok/libsigrok.h</includes>
    <includes local="yes">libsigrok-internal.h</includes>
    <incdepgraph>
      <node id="13">
        <label>libsigrok-internal.h</label>
      </node>
      <node id="9">
        <label>stdint.h</label>
      </node>
      <node id="12">
        <label>libsigrok/version.h</label>
        <link refid="a00056"/>
      </node>
      <node id="3">
        <label>errno.h</label>
      </node>
      <node id="5">
        <label>glib.h</label>
      </node>
      <node id="8">
        <label>sys/time.h</label>
      </node>
      <node id="7">
        <label>libsigrok/libsigrok.h</label>
        <link refid="a00050"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>src/resource.c</label>
        <link refid="a00029"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>config.h</label>
      </node>
      <node id="6">
        <label>glib/gstdio.h</label>
      </node>
      <node id="4">
        <label>stdio.h</label>
      </node>
      <node id="11">
        <label>libsigrok/proto.h</label>
        <link refid="a00053"/>
      </node>
      <node id="10">
        <label>inttypes.h</label>
      </node>
    </incdepgraph>
      <sectiondef kind="func">
      <memberdef kind="function" id="a00029_1a0598bee8e091c1cfdf442d160c70e4e9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GSList *</type>
        <definition>GSList* sr_resourcepaths_get</definition>
        <argsstring>(int res_type)</argsstring>
        <name>sr_resourcepaths_get</name>
        <param>
          <type>int</type>
          <declname>res_type</declname>
        </param>
        <briefdescription>
<para>Get a list of paths where we look for resource (e.g. </para>
        </briefdescription>
        <detaileddescription>
<para>firmware) files.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>res_type</parametername>
</parameternamelist>
<parameterdescription>
<para>The type of resource to get the search paths for.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>List of strings that must be freed after use, including the strings.</para>
</simplesect>
<simplesect kind="since"><para>0.6.0 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/resource.c" line="47" column="9" bodyfile="src/resource.c" bodystart="47" bodyend="79"/>
        <references refid="a00050_1ac51d661320a4b2c0beb21ffb399ca6d2a19f9024eccef3c74192de9aa46762d79" compoundref="a00050" startline="576">SR_RESOURCE_FIRMWARE</references>
      </memberdef>
      <memberdef kind="function" id="a00029_1a10fbc3c83bbae659ad34bf5959be36f0" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="a00050_1a543a61499eead2576f48b70fbc336e71" kindref="member">SR_PRIV</ref> int64_t</type>
        <definition>SR_PRIV int64_t sr_file_get_size</definition>
        <argsstring>(FILE *file)</argsstring>
        <name>sr_file_get_size</name>
        <param>
          <type>FILE *</type>
          <declname>file</declname>
        </param>
        <briefdescription>
<para>Retrieve the size of the open stream <emphasis>file</emphasis>. </para>
        </briefdescription>
        <detaileddescription>
<para>This function only works on seekable streams. However, the set of seekable streams is generally congruent with the set of streams that have a size. Code that needs to work with any type of stream (including pipes) should require neither seekability nor advance knowledge of the size. On failure, the return value is negative and errno is set.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>file</parametername>
</parameternamelist>
<parameterdescription>
<para>An I/O stream opened in binary mode. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The size of <emphasis>file</emphasis> in bytes, or a negative value on failure. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/resource.c" line="95" column="17" bodyfile="src/resource.c" bodystart="95" bodyend="121"/>
      </memberdef>
      <memberdef kind="function" id="a00029_1a8552e5afa4d6b7580ba4925045deda71" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>FILE *</type>
        <definition>static FILE* try_open_file</definition>
        <argsstring>(const char *datadir, const char *subdir, const char *name)</argsstring>
        <name>try_open_file</name>
        <param>
          <type>const char *</type>
          <declname>datadir</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>subdir</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/resource.c" line="123" column="13" bodyfile="src/resource.c" bodystart="123" bodyend="144"/>
      </memberdef>
      <memberdef kind="function" id="a00029_1ab71f083b1f887b3461e00bf248a485a5" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>static int resource_open_default</definition>
        <argsstring>(struct sr_resource *res, const char *name, void *cb_data)</argsstring>
        <name>resource_open_default</name>
        <param>
          <type>struct <ref refid="a00158" kindref="compound">sr_resource</ref> *</type>
          <declname>res</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>cb_data</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/resource.c" line="146" column="12" bodyfile="src/resource.c" bodystart="146" bodyend="186"/>
      </memberdef>
      <memberdef kind="function" id="a00029_1ab0948beaf1b7d1d00a8fcdac0bd05bae" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>static int resource_close_default</definition>
        <argsstring>(struct sr_resource *res, void *cb_data)</argsstring>
        <name>resource_close_default</name>
        <param>
          <type>struct <ref refid="a00158" kindref="compound">sr_resource</ref> *</type>
          <declname>res</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>cb_data</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/resource.c" line="188" column="12" bodyfile="src/resource.c" bodystart="188" bodyend="207"/>
      </memberdef>
      <memberdef kind="function" id="a00029_1a0fad561b8c30b9283daf306b887db881" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>gssize</type>
        <definition>static gssize resource_read_default</definition>
        <argsstring>(const struct sr_resource *res, void *buf, size_t count, void *cb_data)</argsstring>
        <name>resource_read_default</name>
        <param>
          <type>const struct <ref refid="a00158" kindref="compound">sr_resource</ref> *</type>
          <declname>res</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>buf</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>count</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>cb_data</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/resource.c" line="209" column="15" bodyfile="src/resource.c" bodystart="209" bodyend="234"/>
      </memberdef>
      <memberdef kind="function" id="a00029_1af6485cd6a98a0b05dec092b6b2a66e8a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int sr_resource_set_hooks</definition>
        <argsstring>(struct sr_context *ctx, sr_resource_open_callback open_cb, sr_resource_close_callback close_cb, sr_resource_read_callback read_cb, void *cb_data)</argsstring>
        <name>sr_resource_set_hooks</name>
        <param>
          <type>struct <ref refid="a00186" kindref="compound">sr_context</ref> *</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type><ref refid="a00053_1a752a7d3375e2685e90893b1089d63972" kindref="member">sr_resource_open_callback</ref></type>
          <declname>open_cb</declname>
        </param>
        <param>
          <type><ref refid="a00053_1a51a8a2ac69656aabe68b54dab38288af" kindref="member">sr_resource_close_callback</ref></type>
          <declname>close_cb</declname>
        </param>
        <param>
          <type><ref refid="a00053_1aa98b4fba926e47164a1701658efe2550" kindref="member">sr_resource_read_callback</ref></type>
          <declname>read_cb</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>cb_data</declname>
        </param>
        <briefdescription>
<para>Install resource access hooks. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>libsigrok context. Must not be NULL. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>open_cb</parametername>
</parameternamelist>
<parameterdescription>
<para>Resource open callback, or NULL to unset. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>close_cb</parametername>
</parameternamelist>
<parameterdescription>
<para>Resource close callback, or NULL to unset. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>read_cb</parametername>
</parameternamelist>
<parameterdescription>
<para>Resource read callback, or NULL to unset. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cb_data</parametername>
</parameternamelist>
<parameterdescription>
<para>User data pointer passed to callbacks.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>SR_OK</parametername>
</parameternamelist>
<parameterdescription>
<para>Success. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>SR_ERR_ARG</parametername>
</parameternamelist>
<parameterdescription>
<para>Invalid argument.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>0.4.0 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/resource.c" line="250" column="6" bodyfile="src/resource.c" bodystart="250" bodyend="274"/>
        <references refid="a00050_1af94f33f23c5855e3e429bd2ca01e3b95a214df8baf519bba79a1b48d364be3f20" compoundref="a00050" startline="70">SR_ERR_ARG</references>
      </memberdef>
      <memberdef kind="function" id="a00029_1a0f35bb2f570d59362bf353bf5adef28f" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="a00050_1a543a61499eead2576f48b70fbc336e71" kindref="member">SR_PRIV</ref> int</type>
        <definition>SR_PRIV int sr_resource_open</definition>
        <argsstring>(struct sr_context *ctx, struct sr_resource *res, int type, const char *name)</argsstring>
        <name>sr_resource_open</name>
        <param>
          <type>struct <ref refid="a00186" kindref="compound">sr_context</ref> *</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>struct <ref refid="a00158" kindref="compound">sr_resource</ref> *</type>
          <declname>res</declname>
        </param>
        <param>
          <type>int</type>
          <declname>type</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <briefdescription>
<para>Open resource. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>libsigrok context. Must not be NULL. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">res</parametername>
</parameternamelist>
<parameterdescription>
<para>Resource descriptor to fill in. Must not be NULL. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>type</parametername>
</parameternamelist>
<parameterdescription>
<para>Resource type ID. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of the resource. Must not be NULL.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>SR_OK</parametername>
</parameternamelist>
<parameterdescription>
<para>Success. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>SR_ERR_ARG</parametername>
</parameternamelist>
<parameterdescription>
<para>Invalid argument. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>SR_ERR</parametername>
</parameternamelist>
<parameterdescription>
<para>Other error. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/resource.c" line="290" column="13" bodyfile="src/resource.c" bodystart="290" bodyend="306"/>
      </memberdef>
      <memberdef kind="function" id="a00029_1ae9bfc396ea475a12160d36e0f4c8230c" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="a00050_1a543a61499eead2576f48b70fbc336e71" kindref="member">SR_PRIV</ref> int</type>
        <definition>SR_PRIV int sr_resource_close</definition>
        <argsstring>(struct sr_context *ctx, struct sr_resource *res)</argsstring>
        <name>sr_resource_close</name>
        <param>
          <type>struct <ref refid="a00186" kindref="compound">sr_context</ref> *</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>struct <ref refid="a00158" kindref="compound">sr_resource</ref> *</type>
          <declname>res</declname>
        </param>
        <briefdescription>
<para>Close resource. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>libsigrok context. Must not be NULL. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="inout">res</parametername>
</parameternamelist>
<parameterdescription>
<para>Resource descriptor. Must not be NULL.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>SR_OK</parametername>
</parameternamelist>
<parameterdescription>
<para>Success. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>SR_ERR_ARG</parametername>
</parameternamelist>
<parameterdescription>
<para>Invalid argument. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>SR_ERR</parametername>
</parameternamelist>
<parameterdescription>
<para>Other error. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/resource.c" line="320" column="13" bodyfile="src/resource.c" bodystart="320" bodyend="330"/>
      </memberdef>
      <memberdef kind="function" id="a00029_1acfbd5b795881c1b76ad81a7e30d91e9e" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="a00050_1a543a61499eead2576f48b70fbc336e71" kindref="member">SR_PRIV</ref> gssize</type>
        <definition>SR_PRIV gssize sr_resource_read</definition>
        <argsstring>(struct sr_context *ctx, const struct sr_resource *res, void *buf, size_t count)</argsstring>
        <name>sr_resource_read</name>
        <param>
          <type>struct <ref refid="a00186" kindref="compound">sr_context</ref> *</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>const struct <ref refid="a00158" kindref="compound">sr_resource</ref> *</type>
          <declname>res</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>buf</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>count</declname>
        </param>
        <briefdescription>
<para>Read resource data. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>libsigrok context. Must not be NULL. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">res</parametername>
</parameternamelist>
<parameterdescription>
<para>Resource descriptor. Must not be NULL. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">buf</parametername>
</parameternamelist>
<parameterdescription>
<para>Buffer to store <emphasis>count</emphasis> bytes into. Must not be NULL. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>count</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of bytes to read.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The number of bytes actually read, or a negative value on error. </para>
</simplesect>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>SR_ERR_ARG</parametername>
</parameternamelist>
<parameterdescription>
<para>Invalid argument. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>SR_ERR</parametername>
</parameternamelist>
<parameterdescription>
<para>Other error. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/resource.c" line="346" column="16" bodyfile="src/resource.c" bodystart="346" bodyend="357"/>
      </memberdef>
      <memberdef kind="function" id="a00029_1af935430a8db0874394a6d2c2a9b20337" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="a00050_1a543a61499eead2576f48b70fbc336e71" kindref="member">SR_PRIV</ref> void *</type>
        <definition>SR_PRIV void* sr_resource_load</definition>
        <argsstring>(struct sr_context *ctx, int type, const char *name, size_t *size, size_t max_size)</argsstring>
        <name>sr_resource_load</name>
        <param>
          <type>struct <ref refid="a00186" kindref="compound">sr_context</ref> *</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>int</type>
          <declname>type</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type>size_t *</type>
          <declname>size</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>max_size</declname>
        </param>
        <briefdescription>
<para>Load a resource into memory. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>libsigrok context. Must not be NULL. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>type</parametername>
</parameternamelist>
<parameterdescription>
<para>Resource type ID. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of the resource. Must not be NULL. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">size</parametername>
</parameternamelist>
<parameterdescription>
<para>Size in bytes of the returned buffer. Must not be NULL. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>max_size</parametername>
</parameternamelist>
<parameterdescription>
<para>Size limit. Error out if the resource is larger than this.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A buffer containing the resource data, or NULL on failure. Must be freed by the caller using g_free(). </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/resource.c" line="373" column="14" bodyfile="src/resource.c" bodystart="373" bodyend="412"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Access to resource files. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="src/resource.c"/>
  </compounddef>
</doxygen>
