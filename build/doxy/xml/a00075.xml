<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="a00075" kind="group">
    <compoundname>grp_serial</compoundname>
    <title>Serial port handling</title>
      <sectiondef kind="func">
      <memberdef kind="function" id="a00075_1ga46f24a41a9f93241309a41c8e33680ad" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>static int dev_is_supported</definition>
        <argsstring>(struct sr_serial_dev_inst *serial)</argsstring>
        <name>dev_is_supported</name>
        <param>
          <type>struct sr_serial_dev_inst *</type>
          <declname>serial</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/serial.c" line="59" column="12" bodyfile="src/serial.c" bodystart="59" bodyend="65"/>
      </memberdef>
      <memberdef kind="function" id="a00075_1ga6a9d606473e1dbdec53f6d139bf909d1" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="a00050_1a543a61499eead2576f48b70fbc336e71" kindref="member">SR_PRIV</ref> int</type>
        <definition>SR_PRIV int serial_open</definition>
        <argsstring>(struct sr_serial_dev_inst *serial, int flags)</argsstring>
        <name>serial_open</name>
        <param>
          <type>struct sr_serial_dev_inst *</type>
          <declname>serial</declname>
        </param>
        <param>
          <type>int</type>
          <declname>flags</declname>
        </param>
        <briefdescription>
<para>Open the specified serial port. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>serial</parametername>
</parameternamelist>
<parameterdescription>
<para>Previously initialized serial port structure. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">flags</parametername>
</parameternamelist>
<parameterdescription>
<para>Flags to use when opening the serial port. Possible flags include SERIAL_RDWR, SERIAL_RDONLY.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
If the serial structure contains a serialcomm string, it will be passed to serial_set_paramstr() after the port is opened.</para>
<para><parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>SR_OK</parametername>
</parameternamelist>
<parameterdescription>
<para>Success. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>SR_ERR</parametername>
</parameternamelist>
<parameterdescription>
<para>Failure. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/serial.c" line="82" column="13" bodyfile="src/serial.c" bodystart="82" bodyend="143"/>
      </memberdef>
      <memberdef kind="function" id="a00075_1ga6151632b1800f37895082d5fcfca66eb" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="a00050_1a543a61499eead2576f48b70fbc336e71" kindref="member">SR_PRIV</ref> int</type>
        <definition>SR_PRIV int serial_close</definition>
        <argsstring>(struct sr_serial_dev_inst *serial)</argsstring>
        <name>serial_close</name>
        <param>
          <type>struct sr_serial_dev_inst *</type>
          <declname>serial</declname>
        </param>
        <briefdescription>
<para>Close the specified serial port. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>serial</parametername>
</parameternamelist>
<parameterdescription>
<para>Previously initialized serial port structure.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>SR_OK</parametername>
</parameternamelist>
<parameterdescription>
<para>Success. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>SR_ERR</parametername>
</parameternamelist>
<parameterdescription>
<para>Failure. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/serial.c" line="155" column="13" bodyfile="src/serial.c" bodystart="155" bodyend="176"/>
      </memberdef>
      <memberdef kind="function" id="a00075_1gabafb77f88b182507c1f459c9dc5f5606" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="a00050_1a543a61499eead2576f48b70fbc336e71" kindref="member">SR_PRIV</ref> int</type>
        <definition>SR_PRIV int serial_flush</definition>
        <argsstring>(struct sr_serial_dev_inst *serial)</argsstring>
        <name>serial_flush</name>
        <param>
          <type>struct sr_serial_dev_inst *</type>
          <declname>serial</declname>
        </param>
        <briefdescription>
<para>Flush serial port buffers. </para>
        </briefdescription>
        <detaileddescription>
<para>Empty buffers, discard pending RX and TX data.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>serial</parametername>
</parameternamelist>
<parameterdescription>
<para>Previously initialized serial port structure.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>SR_OK</parametername>
</parameternamelist>
<parameterdescription>
<para>Success. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>SR_ERR</parametername>
</parameternamelist>
<parameterdescription>
<para>Failure. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/serial.c" line="188" column="13" bodyfile="src/serial.c" bodystart="188" bodyend="203"/>
      </memberdef>
      <memberdef kind="function" id="a00075_1gaf9aedd9564bc78553a0efb19607185e9" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="a00050_1a543a61499eead2576f48b70fbc336e71" kindref="member">SR_PRIV</ref> int</type>
        <definition>SR_PRIV int serial_drain</definition>
        <argsstring>(struct sr_serial_dev_inst *serial)</argsstring>
        <name>serial_drain</name>
        <param>
          <type>struct sr_serial_dev_inst *</type>
          <declname>serial</declname>
        </param>
        <briefdescription>
<para>Drain serial port buffers. </para>
        </briefdescription>
        <detaileddescription>
<para>Wait for pending TX data to be sent.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>serial</parametername>
</parameternamelist>
<parameterdescription>
<para>Previously initialized serial port structure.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>SR_OK</parametername>
</parameternamelist>
<parameterdescription>
<para>Success. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>SR_ERR</parametername>
</parameternamelist>
<parameterdescription>
<para>Failure. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/serial.c" line="215" column="13" bodyfile="src/serial.c" bodystart="215" bodyend="228"/>
      </memberdef>
      <memberdef kind="function" id="a00075_1gaf0d3e129779c8bfbebcc7821c420a034" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="a00050_1a543a61499eead2576f48b70fbc336e71" kindref="member">SR_PRIV</ref> int</type>
        <definition>SR_PRIV int serial_set_read_chunk_cb</definition>
        <argsstring>(struct sr_serial_dev_inst *serial, serial_rx_chunk_callback cb, void *cb_data)</argsstring>
        <name>serial_set_read_chunk_cb</name>
        <param>
          <type>struct sr_serial_dev_inst *</type>
          <declname>serial</declname>
        </param>
        <param>
          <type>serial_rx_chunk_callback</type>
          <declname>cb</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>cb_data</declname>
        </param>
        <briefdescription>
<para>Register application callback for RX data chunks. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">serial</parametername>
</parameternamelist>
<parameterdescription>
<para>Previously initialized serial port instance. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">cb</parametername>
</parameternamelist>
<parameterdescription>
<para>Routine to call as RX data becomes available. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">cb_data</parametername>
</parameternamelist>
<parameterdescription>
<para>User data to pass to the callback in addition to RX data.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>SR_ERR_ARG</parametername>
</parameternamelist>
<parameterdescription>
<para>Invalid parameters. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>SR_OK</parametername>
</parameternamelist>
<parameterdescription>
<para>Successful registration.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
Callbacks get unregistered by specifying NULL for the &apos;cb&apos; parameter. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/serial.c" line="265" column="13" bodyfile="src/serial.c" bodystart="265" bodyend="275"/>
      </memberdef>
      <memberdef kind="function" id="a00075_1ga9e60bd5739e92ee1ca6c5ae263d1b1bb" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="a00050_1a543a61499eead2576f48b70fbc336e71" kindref="member">SR_PRIV</ref> void</type>
        <definition>SR_PRIV void sr_ser_discard_queued_data</definition>
        <argsstring>(struct sr_serial_dev_inst *serial)</argsstring>
        <name>sr_ser_discard_queued_data</name>
        <param>
          <type>struct sr_serial_dev_inst *</type>
          <declname>serial</declname>
        </param>
        <briefdescription>
<para>Discard previously queued RX data. </para>
        </briefdescription>
        <detaileddescription>
<para>Internal to the serial subsystem, coordination between common and transport specific support code.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">serial</parametername>
</parameternamelist>
<parameterdescription>
<para>Previously opened serial port instance. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/serial.c" line="285" column="14" bodyfile="src/serial.c" bodystart="285" bodyend="291"/>
      </memberdef>
      <memberdef kind="function" id="a00075_1gaadef69e5c203daa2810e03b668d2d005" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="a00050_1a543a61499eead2576f48b70fbc336e71" kindref="member">SR_PRIV</ref> size_t</type>
        <definition>SR_PRIV size_t sr_ser_has_queued_data</definition>
        <argsstring>(struct sr_serial_dev_inst *serial)</argsstring>
        <name>sr_ser_has_queued_data</name>
        <param>
          <type>struct sr_serial_dev_inst *</type>
          <declname>serial</declname>
        </param>
        <briefdescription>
<para>Get amount of queued RX data. </para>
        </briefdescription>
        <detaileddescription>
<para>Internal to the serial subsystem, coordination between common and transport specific support code.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">serial</parametername>
</parameternamelist>
<parameterdescription>
<para>Previously opened serial port instance. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/serial.c" line="301" column="16" bodyfile="src/serial.c" bodystart="301" bodyend="307"/>
      </memberdef>
      <memberdef kind="function" id="a00075_1gaafea98d91de35d3799756e62bfd789cc" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="a00050_1a543a61499eead2576f48b70fbc336e71" kindref="member">SR_PRIV</ref> void</type>
        <definition>SR_PRIV void sr_ser_queue_rx_data</definition>
        <argsstring>(struct sr_serial_dev_inst *serial, const uint8_t *data, size_t len)</argsstring>
        <name>sr_ser_queue_rx_data</name>
        <param>
          <type>struct sr_serial_dev_inst *</type>
          <declname>serial</declname>
        </param>
        <param>
          <type>const uint8_t *</type>
          <declname>data</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>len</declname>
        </param>
        <briefdescription>
<para>Queue received data. </para>
        </briefdescription>
        <detaileddescription>
<para>Internal to the serial subsystem, coordination between common and transport specific support code.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">serial</parametername>
</parameternamelist>
<parameterdescription>
<para>Previously opened serial port instance. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">data</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to data bytes to queue. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">len</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of data bytes to queue. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/serial.c" line="319" column="14" bodyfile="src/serial.c" bodystart="319" bodyend="329"/>
      </memberdef>
      <memberdef kind="function" id="a00075_1ga6c7db4c70d85b649446fb17d06506b48" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="a00050_1a543a61499eead2576f48b70fbc336e71" kindref="member">SR_PRIV</ref> size_t</type>
        <definition>SR_PRIV size_t sr_ser_unqueue_rx_data</definition>
        <argsstring>(struct sr_serial_dev_inst *serial, uint8_t *data, size_t len)</argsstring>
        <name>sr_ser_unqueue_rx_data</name>
        <param>
          <type>struct sr_serial_dev_inst *</type>
          <declname>serial</declname>
        </param>
        <param>
          <type>uint8_t *</type>
          <declname>data</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>len</declname>
        </param>
        <briefdescription>
<para>Retrieve previously queued RX data. </para>
        </briefdescription>
        <detaileddescription>
<para>Internal to the serial subsystem, coordination between common and transport specific support code.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">serial</parametername>
</parameternamelist>
<parameterdescription>
<para>Previously opened serial port instance. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">data</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to store retrieved data bytes into. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">len</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of data bytes to retrieve. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/serial.c" line="341" column="16" bodyfile="src/serial.c" bodystart="341" bodyend="363"/>
      </memberdef>
      <memberdef kind="function" id="a00075_1ga49e3ad71516ef8a3ad1748d00eafbd23" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="a00050_1a543a61499eead2576f48b70fbc336e71" kindref="member">SR_PRIV</ref> size_t</type>
        <definition>SR_PRIV size_t serial_has_receive_data</definition>
        <argsstring>(struct sr_serial_dev_inst *serial)</argsstring>
        <name>serial_has_receive_data</name>
        <param>
          <type>struct sr_serial_dev_inst *</type>
          <declname>serial</declname>
        </param>
        <briefdescription>
<para>Check for available receive data. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">serial</parametername>
</parameternamelist>
<parameterdescription>
<para>Previously opened serial port instance.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The number of (known) available RX data bytes.</para>
</simplesect>
Returns 0 if no receive data is available, or if the amount of available receive data cannot get determined. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/serial.c" line="377" column="16" bodyfile="src/serial.c" bodystart="377" bodyend="391"/>
      </memberdef>
      <memberdef kind="function" id="a00075_1gad30d331ea4cd844a3241d85f7c0ff29d" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>static int _serial_write</definition>
        <argsstring>(struct sr_serial_dev_inst *serial, const void *buf, size_t count, int nonblocking, unsigned int timeout_ms)</argsstring>
        <name>_serial_write</name>
        <param>
          <type>struct sr_serial_dev_inst *</type>
          <declname>serial</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>buf</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>count</declname>
        </param>
        <param>
          <type>int</type>
          <declname>nonblocking</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>timeout_ms</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/serial.c" line="393" column="12" bodyfile="src/serial.c" bodystart="393" bodyend="411"/>
      </memberdef>
      <memberdef kind="function" id="a00075_1ga68cbb22eef225ad4d5b3b5ece4899971" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="a00050_1a543a61499eead2576f48b70fbc336e71" kindref="member">SR_PRIV</ref> int</type>
        <definition>SR_PRIV int serial_write_blocking</definition>
        <argsstring>(struct sr_serial_dev_inst *serial, const void *buf, size_t count, unsigned int timeout_ms)</argsstring>
        <name>serial_write_blocking</name>
        <param>
          <type>struct sr_serial_dev_inst *</type>
          <declname>serial</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>buf</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>count</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>timeout_ms</declname>
        </param>
        <briefdescription>
<para>Write a number of bytes to the specified serial port, blocking until finished. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>serial</parametername>
</parameternamelist>
<parameterdescription>
<para>Previously initialized serial port structure. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">buf</parametername>
</parameternamelist>
<parameterdescription>
<para>Buffer containing the bytes to write. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">count</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of bytes to write. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">timeout_ms</parametername>
</parameternamelist>
<parameterdescription>
<para>Timeout in ms, or 0 for no timeout.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>SR_ERR_ARG</parametername>
</parameternamelist>
<parameterdescription>
<para>Invalid argument. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>SR_ERR</parametername>
</parameternamelist>
<parameterdescription>
<para>Other error. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>other</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of bytes written. If this is less than the number specified in the call, the timeout was reached. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/serial.c" line="428" column="13" bodyfile="src/serial.c" bodystart="428" bodyend="432"/>
      </memberdef>
      <memberdef kind="function" id="a00075_1ga6609c564c0ec660eeb2daf8ff6342436" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="a00050_1a543a61499eead2576f48b70fbc336e71" kindref="member">SR_PRIV</ref> int</type>
        <definition>SR_PRIV int serial_write_nonblocking</definition>
        <argsstring>(struct sr_serial_dev_inst *serial, const void *buf, size_t count)</argsstring>
        <name>serial_write_nonblocking</name>
        <param>
          <type>struct sr_serial_dev_inst *</type>
          <declname>serial</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>buf</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>count</declname>
        </param>
        <briefdescription>
<para>Write a number of bytes to the specified serial port, return immediately. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>serial</parametername>
</parameternamelist>
<parameterdescription>
<para>Previously initialized serial port structure. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">buf</parametername>
</parameternamelist>
<parameterdescription>
<para>Buffer containing the bytes to write. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">count</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of bytes to write.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>SR_ERR_ARG</parametername>
</parameternamelist>
<parameterdescription>
<para>Invalid argument. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>SR_ERR</parametername>
</parameternamelist>
<parameterdescription>
<para>Other error. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>other</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of bytes written. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/serial.c" line="447" column="13" bodyfile="src/serial.c" bodystart="447" bodyend="451"/>
      </memberdef>
      <memberdef kind="function" id="a00075_1ga4010b591620a6b947d3cf3247aab2794" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>static int _serial_read</definition>
        <argsstring>(struct sr_serial_dev_inst *serial, void *buf, size_t count, int nonblocking, unsigned int timeout_ms)</argsstring>
        <name>_serial_read</name>
        <param>
          <type>struct sr_serial_dev_inst *</type>
          <declname>serial</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>buf</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>count</declname>
        </param>
        <param>
          <type>int</type>
          <declname>nonblocking</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>timeout_ms</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/serial.c" line="453" column="12" bodyfile="src/serial.c" bodystart="453" bodyend="471"/>
      </memberdef>
      <memberdef kind="function" id="a00075_1gabcc70fbf5c4de294eb3caa0f69a9f179" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="a00050_1a543a61499eead2576f48b70fbc336e71" kindref="member">SR_PRIV</ref> int</type>
        <definition>SR_PRIV int serial_read_blocking</definition>
        <argsstring>(struct sr_serial_dev_inst *serial, void *buf, size_t count, unsigned int timeout_ms)</argsstring>
        <name>serial_read_blocking</name>
        <param>
          <type>struct sr_serial_dev_inst *</type>
          <declname>serial</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>buf</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>count</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>timeout_ms</declname>
        </param>
        <briefdescription>
<para>Read a number of bytes from the specified serial port, block until finished. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>serial</parametername>
</parameternamelist>
<parameterdescription>
<para>Previously initialized serial port structure. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>buf</parametername>
</parameternamelist>
<parameterdescription>
<para>Buffer where to store the bytes that are read. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">count</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of bytes to read. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">timeout_ms</parametername>
</parameternamelist>
<parameterdescription>
<para>Timeout in ms, or 0 for no timeout.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>SR_ERR_ARG</parametername>
</parameternamelist>
<parameterdescription>
<para>Invalid argument. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>SR_ERR</parametername>
</parameternamelist>
<parameterdescription>
<para>Other error. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>other</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of bytes read. If this is less than the number requested, the timeout was reached. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/serial.c" line="488" column="13" bodyfile="src/serial.c" bodystart="488" bodyend="492"/>
      </memberdef>
      <memberdef kind="function" id="a00075_1gab25eedd03f8bfc749d2223b7010eccd0" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="a00050_1a543a61499eead2576f48b70fbc336e71" kindref="member">SR_PRIV</ref> int</type>
        <definition>SR_PRIV int serial_read_nonblocking</definition>
        <argsstring>(struct sr_serial_dev_inst *serial, void *buf, size_t count)</argsstring>
        <name>serial_read_nonblocking</name>
        <param>
          <type>struct sr_serial_dev_inst *</type>
          <declname>serial</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>buf</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>count</declname>
        </param>
        <briefdescription>
<para>Try to read up to <emphasis>count</emphasis> bytes from the specified serial port, return immediately with what&apos;s available. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>serial</parametername>
</parameternamelist>
<parameterdescription>
<para>Previously initialized serial port structure. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>buf</parametername>
</parameternamelist>
<parameterdescription>
<para>Buffer where to store the bytes that are read. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">count</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of bytes to read.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>SR_ERR_ARG</parametername>
</parameternamelist>
<parameterdescription>
<para>Invalid argument. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>SR_ERR</parametername>
</parameternamelist>
<parameterdescription>
<para>Other error. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>other</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of bytes read. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/serial.c" line="508" column="13" bodyfile="src/serial.c" bodystart="508" bodyend="512"/>
      </memberdef>
      <memberdef kind="function" id="a00075_1ga85730998d24d9359d07f1a33416a8360" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="a00050_1a543a61499eead2576f48b70fbc336e71" kindref="member">SR_PRIV</ref> int</type>
        <definition>SR_PRIV int serial_set_params</definition>
        <argsstring>(struct sr_serial_dev_inst *serial, int baudrate, int bits, int parity, int stopbits, int flowcontrol, int rts, int dtr)</argsstring>
        <name>serial_set_params</name>
        <param>
          <type>struct sr_serial_dev_inst *</type>
          <declname>serial</declname>
        </param>
        <param>
          <type>int</type>
          <declname>baudrate</declname>
        </param>
        <param>
          <type>int</type>
          <declname>bits</declname>
        </param>
        <param>
          <type>int</type>
          <declname>parity</declname>
        </param>
        <param>
          <type>int</type>
          <declname>stopbits</declname>
        </param>
        <param>
          <type>int</type>
          <declname>flowcontrol</declname>
        </param>
        <param>
          <type>int</type>
          <declname>rts</declname>
        </param>
        <param>
          <type>int</type>
          <declname>dtr</declname>
        </param>
        <briefdescription>
<para>Set serial parameters for the specified serial port. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>serial</parametername>
</parameternamelist>
<parameterdescription>
<para>Previously initialized serial port structure. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">baudrate</parametername>
</parameternamelist>
<parameterdescription>
<para>The baudrate to set. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">bits</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of data bits to use (5, 6, 7 or 8). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">parity</parametername>
</parameternamelist>
<parameterdescription>
<para>The parity setting to use (0 = none, 1 = even, 2 = odd). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">stopbits</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of stop bits to use (1 or 2). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">flowcontrol</parametername>
</parameternamelist>
<parameterdescription>
<para>The flow control settings to use (0 = none, 1 = RTS/CTS, 2 = XON/XOFF). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">rts</parametername>
</parameternamelist>
<parameterdescription>
<para>Status of RTS line (0 or 1; required by some interfaces). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">dtr</parametername>
</parameternamelist>
<parameterdescription>
<para>Status of DTR line (0 or 1; required by some interfaces).</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>SR_OK</parametername>
</parameternamelist>
<parameterdescription>
<para>Success. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>SR_ERR</parametername>
</parameternamelist>
<parameterdescription>
<para>Failure. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/serial.c" line="532" column="13" bodyfile="src/serial.c" bodystart="532" bodyend="562"/>
      </memberdef>
      <memberdef kind="function" id="a00075_1ga3b3c9ea7a06e39e1b3f6eb506ef58cbe" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="a00050_1a543a61499eead2576f48b70fbc336e71" kindref="member">SR_PRIV</ref> int</type>
        <definition>SR_PRIV int serial_set_handshake</definition>
        <argsstring>(struct sr_serial_dev_inst *serial, int rts, int dtr)</argsstring>
        <name>serial_set_handshake</name>
        <param>
          <type>struct sr_serial_dev_inst *</type>
          <declname>serial</declname>
        </param>
        <param>
          <type>int</type>
          <declname>rts</declname>
        </param>
        <param>
          <type>int</type>
          <declname>dtr</declname>
        </param>
        <briefdescription>
<para>Manipulate handshake state for the specified serial port. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>serial</parametername>
</parameternamelist>
<parameterdescription>
<para>Previously initialized serial port structure. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">rts</parametername>
</parameternamelist>
<parameterdescription>
<para>Status of RTS line (0 or 1; or -1 to ignore). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">dtr</parametername>
</parameternamelist>
<parameterdescription>
<para>Status of DTR line (0 or 1; or -1 to ignore).</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>SR_OK</parametername>
</parameternamelist>
<parameterdescription>
<para>Success. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>SR_ERR</parametername>
</parameternamelist>
<parameterdescription>
<para>Failure. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/serial.c" line="576" column="13" bodyfile="src/serial.c" bodystart="576" bodyend="593"/>
      </memberdef>
      <memberdef kind="function" id="a00075_1gac24f8f2410196dcb93b2a2b305a09ce3" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="a00050_1a543a61499eead2576f48b70fbc336e71" kindref="member">SR_PRIV</ref> int</type>
        <definition>SR_PRIV int serial_set_paramstr</definition>
        <argsstring>(struct sr_serial_dev_inst *serial, const char *paramstr)</argsstring>
        <name>serial_set_paramstr</name>
        <param>
          <type>struct sr_serial_dev_inst *</type>
          <declname>serial</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>paramstr</declname>
        </param>
        <briefdescription>
<para>Set serial parameters for the specified serial port from parameter string. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>serial</parametername>
</parameternamelist>
<parameterdescription>
<para>Previously initialized serial port structure. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">paramstr</parametername>
</parameternamelist>
<parameterdescription>
<para>A serial communication parameters string of the form &quot;&lt;baudrate&gt;/&lt;bits&gt;&lt;parity&gt;&lt;stopbits&gt;{/&lt;option&gt;}&quot;.<linebreak/>
Examples: &quot;9600/8n1&quot;, &quot;600/7o2/dtr=1/rts=0&quot; or &quot;460800/8n1/flow=2&quot;.<linebreak/>
&lt;baudrate&gt;=integer Baud rate.<linebreak/>
&lt;bits&gt;=5|6|7|8 Number of data bits.<linebreak/>
&lt;parity&gt;=n|e|o None, even, odd.<linebreak/>
&lt;stopbits&gt;=1|2 One or two stop bits.<linebreak/>
Options:<linebreak/>
dtr=0|1 Set DTR off resp. on.<linebreak/>
flow=0|1|2 Flow control. 0 for none, 1 for RTS/CTS, 2 for XON/XOFF.<linebreak/>
rts=0|1 Set RTS off resp. on.<linebreak/>
Please note that values and combinations of these parameters must be supported by the concrete serial interface hardware and the drivers for it.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>SR_OK</parametername>
</parameternamelist>
<parameterdescription>
<para>Success. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>SR_ERR</parametername>
</parameternamelist>
<parameterdescription>
<para>Failure. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/serial.c" line="618" column="13" bodyfile="src/serial.c" bodystart="618" bodyend="720"/>
      </memberdef>
      <memberdef kind="function" id="a00075_1ga57a1ae7aae5aefb345821cebac3a5ca7" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="a00050_1a543a61499eead2576f48b70fbc336e71" kindref="member">SR_PRIV</ref> int</type>
        <definition>SR_PRIV int serial_readline</definition>
        <argsstring>(struct sr_serial_dev_inst *serial, char **buf, int *buflen, gint64 timeout_ms)</argsstring>
        <name>serial_readline</name>
        <param>
          <type>struct sr_serial_dev_inst *</type>
          <declname>serial</declname>
        </param>
        <param>
          <type>char **</type>
          <declname>buf</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>buflen</declname>
        </param>
        <param>
          <type>gint64</type>
          <declname>timeout_ms</declname>
        </param>
        <briefdescription>
<para>Read a line from the specified serial port. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">serial</parametername>
</parameternamelist>
<parameterdescription>
<para>Previously initialized serial port structure. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">buf</parametername>
</parameternamelist>
<parameterdescription>
<para>Buffer where to store the bytes that are read. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">buflen</parametername>
</parameternamelist>
<parameterdescription>
<para>Size of the buffer. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">timeout_ms</parametername>
</parameternamelist>
<parameterdescription>
<para>How long to wait for a line to come in.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
Reading stops when CR or LF is found, which is stripped from the buffer.</para>
<para><parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>SR_OK</parametername>
</parameternamelist>
<parameterdescription>
<para>Success. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>SR_ERR</parametername>
</parameternamelist>
<parameterdescription>
<para>Failure. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/serial.c" line="737" column="13" bodyfile="src/serial.c" bodystart="737" bodyend="785"/>
      </memberdef>
      <memberdef kind="function" id="a00075_1ga9544816cffe4c140e1ca5dc50d70f20b" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="a00050_1a543a61499eead2576f48b70fbc336e71" kindref="member">SR_PRIV</ref> int</type>
        <definition>SR_PRIV int serial_stream_detect</definition>
        <argsstring>(struct sr_serial_dev_inst *serial, uint8_t *buf, size_t *buflen, size_t packet_size, packet_valid_callback is_valid, packet_valid_len_callback is_valid_len, size_t *return_size, uint64_t timeout_ms)</argsstring>
        <name>serial_stream_detect</name>
        <param>
          <type>struct sr_serial_dev_inst *</type>
          <declname>serial</declname>
        </param>
        <param>
          <type>uint8_t *</type>
          <declname>buf</declname>
        </param>
        <param>
          <type>size_t *</type>
          <declname>buflen</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>packet_size</declname>
        </param>
        <param>
          <type>packet_valid_callback</type>
          <declname>is_valid</declname>
        </param>
        <param>
          <type>packet_valid_len_callback</type>
          <declname>is_valid_len</declname>
        </param>
        <param>
          <type>size_t *</type>
          <declname>return_size</declname>
        </param>
        <param>
          <type>uint64_t</type>
          <declname>timeout_ms</declname>
        </param>
        <briefdescription>
<para>Try to find a valid packet in a serial data stream. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">serial</parametername>
</parameternamelist>
<parameterdescription>
<para>Previously initialized serial port structure. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">buf</parametername>
</parameternamelist>
<parameterdescription>
<para>Buffer containing the bytes to write. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">buflen</parametername>
</parameternamelist>
<parameterdescription>
<para>Size of the buffer. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">packet_size</parametername>
</parameternamelist>
<parameterdescription>
<para>Size, in bytes, of a valid packet. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">is_valid</parametername>
</parameternamelist>
<parameterdescription>
<para>Callback that assesses whether the packet is valid or not. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">is_valid_len</parametername>
</parameternamelist>
<parameterdescription>
<para>Callback which checks a variable length packet. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">return_size</parametername>
</parameternamelist>
<parameterdescription>
<para>Detected packet size in case of successful match. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">timeout_ms</parametername>
</parameternamelist>
<parameterdescription>
<para>The timeout after which, if no packet is detected, to abort scanning.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
Data is received from the serial port and into the caller provided buffer, until the buffer is exhausted, or the timeout has expired, or a valid packet was found. Receive data is passed to the caller provided validity check routine, assuming either fixed size packets (#is_valid parameter, exact match to the #packet_size length) or packets of variable length (#is_valid_len parameter, minimum length #packet_size required for first invocation).</para>
<para><parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>SR_OK</parametername>
</parameternamelist>
<parameterdescription>
<para>Valid packet was found within the given timeout. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>SR_ERR</parametername>
</parameternamelist>
<parameterdescription>
<para>Failure. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/serial.c" line="813" column="13" bodyfile="src/serial.c" bodystart="813" bodyend="926"/>
      </memberdef>
      <memberdef kind="function" id="a00075_1ga1614987c1a71159fc77e93f0e0f801d5" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="a00050_1a543a61499eead2576f48b70fbc336e71" kindref="member">SR_PRIV</ref> int</type>
        <definition>SR_PRIV int sr_serial_extract_options</definition>
        <argsstring>(GSList *options, const char **serial_device, const char **serial_options)</argsstring>
        <name>sr_serial_extract_options</name>
        <param>
          <type>GSList *</type>
          <declname>options</declname>
        </param>
        <param>
          <type>const char **</type>
          <declname>serial_device</declname>
        </param>
        <param>
          <type>const char **</type>
          <declname>serial_options</declname>
        </param>
        <briefdescription>
<para>Extract the serial device and options from the options linked list. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>options</parametername>
</parameternamelist>
<parameterdescription>
<para>List of options passed from the command line. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>serial_device</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer where to store the extracted serial device. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>serial_options</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer where to store the optional extracted serial options.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>SR_OK if a serial_device is found, SR_ERR if no device is found. The returned string should not be freed by the caller. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/serial.c" line="941" column="13" bodyfile="src/serial.c" bodystart="941" bodyend="969"/>
      </memberdef>
      <memberdef kind="function" id="a00075_1ga8a4d1fee6cc3ecb381312792a618a2a6" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="a00050_1a543a61499eead2576f48b70fbc336e71" kindref="member">SR_PRIV</ref> int</type>
        <definition>SR_PRIV int serial_source_add</definition>
        <argsstring>(struct sr_session *session, struct sr_serial_dev_inst *serial, int events, int timeout, sr_receive_data_callback cb, void *cb_data)</argsstring>
        <name>serial_source_add</name>
        <param>
          <type>struct <ref refid="a00190" kindref="compound">sr_session</ref> *</type>
          <declname>session</declname>
        </param>
        <param>
          <type>struct sr_serial_dev_inst *</type>
          <declname>serial</declname>
        </param>
        <param>
          <type>int</type>
          <declname>events</declname>
        </param>
        <param>
          <type>int</type>
          <declname>timeout</declname>
        </param>
        <param>
          <type><ref refid="a00050_1a432819131a35ea488b386755eae5eb83" kindref="member">sr_receive_data_callback</ref></type>
          <declname>cb</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>cb_data</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/serial.c" line="972" column="13" bodyfile="src/serial.c" bodystart="972" bodyend="991"/>
      </memberdef>
      <memberdef kind="function" id="a00075_1ga174a349dbf29dc76a069209001464f7c" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="a00050_1a543a61499eead2576f48b70fbc336e71" kindref="member">SR_PRIV</ref> int</type>
        <definition>SR_PRIV int serial_source_remove</definition>
        <argsstring>(struct sr_session *session, struct sr_serial_dev_inst *serial)</argsstring>
        <name>serial_source_remove</name>
        <param>
          <type>struct <ref refid="a00190" kindref="compound">sr_session</ref> *</type>
          <declname>session</declname>
        </param>
        <param>
          <type>struct sr_serial_dev_inst *</type>
          <declname>serial</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/serial.c" line="994" column="13" bodyfile="src/serial.c" bodystart="994" bodyend="1006"/>
      </memberdef>
      <memberdef kind="function" id="a00075_1ga4d5cabf0d89e7c01b667fec014ee0939" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>struct <ref refid="a00182" kindref="compound">sr_serial_port</ref> *</type>
        <definition>static struct sr_serial_port* sr_serial_new</definition>
        <argsstring>(const char *name, const char *description)</argsstring>
        <name>sr_serial_new</name>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>description</declname>
        </param>
        <briefdescription>
<para>Create/allocate a new <ref refid="a00182" kindref="compound">sr_serial_port</ref> structure. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>The OS dependent name of the serial port. Must not be NULL. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>description</parametername>
</parameternamelist>
<parameterdescription>
<para>An end user friendly description for the serial port. Can be NULL (in that case the empty string is used as description).</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The newly allocated <ref refid="a00182" kindref="compound">sr_serial_port</ref> struct. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/serial.c" line="1018" column="28" bodyfile="src/serial.c" bodystart="1018" bodyend="1031"/>
      </memberdef>
      <memberdef kind="function" id="a00075_1ga1c53acd13d3ff7895d4bc9d1f1fc3df8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void sr_serial_free</definition>
        <argsstring>(struct sr_serial_port *serial)</argsstring>
        <name>sr_serial_free</name>
        <param>
          <type>struct <ref refid="a00182" kindref="compound">sr_serial_port</ref> *</type>
          <declname>serial</declname>
        </param>
        <briefdescription>
<para>Free a previously allocated <ref refid="a00182" kindref="compound">sr_serial_port</ref> structure. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>serial</parametername>
</parameternamelist>
<parameterdescription>
<para>The <ref refid="a00182" kindref="compound">sr_serial_port</ref> struct to free. Must not be NULL. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/serial.c" line="1038" column="7" bodyfile="src/serial.c" bodystart="1038" bodyend="1045"/>
        <references refid="a00182_1a8fe5ff6c0b75442717673e3ae40bfd6e" compoundref="a00050" startline="1266">sr_serial_port::description</references>
        <references refid="a00182_1ae4aa770ba1ab042be67c26dac907b90b" compoundref="a00050" startline="1264">sr_serial_port::name</references>
      </memberdef>
      <memberdef kind="function" id="a00075_1ga65287a81409c50542463fc26384dccd1" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GSList *</type>
        <definition>static GSList* append_port_list</definition>
        <argsstring>(GSList *devs, const char *name, const char *desc)</argsstring>
        <name>append_port_list</name>
        <param>
          <type>GSList *</type>
          <declname>devs</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>desc</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/serial.c" line="1047" column="15" bodyfile="src/serial.c" bodystart="1047" bodyend="1050"/>
      </memberdef>
      <memberdef kind="function" id="a00075_1gaa663dbbaa19113a8799256024df1dc2c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GSList *</type>
        <definition>GSList* sr_serial_list</definition>
        <argsstring>(const struct sr_dev_driver *driver)</argsstring>
        <name>sr_serial_list</name>
        <param>
          <type>const struct <ref refid="a00178" kindref="compound">sr_dev_driver</ref> *</type>
          <declname>driver</declname>
        </param>
        <briefdescription>
<para>List available serial devices. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>A GSList of strings containing the path of the serial devices or NULL if no serial device is found. The returned list must be freed by the caller. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/serial.c" line="1059" column="9" bodyfile="src/serial.c" bodystart="1059" bodyend="1082"/>
      </memberdef>
      <memberdef kind="function" id="a00075_1ga7082dff6b00203878ee63bbbbe5f5c8d" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GSList *</type>
        <definition>static GSList* append_port_find</definition>
        <argsstring>(GSList *devs, const char *name)</argsstring>
        <name>append_port_find</name>
        <param>
          <type>GSList *</type>
          <declname>devs</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/serial.c" line="1084" column="15" bodyfile="src/serial.c" bodystart="1084" bodyend="1090"/>
      </memberdef>
      <memberdef kind="function" id="a00075_1ga70a6ca4234c7152c4ad814867af09a2c" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="a00050_1a543a61499eead2576f48b70fbc336e71" kindref="member">SR_PRIV</ref> GSList *</type>
        <definition>SR_PRIV GSList* sr_serial_find_usb</definition>
        <argsstring>(uint16_t vendor_id, uint16_t product_id)</argsstring>
        <name>sr_serial_find_usb</name>
        <param>
          <type>uint16_t</type>
          <declname>vendor_id</declname>
        </param>
        <param>
          <type>uint16_t</type>
          <declname>product_id</declname>
        </param>
        <briefdescription>
<para>Find USB serial devices via the USB vendor ID and product ID. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">vendor_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Vendor ID of the USB device. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">product_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Product ID of the USB device.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A GSList of strings containing the path of the serial device or NULL if no serial device is found. The returned list must be freed by the caller. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/serial.c" line="1104" column="16" bodyfile="src/serial.c" bodystart="1104" bodyend="1123"/>
      </memberdef>
      <memberdef kind="function" id="a00075_1ga3357a6d03051343d19498fd4e14f3322" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="a00050_1a543a61499eead2576f48b70fbc336e71" kindref="member">SR_PRIV</ref> int</type>
        <definition>SR_PRIV int serial_timeout</definition>
        <argsstring>(struct sr_serial_dev_inst *port, int num_bytes)</argsstring>
        <name>serial_timeout</name>
        <param>
          <type>struct sr_serial_dev_inst *</type>
          <declname>port</declname>
        </param>
        <param>
          <type>int</type>
          <declname>num_bytes</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/serial.c" line="1126" column="13" bodyfile="src/serial.c" bodystart="1126" bodyend="1152"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Serial port handling functions. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
  </compounddef>
</doxygen>
